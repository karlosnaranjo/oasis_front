{"version":3,"file":"static/js/305.5a164d40.chunk.js","mappings":"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","sources":["pages/masters/targets/Edit.js","pages/masters/targets/Form.js","../node_modules/@mui/system/esm/Box/boxClasses.js","../node_modules/@mui/system/esm/Box/Box.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport { withApi, withNotification } from 'wrappers';\r\nimport { PageGeneral } from 'components';\r\nimport masterMessages from 'constantes/masterMessages';\r\nimport { useParams } from 'react-router';\r\nimport TabsComponent from 'components/Tab';\r\nimport { Card, Grid } from '@mui/material';\r\nimport TargetsForm from './Form';\r\n\r\nconst { title, updateTitle } = masterMessages.masters.targets;\r\n\r\nconst breadcrumbs = [{ label: 'Maestros' }, { label: title }];\r\n\r\nconst MIN_HEIGHT = 250;\r\n\r\nfunction Edit() {\r\n  const { id } = useParams();\r\n  const [editable, setEditable] = useState(false);\r\n  const [viewMode, setViewMode] = useState(false);\r\n\r\n  const child = useRef();\r\n\r\n  const refreshParent = () => child.current.refresh();\r\n  \r\n\r\n  return (\r\n    <PageGeneral title={updateTitle} breadcrumbs={breadcrumbs} withOutCard>\r\n      <Grid container spacing={2} sx={{ pb: 2, minHeight: MIN_HEIGHT }}>\r\n        <Grid item xs={12} md={12}>\r\n          <Card sx={{ p: 3, minHeight: '100%' }}>\r\n              <TargetsForm id={id} refresh={child} setEditable={setEditable} setViewMode={setViewMode} viewMode={viewMode} \r\n              />\r\n          </Card>\r\n        </Grid>\r\n      </Grid>\r\n      \r\n    </PageGeneral>\r\n  );\r\n}\r\n\r\nexport default withApi(withNotification(Edit));","import React, { useCallback, useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Grid,  } from '@mui/material';\r\nimport { Form, Field, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { TextBase, SelectBase,  Loader } from 'components';\r\nimport endPoints from 'endPoints/endPoints';\r\nimport messages from 'constantes/messages';\r\nimport { withApi, withNotification } from 'wrappers';\r\nimport { FormButtons } from 'components/controls';\r\nimport { useNavigate } from 'react-router';\r\nimport { Box } from '@mui/system';\r\nimport { getStatusLabel, getStatusValue } from 'utils/formHelpers';\r\n\r\n\r\nconst validationSchema = Yup.object({\r\n   \tcode: Yup.string().required('Codigo es requerido'),\r\n\tname: Yup.string().required('Nombre fase es requerido'),\r\n\tphase_id: Yup.string().required('Fase es requerido'),\r\n\tstatus: Yup.string().required('Estado es requerido'),\r\n \r\n});\r\n\r\nconst urlBase = endPoints.masters.targets.base;\r\n\r\nlet phaseList = [];\r\n\r\n\r\nconst baseUrl = '/app/general/masters/targets';\r\n\r\nconst initState = {\r\n    \tcode: false,\r\n\tname: false,\r\n\tphase_id: null,\r\n\tstatus: 1,\r\n\r\n};\r\n\r\nconst selectMap = (data) => {\r\n    return data.map((row) => ({ value: row.id, label: row.name }));\r\n};\r\n\r\nconst TargetsForm = ({\r\n    id,\r\n    doGet,\r\n    genericException,\r\n    appSuccess,\r\n    doPost,\r\n    doPut,\r\n    appInfo,\r\n    setEditable,\r\n    viewMode,\r\n    refresh,\r\n    }) => {\r\n    const navigate = useNavigate();\r\n    const [state, setState] = useState(initState);\r\n    const [isLoading, setLoading] = useState(true);\r\n\r\n    // Call to API for load form values\r\n    const loadFields = useCallback(async () => {\r\n    const params = {\r\n        url: endPoints.masters.targets.initForm,\r\n        data: id ? { id: id } : {}\r\n    };\r\n    const resp = await doGet(params);\r\n    return resp;\r\n    }, [doGet, id, refresh, setEditable]);\r\n\r\n    const init = useCallback(async () => {\r\n    try {\r\n        const { targets, phase,  } = await loadFields();\r\nphaseList = selectMap(phase);\r\n\r\n\r\n        const {\r\ncode, name, phase_id, status, \r\n        } = targets;\r\n\r\n        setState({\r\n\t\t\tcode: code || \"\",\r\n\t\t\tname: name || \"\",\r\n\t\t\tphase_id: phase_id || null,\r\n\t\t\tstatus: getStatusLabel(status) || \"Activo\",\r\n\r\n        });\r\n\r\n        setLoading(false);\r\n    } catch (error) {\r\n        console.log('ERROR AL INICIAR'+error);\r\n        genericException(error);\r\n    }\r\n    }, [genericException, loadFields]);\r\n\r\n    useEffect(() => {\r\n        init();\r\n    }, [init]);\r\n\r\n    const redirectEdit = (id) => {\r\n        navigate(`${baseUrl}/edit/${id}`, { replace: false });\r\n    };\r\n\r\n    const mapValues = (values) => {\r\n        const { code, name, phase_id, status,  } = values;\r\n        return {\r\ncode, name, phase_id, status: getStatusValue(status), \r\n        };\r\n    };\r\n\r\n    const submit = async (valuesForm) => {\r\n        const data = mapValues(valuesForm);\r\n        const params = {\r\n            url: id ? `${urlBase}/${id}` : urlBase,\r\n            data: data\r\n        };\r\n        const method = id ? doPut : doPost;\r\n\r\n        try {\r\n            const resp = await method(params);\r\n            if (id) {\r\n                appInfo(messages.crud.update);\r\n                redirectEdit(resp.response.data.id);\r\n            } else {\r\n                appSuccess(messages.crud.new);\r\n                redirectEdit(resp.response.data.id);\r\n            }\r\n        } catch (error) {\r\n            console.log('ERROR AL GUARDAR '+error);\r\n            genericException(error);\r\n        }\r\n    };\r\n\r\n    return (\r\n    <>\r\n        {isLoading ? (\r\n            <Box p={10}>\r\n                <Loader />\r\n            </Box>\r\n        ) : (\r\n            <Formik enableReinitialize initialValues={state} validationSchema={validationSchema} onSubmit={submit}>\r\n                {(subProps) => (\r\n                <Form>\r\n                    {!id && viewMode ? (\r\n                    <FormButtons formProps={subProps} />\r\n                    ) : (\r\n                    <FormButtons formProps={subProps} />\r\n                    )}\r\n                    <Grid container direction=\"row\" spacing={2}>\r\n    \r\n                        <Grid item xs={6} md={6} xl={6}>\r\n                            <Field label=\"Codigo\" name=\"code\" component={TextBase} \r\n                                //onClick={(event) => handleChangecode(event)} \r\n                            />\r\n                        </Grid>\r\n            \r\n                        <Grid item xs={6} md={6} xl={6}>\r\n                            <Field label=\"Nombre fase\" name=\"name\" component={TextBase} \r\n                                //onClick={(event) => handleChangename(event)} \r\n                            />\r\n                        </Grid>\r\n            \r\n                                <Grid item xs={6} md={6} xl={6}>\r\n                                    <Field label=\"Fase\" name=\"phase_id\" component={SelectBase} items={phaseList}  \r\n                                        /*onOptionSelected={(selectedOption) => handleOnChangephase_id(selectedOption, subProps)} */\r\n                                    />\r\n                                </Grid>\r\n                    \r\n                        <Grid item xs={12} md={6} xl={6}>\r\n                            <Field label=\"Estado\" name=\"status\" component={TextBase} disabled={true} />\r\n                        </Grid>\r\n            \r\n                    </Grid>\r\n                </Form>\r\n                )}\r\n            </Formik>\r\n        )}\r\n    </>\r\n    );\r\n};\r\n\r\nTargetsForm.propTypes = {\r\n    id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n    doPost: PropTypes.func,\r\n    doGet: PropTypes.func,\r\n    doPut: PropTypes.func,\r\n    appInfo: PropTypes.func.isRequired,\r\n    appSuccess: PropTypes.func.isRequired,\r\n    genericException: PropTypes.func.isRequired,\r\n    setEditable: PropTypes.func,\r\n    refresh: PropTypes.oneOfType([PropTypes.object])\r\n};\r\n\r\nexport default withApi(withNotification(TargetsForm));","import { unstable_generateUtilityClasses as generateUtilityClasses } from '@mui/utils';\nconst boxClasses = generateUtilityClasses('MuiBox', ['root']);\nexport default boxClasses;","'use client';\n\nimport PropTypes from 'prop-types';\nimport { unstable_ClassNameGenerator as ClassNameGenerator } from '@mui/utils';\nimport createBox from '../createBox';\nimport boxClasses from './boxClasses';\nconst Box = createBox({\n  defaultClassName: boxClasses.root,\n  generateClassName: ClassNameGenerator.generate\n});\nprocess.env.NODE_ENV !== \"production\" ? Box.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default Box;"],"names":["title","updateTitle","masterMessages","masters","targets","breadcrumbs","label","withApi","withNotification","id","useParams","editable","setEditable","useState","viewMode","setViewMode","child","useRef","_jsx","PageGeneral","withOutCard","children","Grid","container","spacing","sx","pb","minHeight","item","xs","md","Card","p","TargetsForm","refresh","validationSchema","Yup","code","required","name","phase_id","status","urlBase","endPoints","base","phaseList","initState","_ref","doGet","genericException","appSuccess","doPost","doPut","appInfo","navigate","useNavigate","state","setState","isLoading","setLoading","loadFields","useCallback","async","params","url","initForm","data","init","phase","map","row","value","getStatusLabel","error","console","log","useEffect","redirectEdit","concat","replace","_Fragment","Box","Loader","Formik","enableReinitialize","initialValues","onSubmit","values","getStatusValue","mapValues","valuesForm","method","resp","messages","crud","update","response","new","subProps","_jsxs","Form","FormButtons","formProps","direction","xl","Field","component","TextBase","SelectBase","items","disabled","generateUtilityClasses","createBox","defaultClassName","boxClasses","root","generateClassName","ClassNameGenerator","generate"],"sourceRoot":""}