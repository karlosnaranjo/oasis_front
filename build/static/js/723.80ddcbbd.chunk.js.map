{"version":3,"file":"static/js/723.80ddcbbd.chunk.js","mappings":"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","sources":["pages/masters/targets/Form.js","pages/masters/targets/New.js","../node_modules/@mui/system/esm/Box/boxClasses.js","../node_modules/@mui/system/esm/Box/Box.js"],"sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Grid,  } from '@mui/material';\nimport { Form, Field, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { TextBase, SelectBase,  Loader } from 'components';\nimport endPoints from 'endPoints/endPoints';\nimport messages from 'constantes/messages';\nimport { withApi, withNotification } from 'wrappers';\nimport { FormButtons } from 'components/controls';\nimport { useNavigate } from 'react-router';\nimport { Box } from '@mui/system';\nimport { getStatusLabel, getStatusValue } from 'utils/formHelpers';\n\n\nconst validationSchema = Yup.object({\n   \tcode: Yup.string().required('Codigo es requerido'),\n\tname: Yup.string().required('Nombre fase es requerido'),\n\tphase_id: Yup.string().required('Fase es requerido'),\n\tstatus: Yup.string().required('Estado es requerido'),\n \n});\n\nconst urlBase = endPoints.masters.targets.base;\n\nlet phaseList = [];\n\n\nconst baseUrl = '/app/general/masters/targets';\n\nconst initState = {\n    \tcode: false,\n\tname: false,\n\tphase_id: null,\n\tstatus: 1,\n\n};\n\nconst selectMap = (data) => {\n    return data.map((row) => ({ value: row.id, label: row.name }));\n};\n\nconst TargetsForm = ({\n    id,\n    doGet,\n    genericException,\n    appSuccess,\n    doPost,\n    doPut,\n    appInfo,\n    setEditable,\n    viewMode,\n    refresh,\n    }) => {\n    const navigate = useNavigate();\n    const [state, setState] = useState(initState);\n    const [isLoading, setLoading] = useState(true);\n\n    // Call to API for load form values\n    const loadFields = useCallback(async () => {\n    const params = {\n        url: endPoints.masters.targets.initForm,\n        data: id ? { id: id } : {}\n    };\n    const resp = await doGet(params);\n    return resp;\n    }, [doGet, id, refresh, setEditable]);\n\n    const init = useCallback(async () => {\n    try {\n        const { targets, phase,  } = await loadFields();\nphaseList = selectMap(phase);\n\n\n        const {\ncode, name, phase_id, status, \n        } = targets;\n\n        setState({\n\t\t\tcode: code || \"\",\n\t\t\tname: name || \"\",\n\t\t\tphase_id: phase_id || null,\n\t\t\tstatus: getStatusLabel(status) || \"Activo\",\n\n        });\n\n        setLoading(false);\n    } catch (error) {\n        console.log('ERROR AL INICIAR'+error);\n        genericException(error);\n    }\n    }, [genericException, loadFields]);\n\n    useEffect(() => {\n        init();\n    }, [init]);\n\n    const redirectEdit = (id) => {\n        navigate(`${baseUrl}/edit/${id}`, { replace: false });\n    };\n\n    const mapValues = (values) => {\n        const { code, name, phase_id, status,  } = values;\n        return {\ncode, name, phase_id, status: getStatusValue(status), \n        };\n    };\n\n    const submit = async (valuesForm) => {\n        const data = mapValues(valuesForm);\n        const params = {\n            url: id ? `${urlBase}/${id}` : urlBase,\n            data: data\n        };\n        const method = id ? doPut : doPost;\n\n        try {\n            const resp = await method(params);\n            if (id) {\n                appInfo(messages.crud.update);\n                redirectEdit(resp.response.data.id);\n            } else {\n                appSuccess(messages.crud.new);\n                redirectEdit(resp.response.data.id);\n            }\n        } catch (error) {\n            console.log('ERROR AL GUARDAR '+error);\n            genericException(error);\n        }\n    };\n\n    return (\n    <>\n        {isLoading ? (\n            <Box p={10}>\n                <Loader />\n            </Box>\n        ) : (\n            <Formik enableReinitialize initialValues={state} validationSchema={validationSchema} onSubmit={submit}>\n                {(subProps) => (\n                <Form>\n                    {!id && viewMode ? (\n                    <FormButtons formProps={subProps} />\n                    ) : (\n                    <FormButtons formProps={subProps} />\n                    )}\n                    <Grid container direction=\"row\" spacing={2}>\n    \n                        <Grid item xs={6} md={6} xl={6}>\n                            <Field label=\"Codigo\" name=\"code\" component={TextBase} \n                                //onClick={(event) => handleChangecode(event)} \n                            />\n                        </Grid>\n            \n                        <Grid item xs={6} md={6} xl={6}>\n                            <Field label=\"Nombre fase\" name=\"name\" component={TextBase} \n                                //onClick={(event) => handleChangename(event)} \n                            />\n                        </Grid>\n            \n                                <Grid item xs={6} md={6} xl={6}>\n                                    <Field label=\"Fase\" name=\"phase_id\" component={SelectBase} items={phaseList}  \n                                        /*onOptionSelected={(selectedOption) => handleOnChangephase_id(selectedOption, subProps)} */\n                                    />\n                                </Grid>\n                    \n                        <Grid item xs={12} md={6} xl={6}>\n                            <Field label=\"Estado\" name=\"status\" component={TextBase} disabled={true} />\n                        </Grid>\n            \n                    </Grid>\n                </Form>\n                )}\n            </Formik>\n        )}\n    </>\n    );\n};\n\nTargetsForm.propTypes = {\n    id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    doPost: PropTypes.func,\n    doGet: PropTypes.func,\n    doPut: PropTypes.func,\n    appInfo: PropTypes.func.isRequired,\n    appSuccess: PropTypes.func.isRequired,\n    genericException: PropTypes.func.isRequired,\n    setEditable: PropTypes.func,\n    refresh: PropTypes.oneOfType([PropTypes.object])\n};\n\nexport default withApi(withNotification(TargetsForm));","import React, { useState, useRef } from 'react';\nimport { PageGeneral } from 'components';\nimport masterMessages from 'constantes/masterMessages';\nimport TargetsForm from './Form';\n\nconst { title, createTitle } = masterMessages.masters.targets;\n\nconst breadcrumbs = [{ label: 'Maestros' }, { label: title }];\n\nfunction New() {\n  const [editable, setEditable] = useState(false);\n  const [viewMode, setViewMode] = useState(false);\n  const child = useRef();\n\n  return (\n    <PageGeneral title={createTitle} breadcrumbs={breadcrumbs}>\n      <TargetsForm\n        refresh={child}\n        setEditable={setEditable}\n        setViewMode={setViewMode}\n        viewMode={viewMode} \n      />\n    </PageGeneral>\n  );\n}\n\nNew.propTypes = {};\n\nexport default New;","import { unstable_generateUtilityClasses as generateUtilityClasses } from '@mui/utils';\nconst boxClasses = generateUtilityClasses('MuiBox', ['root']);\nexport default boxClasses;","'use client';\n\nimport PropTypes from 'prop-types';\nimport { unstable_ClassNameGenerator as ClassNameGenerator } from '@mui/utils';\nimport createBox from '../createBox';\nimport boxClasses from './boxClasses';\nconst Box = createBox({\n  defaultClassName: boxClasses.root,\n  generateClassName: ClassNameGenerator.generate\n});\nprocess.env.NODE_ENV !== \"production\" ? Box.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default Box;"],"names":["validationSchema","Yup","code","required","name","phase_id","status","urlBase","endPoints","masters","targets","base","phaseList","initState","withApi","withNotification","_ref","id","doGet","genericException","appSuccess","doPost","doPut","appInfo","setEditable","viewMode","refresh","navigate","useNavigate","state","setState","useState","isLoading","setLoading","loadFields","useCallback","async","params","url","initForm","data","init","phase","map","row","value","label","getStatusLabel","error","console","log","useEffect","redirectEdit","concat","replace","_jsx","_Fragment","children","Box","p","Loader","Formik","enableReinitialize","initialValues","onSubmit","values","getStatusValue","mapValues","valuesForm","method","resp","messages","crud","update","response","new","subProps","_jsxs","Form","FormButtons","formProps","Grid","container","direction","spacing","item","xs","md","xl","Field","component","TextBase","SelectBase","items","disabled","title","createTitle","masterMessages","breadcrumbs","editable","setViewMode","child","useRef","PageGeneral","TargetsForm","generateUtilityClasses","createBox","defaultClassName","boxClasses","root","generateClassName","ClassNameGenerator","generate"],"sourceRoot":""}