{"version":3,"file":"static/js/505.bb38b202.chunk.js","mappings":"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","sources":["pages/masters/relatives/Edit.js","pages/masters/relatives/Form.js","../node_modules/@mui/system/esm/Box/boxClasses.js","../node_modules/@mui/system/esm/Box/Box.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport { withApi, withNotification } from 'wrappers';\nimport { PageGeneral } from 'components';\nimport masterMessages from 'constantes/masterMessages';\nimport { useParams } from 'react-router';\nimport TabsComponent from 'components/Tab';\nimport { Card, Grid } from '@mui/material';\nimport RelativesForm from './Form';\n\nconst { title, updateTitle } = masterMessages.masters.relatives;\n\nconst breadcrumbs = [{ label: 'Maestros' }, { label: title }];\n\nconst MIN_HEIGHT = 250;\n\nfunction Edit() {\n  const { id } = useParams();\n  const [editable, setEditable] = useState(false);\n  const [viewMode, setViewMode] = useState(false);\n\n  const child = useRef();\n\n  const refreshParent = () => child.current.refresh();\n  \n\n  return (\n    <PageGeneral title={updateTitle} breadcrumbs={breadcrumbs} withOutCard>\n      <Grid container spacing={2} sx={{ pb: 2, minHeight: MIN_HEIGHT }}>\n        <Grid item xs={12} md={12}>\n          <Card sx={{ p: 3, minHeight: '100%' }}>\n              <RelativesForm id={id} refresh={child} setEditable={setEditable} setViewMode={setViewMode} viewMode={viewMode} \n              />\n          </Card>\n        </Grid>\n      </Grid>\n      \n    </PageGeneral>\n  );\n}\n\nexport default withApi(withNotification(Edit));","import React, { useCallback, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Grid,  } from '@mui/material';\nimport { Form, Field, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { TextBase,  Loader } from 'components';\nimport endPoints from 'endPoints/endPoints';\nimport messages from 'constantes/messages';\nimport { withApi, withNotification } from 'wrappers';\nimport { FormButtons } from 'components/controls';\nimport { useNavigate } from 'react-router';\nimport { Box } from '@mui/system';\nimport { getStatusLabel, getStatusValue } from 'utils/formHelpers';\n\n\nconst validationSchema = Yup.object({\n   \tcode: Yup.string().required('Codigo es requerido'),\n\tname: Yup.string().required('Nombre fase es requerido'),\n\tstatus: Yup.string().required('Estado es requerido'),\n \n});\n\nconst urlBase = endPoints.masters.relatives.base;\n\n\n\nconst baseUrl = '/app/general/masters/relatives';\n\nconst initState = {\n    \tcode: false,\n\tname: false,\n\tstatus: 1,\n\n};\n\nconst selectMap = (data) => {\n    return data.map((row) => ({ value: row.id, label: row.name }));\n};\n\nconst RelativesForm = ({\n    id,\n    doGet,\n    genericException,\n    appSuccess,\n    doPost,\n    doPut,\n    appInfo,\n    setEditable,\n    viewMode,\n    refresh,\n    }) => {\n    const navigate = useNavigate();\n    const [state, setState] = useState(initState);\n    const [isLoading, setLoading] = useState(true);\n\n    // Call to API for load form values\n    const loadFields = useCallback(async () => {\n    const params = {\n        url: endPoints.masters.relatives.initForm,\n        data: id ? { id: id } : {}\n    };\n    const resp = await doGet(params);\n    return resp;\n    }, [doGet, id, refresh, setEditable]);\n\n    const init = useCallback(async () => {\n    try {\n        const { relatives,  } = await loadFields();\n\n\n        const {\ncode, name, status, \n        } = relatives;\n\n        setState({\n\t\t\tcode: code || \"\",\n\t\t\tname: name || \"\",\n\t\t\tstatus: getStatusLabel(status) || \"Activo\",\n\n        });\n\n        setLoading(false);\n    } catch (error) {\n        console.log('ERROR AL INICIAR'+error);\n        genericException(error);\n    }\n    }, [genericException, loadFields]);\n\n    useEffect(() => {\n        init();\n    }, [init]);\n\n    const redirectEdit = (id) => {\n        navigate(`${baseUrl}/edit/${id}`, { replace: false });\n    };\n\n    const mapValues = (values) => {\n        const { code, name, status,  } = values;\n        return {\ncode, name, status: getStatusValue(status), \n        };\n    };\n\n    const submit = async (valuesForm) => {\n        const data = mapValues(valuesForm);\n        const params = {\n            url: id ? `${urlBase}/${id}` : urlBase,\n            data: data\n        };\n        const method = id ? doPut : doPost;\n\n        try {\n            const resp = await method(params);\n            if (id) {\n                appInfo(messages.crud.update);\n                redirectEdit(resp.response.data.id);\n            } else {\n                appSuccess(messages.crud.new);\n                redirectEdit(resp.response.data.id);\n            }\n        } catch (error) {\n            console.log('ERROR AL GUARDAR '+error);\n            genericException(error);\n        }\n    };\n\n    return (\n    <>\n        {isLoading ? (\n            <Box p={10}>\n                <Loader />\n            </Box>\n        ) : (\n            <Formik enableReinitialize initialValues={state} validationSchema={validationSchema} onSubmit={submit}>\n                {(subProps) => (\n                <Form>\n                    {!id && viewMode ? (\n                    <FormButtons formProps={subProps} />\n                    ) : (\n                    <FormButtons formProps={subProps} />\n                    )}\n                    <Grid container direction=\"row\" spacing={2}>\n    \n                        <Grid item xs={6} md={6} xl={6}>\n                            <Field label=\"Codigo\" name=\"code\" component={TextBase} \n                                //onClick={(event) => handleChangecode(event)} \n                            />\n                        </Grid>\n            \n                        <Grid item xs={6} md={6} xl={6}>\n                            <Field label=\"Nombre fase\" name=\"name\" component={TextBase} \n                                //onClick={(event) => handleChangename(event)} \n                            />\n                        </Grid>\n            \n                        <Grid item xs={12} md={6} xl={6}>\n                            <Field label=\"Estado\" name=\"status\" component={TextBase} disabled={true} />\n                        </Grid>\n            \n                    </Grid>\n                </Form>\n                )}\n            </Formik>\n        )}\n    </>\n    );\n};\n\nRelativesForm.propTypes = {\n    id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    doPost: PropTypes.func,\n    doGet: PropTypes.func,\n    doPut: PropTypes.func,\n    appInfo: PropTypes.func.isRequired,\n    appSuccess: PropTypes.func.isRequired,\n    genericException: PropTypes.func.isRequired,\n    setEditable: PropTypes.func,\n    refresh: PropTypes.oneOfType([PropTypes.object])\n};\n\nexport default withApi(withNotification(RelativesForm));","import { unstable_generateUtilityClasses as generateUtilityClasses } from '@mui/utils';\nconst boxClasses = generateUtilityClasses('MuiBox', ['root']);\nexport default boxClasses;","'use client';\n\nimport PropTypes from 'prop-types';\nimport { unstable_ClassNameGenerator as ClassNameGenerator } from '@mui/utils';\nimport createBox from '../createBox';\nimport boxClasses from './boxClasses';\nconst Box = createBox({\n  defaultClassName: boxClasses.root,\n  generateClassName: ClassNameGenerator.generate\n});\nprocess.env.NODE_ENV !== \"production\" ? Box.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default Box;"],"names":["title","updateTitle","masterMessages","masters","relatives","breadcrumbs","label","withApi","withNotification","id","useParams","editable","setEditable","useState","viewMode","setViewMode","child","useRef","_jsx","PageGeneral","withOutCard","children","Grid","container","spacing","sx","pb","minHeight","item","xs","md","Card","p","RelativesForm","refresh","validationSchema","Yup","code","required","name","status","urlBase","endPoints","base","initState","_ref","doGet","genericException","appSuccess","doPost","doPut","appInfo","navigate","useNavigate","state","setState","isLoading","setLoading","loadFields","useCallback","async","params","url","initForm","data","init","getStatusLabel","error","console","log","useEffect","redirectEdit","concat","replace","_Fragment","Box","Loader","Formik","enableReinitialize","initialValues","onSubmit","values","getStatusValue","mapValues","valuesForm","method","resp","messages","crud","update","response","new","subProps","_jsxs","Form","FormButtons","formProps","direction","xl","Field","component","TextBase","disabled","generateUtilityClasses","createBox","defaultClassName","boxClasses","root","generateClassName","ClassNameGenerator","generate"],"sourceRoot":""}