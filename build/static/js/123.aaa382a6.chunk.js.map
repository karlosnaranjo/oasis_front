{"version":3,"file":"static/js/123.aaa382a6.chunk.js","mappings":"8QAeA,MAAMA,EAAmBC,EAAAA,GAAW,CAChCC,KAAMD,EAAAA,KAAaE,SAAS,uBAC/BC,KAAMH,EAAAA,KAAaE,SAAS,4BAC5BE,OAAQJ,EAAAA,KAAaE,SAAS,yBAIzBG,EAAUC,EAAAA,EAAUC,QAAQC,UAAUC,KAMtCC,EAAY,CACbT,MAAM,EACVE,MAAM,EACNC,OAAQ,GAqJT,GAAeO,EAAAA,EAAAA,KAAQC,EAAAA,EAAAA,KA7IDC,IAWX,IAXY,GACnBC,EAAE,MACFC,EAAK,iBACLC,EAAgB,WAChBC,EAAU,OACVC,EAAM,MACNC,EAAK,QACLC,EAAO,YACPC,EAAW,SACXC,EAAQ,QACRC,GACCV,EACD,MAAMW,GAAWC,EAAAA,EAAAA,OACVC,EAAOC,IAAYC,EAAAA,EAAAA,UAASlB,IAC5BmB,EAAWC,IAAcF,EAAAA,EAAAA,WAAS,GAGnCG,GAAaC,EAAAA,EAAAA,cAAYC,UAC/B,MAAMC,EAAS,CACXC,IAAK7B,EAAAA,EAAUC,QAAQC,UAAU4B,SACjCC,KAAMvB,EAAK,CAAEA,GAAIA,GAAO,CAAC,GAG7B,aADmBC,EAAMmB,EACd,GACR,CAACnB,EAAOD,EAAIS,EAASF,IAElBiB,GAAON,EAAAA,EAAAA,cAAYC,UACzB,IACI,MAAM,UAAEzB,SAAsBuB,KAGxB,KACd9B,EAAI,KAAEE,EAAI,OAAEC,GACAI,EAEJmB,EAAS,CACd1B,KAAMA,GAAQ,GACdE,KAAMA,GAAQ,GACdC,QAAQmC,EAAAA,EAAAA,IAAenC,IAAW,WAI7B0B,GAAW,EACf,CAAE,MAAOU,GACLC,QAAQC,IAAI,mBAAmBF,GAC/BxB,EAAiBwB,EACrB,IACG,CAACxB,EAAkBe,KAEtBY,EAAAA,EAAAA,YAAU,KACNL,GAAM,GACP,CAACA,IAEJ,MAAMM,EAAgB9B,IAClBU,EAAS,GAADqB,OAnEA,iCAmEW,UAAAA,OAAS/B,GAAM,CAAEgC,SAAS,GAAQ,EAiCzD,OACAC,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,SACKpB,GACGkB,EAAAA,EAAAA,KAACG,EAAAA,EAAG,CAACC,EAAG,GAAGF,UACPF,EAAAA,EAAAA,KAACK,EAAAA,GAAM,OAGXL,EAAAA,EAAAA,KAACM,EAAAA,GAAM,CAACC,oBAAkB,EAACC,cAAe7B,EAAO3B,iBAAkBA,EAAkByD,SA9B9EvB,UACX,MAAMI,EARSoB,KACf,MAAM,KAAExD,EAAI,KAAEE,EAAI,OAAEC,GAAaqD,EACjC,MAAO,CACfxD,OAAME,OAAMC,QAAQsD,EAAAA,EAAAA,IAAetD,GAC1B,EAIYuD,CAAUC,GACjB1B,EAAS,CACXC,IAAKrB,EAAE,GAAA+B,OAAMxC,EAAO,KAAAwC,OAAI/B,GAAOT,EAC/BgC,KAAMA,GAEJwB,EAAS/C,EAAKK,EAAQD,EAE5B,IACI,MAAM4C,QAAaD,EAAO3B,GACtBpB,GACAM,EAAQ2C,EAAAA,EAASC,KAAKC,QACtBrB,EAAakB,EAAKI,SAAS7B,KAAKvB,MAEhCG,EAAW8C,EAAAA,EAASC,KAAKG,KACzBvB,EAAakB,EAAKI,SAAS7B,KAAKvB,IAExC,CAAE,MAAO0B,GACLC,QAAQC,IAAI,oBAAoBF,GAChCxB,EAAiBwB,EACrB,GAU0GS,SAChGmB,IACFC,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAAArB,SAAA,EAEDF,EAAAA,EAAAA,KAACwB,EAAAA,GAAW,CAACC,UAAWJ,KAIxBC,EAAAA,EAAAA,MAACI,EAAAA,GAAI,CAACC,WAAS,EAACC,UAAU,MAAMC,QAAS,EAAE3B,SAAA,EAEvCF,EAAAA,EAAAA,KAAC0B,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAE/B,UAC3BF,EAAAA,EAAAA,KAACkC,EAAAA,GAAK,CAACC,MAAM,SAAS/E,KAAK,OAAOgF,UAAWC,EAAAA,QAKjDrC,EAAAA,EAAAA,KAAC0B,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAE/B,UAC3BF,EAAAA,EAAAA,KAACkC,EAAAA,GAAK,CAACC,MAAM,cAAc/E,KAAK,OAAOgF,UAAWC,EAAAA,QAKtDrC,EAAAA,EAAAA,KAAC0B,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAE/B,UAC5BF,EAAAA,EAAAA,KAACkC,EAAAA,GAAK,CAACC,MAAM,SAAS/E,KAAK,SAASgF,UAAWC,EAAAA,GAAUC,UAAU,eAQxF,I,6KCxJP,MACE9E,SACEC,WAAW,MACT8E,EAAK,YACLC,EAAW,cACXC,EAAa,kBACbC,EAAiB,oBACjBC,KAGFC,EAAAA,QAEEC,EACe,mCADfA,EAGe,mCAHfA,EAIqB,yCAuI3B,GAAejF,EAAAA,EAAAA,KAAQC,EAAAA,EAAAA,KApIAiF,IACnB,MAAOC,EAAUC,IAAenE,EAAAA,EAAAA,UAAS,OAClCoE,EAAYC,IAAiBrE,EAAAA,EAAAA,UAAS,OACtCsE,EAAgBC,IAAqBvE,EAAAA,EAAAA,UAAS,OAC9CwE,EAAWC,IAAgBzE,EAAAA,EAAAA,WAAS,GACrC0E,GAAWC,EAAAA,EAAAA,QAAO,OA6BxB5D,EAAAA,EAAAA,YAAU,KACDyD,GACLL,EAAY,KACZ,GACD,CAACK,IAEJ,MAAMI,EAAc,CAAC,CAAEtB,MAAO,WAAa,CAAEA,MAAOI,IAE9CmB,EAAU,iCACVjF,GAAWC,EAAAA,EAAAA,MAYXiF,EAAmBA,IAAMT,EAAc,MAEvCU,EAAWC,IACb7D,EAAAA,EAAAA,KAAC8D,EAAAA,GAAc,CACXD,IAAKA,EACLE,OAAQA,KAAMlE,OAXAmE,EAWaH,EAAI9F,QAVnCU,EAAS,GAADqB,OAAI4D,EAAO,UAAA5D,OAASkE,GAAW,CAAEjE,SAAS,EAAMhC,GAAIiG,IAD1CA,KAWqB,EACnCC,SAAUA,IARM,eAAGlG,GAAIkF,GAAYiB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAAC,OAC5ChB,EAAcD,EAAY,CAONoB,CAAgBR,GAChCS,eAAgBA,IAAMlB,EAAkBS,EAAI9F,MAI9CwG,EAAU,CAClB,CAAEnH,KAAM,OAAQ+E,MAAO,UACvB,CAAE/E,KAAM,OAAQ+E,MAAO,eAEjB,CACIA,MAAO,SACPqC,QAAQ,EACRpC,UAAYyB,IAAQ7D,EAAAA,EAAAA,KAACyE,EAAAA,GAAU,CAACC,QAAQlF,EAAAA,EAAAA,IAAeqE,EAAIxG,WAE/D,CACID,KAAM,WACNuH,MAAO,IACPC,MAAO,QACPzC,MAAO,WACPqC,QAAQ,EACRpC,UAAYyB,GAAQD,EAAQC,KAGpC,OACIvC,EAAAA,EAAAA,MAACuD,EAAAA,GAAW,CAACpB,YAAaA,EAAYvD,SAAA,CACjC4E,QAAQ7B,KACLjD,EAAAA,EAAAA,KAAC+E,EAAAA,EAAY,CACTC,MAAI,EACJzC,MAAOC,EACPyC,QAASxC,EACTyC,QAASvB,EACTwB,SArFCjG,UACb,MAAME,EAAG,GAAAU,OAAMvC,EAAAA,EAAUC,QAAQC,UAAUC,KAAI,KAAAoC,OAAImD,GACnD,UACMH,EAAMsC,SAAS,CAAEhG,QACvBmE,EAAS8B,QAAQ7G,UACjBmF,IACAb,EAAMwC,WAAWtE,EAAAA,EAASC,KAAKsE,OAC/B,CAAE,MAAO9F,GACTqD,EAAM0C,SAASxE,EAAAA,EAASC,KAAKwE,KAC7B,CAAC,QACDvC,EAAc,KACd,GA2EYwC,kBAAmB7C,IAG1BiC,QAAQ3B,KACLnD,EAAAA,EAAAA,KAAC+E,EAAAA,EAAY,CACbC,MAAI,EACJzC,MAAOG,EACPuC,QAAStC,EACTuC,QAASA,IAAM9B,EAAkB,MACjC+B,SAAUA,IAjFCjG,WACnB,MAAME,EAAG,GAAAU,OAAMvC,EAAAA,EAAUC,QAAQC,UAAUC,KAAI,kBAAAoC,OAAiBqD,GAChE,UACML,EAAM1E,MAAM,CAAEgB,QACpB0D,EAAMwC,WAAWtE,EAAAA,EAASC,KAAK0E,cAC/BpC,EAAS8B,QAAQ7G,SACjB,CAAE,MAAOiB,GACTqD,EAAM0C,SAASxE,EAAAA,EAASC,KAAKwE,KAC7B,CAAC,QACDrC,EAAkB,KAClB,GAuEwBkB,GAChBoB,kBAAmB7C,IAGtBQ,IACGrD,EAAAA,EAAAA,KAACuB,EAAAA,EAAI,CACLxD,GAAIgF,EACJO,aAAcA,EACdsC,YAAarC,KAGjBvD,EAAAA,EAAAA,KAAC6F,EAAAA,GAAK,CACFC,aAAcvC,EACdwC,SAtEQC,KAChBvH,EAAS,GAADqB,OAAI4D,EAAO,QAAQ,CAAE3D,SAAS,GAAQ,EAsEtCkG,cAAe1I,EAAAA,EAAUC,QAAQC,UAAUC,KAC3C6G,QAASA,EACThC,MAAOA,EACPmD,kBAAmB7C,MAEb,I,6DCvJtB,MACA,GADmBqD,E,SAAAA,GAAuB,SAAU,CAAC,SC4BrD,GAvBYC,EAAAA,EAAAA,GAAU,CACpBC,iBAAkBC,EAAWC,KAC7BC,kBAAmBC,EAAAA,EAAmBC,U","sources":["pages/masters/relatives/Form.js","pages/masters/relatives/index.js","../node_modules/@mui/system/esm/Box/boxClasses.js","../node_modules/@mui/system/esm/Box/Box.js"],"sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Grid,  } from '@mui/material';\r\nimport { Form, Field, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { TextBase,  Loader } from 'components';\r\nimport endPoints from 'endPoints/endPoints';\r\nimport messages from 'constantes/messages';\r\nimport { withApi, withNotification } from 'wrappers';\r\nimport { FormButtons } from 'components/controls';\r\nimport { useNavigate } from 'react-router';\r\nimport { Box } from '@mui/system';\r\nimport { getStatusLabel, getStatusValue } from 'utils/formHelpers';\r\n\r\n\r\nconst validationSchema = Yup.object({\r\n   \tcode: Yup.string().required('Codigo es requerido'),\r\n\tname: Yup.string().required('Nombre fase es requerido'),\r\n\tstatus: Yup.string().required('Estado es requerido'),\r\n \r\n});\r\n\r\nconst urlBase = endPoints.masters.relatives.base;\r\n\r\n\r\n\r\nconst baseUrl = '/app/general/masters/relatives';\r\n\r\nconst initState = {\r\n    \tcode: false,\r\n\tname: false,\r\n\tstatus: 1,\r\n\r\n};\r\n\r\nconst selectMap = (data) => {\r\n    return data.map((row) => ({ value: row.id, label: row.name }));\r\n};\r\n\r\nconst RelativesForm = ({\r\n    id,\r\n    doGet,\r\n    genericException,\r\n    appSuccess,\r\n    doPost,\r\n    doPut,\r\n    appInfo,\r\n    setEditable,\r\n    viewMode,\r\n    refresh,\r\n    }) => {\r\n    const navigate = useNavigate();\r\n    const [state, setState] = useState(initState);\r\n    const [isLoading, setLoading] = useState(true);\r\n\r\n    // Call to API for load form values\r\n    const loadFields = useCallback(async () => {\r\n    const params = {\r\n        url: endPoints.masters.relatives.initForm,\r\n        data: id ? { id: id } : {}\r\n    };\r\n    const resp = await doGet(params);\r\n    return resp;\r\n    }, [doGet, id, refresh, setEditable]);\r\n\r\n    const init = useCallback(async () => {\r\n    try {\r\n        const { relatives,  } = await loadFields();\r\n\r\n\r\n        const {\r\ncode, name, status, \r\n        } = relatives;\r\n\r\n        setState({\r\n\t\t\tcode: code || \"\",\r\n\t\t\tname: name || \"\",\r\n\t\t\tstatus: getStatusLabel(status) || \"Activo\",\r\n\r\n        });\r\n\r\n        setLoading(false);\r\n    } catch (error) {\r\n        console.log('ERROR AL INICIAR'+error);\r\n        genericException(error);\r\n    }\r\n    }, [genericException, loadFields]);\r\n\r\n    useEffect(() => {\r\n        init();\r\n    }, [init]);\r\n\r\n    const redirectEdit = (id) => {\r\n        navigate(`${baseUrl}/edit/${id}`, { replace: false });\r\n    };\r\n\r\n    const mapValues = (values) => {\r\n        const { code, name, status,  } = values;\r\n        return {\r\ncode, name, status: getStatusValue(status), \r\n        };\r\n    };\r\n\r\n    const submit = async (valuesForm) => {\r\n        const data = mapValues(valuesForm);\r\n        const params = {\r\n            url: id ? `${urlBase}/${id}` : urlBase,\r\n            data: data\r\n        };\r\n        const method = id ? doPut : doPost;\r\n\r\n        try {\r\n            const resp = await method(params);\r\n            if (id) {\r\n                appInfo(messages.crud.update);\r\n                redirectEdit(resp.response.data.id);\r\n            } else {\r\n                appSuccess(messages.crud.new);\r\n                redirectEdit(resp.response.data.id);\r\n            }\r\n        } catch (error) {\r\n            console.log('ERROR AL GUARDAR '+error);\r\n            genericException(error);\r\n        }\r\n    };\r\n\r\n    return (\r\n    <>\r\n        {isLoading ? (\r\n            <Box p={10}>\r\n                <Loader />\r\n            </Box>\r\n        ) : (\r\n            <Formik enableReinitialize initialValues={state} validationSchema={validationSchema} onSubmit={submit}>\r\n                {(subProps) => (\r\n                <Form>\r\n                    {!id && viewMode ? (\r\n                    <FormButtons formProps={subProps} />\r\n                    ) : (\r\n                    <FormButtons formProps={subProps} />\r\n                    )}\r\n                    <Grid container direction=\"row\" spacing={2}>\r\n    \r\n                        <Grid item xs={6} md={6} xl={6}>\r\n                            <Field label=\"Codigo\" name=\"code\" component={TextBase} \r\n                                //onClick={(event) => handleChangecode(event)} \r\n                            />\r\n                        </Grid>\r\n            \r\n                        <Grid item xs={6} md={6} xl={6}>\r\n                            <Field label=\"Nombre fase\" name=\"name\" component={TextBase} \r\n                                //onClick={(event) => handleChangename(event)} \r\n                            />\r\n                        </Grid>\r\n            \r\n                        <Grid item xs={12} md={6} xl={6}>\r\n                            <Field label=\"Estado\" name=\"status\" component={TextBase} disabled={true} />\r\n                        </Grid>\r\n            \r\n                    </Grid>\r\n                </Form>\r\n                )}\r\n            </Formik>\r\n        )}\r\n    </>\r\n    );\r\n};\r\n\r\nRelativesForm.propTypes = {\r\n    id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n    doPost: PropTypes.func,\r\n    doGet: PropTypes.func,\r\n    doPut: PropTypes.func,\r\n    appInfo: PropTypes.func.isRequired,\r\n    appSuccess: PropTypes.func.isRequired,\r\n    genericException: PropTypes.func.isRequired,\r\n    setEditable: PropTypes.func,\r\n    refresh: PropTypes.oneOfType([PropTypes.object])\r\n};\r\n\r\nexport default withApi(withNotification(RelativesForm));","import React, { useState, useRef, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { useNavigate } from \"react-router\";\r\nimport { PageGeneral, DefaultActions, EstadoChip, Table } from \"components\";\r\nimport endPoints from \"endPoints/endPoints\";\r\nimport messages from \"constantes/messages\";\r\nimport { withApi, withNotification } from \"wrappers\";\r\nimport { ConfirmModal } from \"components/dialogs\";\r\nimport masterMessages from \"constantes/masterMessages\";\r\nimport Form from \"./Form\";\r\nimport { getStatusLabel } from \"utils/formHelpers\";\r\n\r\nconst {\r\n  masters: {\r\n    relatives: {\r\n      title,\r\n      deleteTitle,\r\n      deleteMessage,\r\n      changeStatusTitle,\r\n      changeStatusMessage,\r\n    },\r\n  },\r\n} = masterMessages;\r\n\r\nconst permissions = {\r\n  createPermissions: \"general:masters:relatives:create\",\r\n  updatePermissions: \"general:masters:relatives:update\",\r\n  deletePermissions: \"general:masters:relatives:delete\",\r\n  changeStatusPermissions: \"general:masters:relatives:changeStatus\",\r\n};\r\n\r\nconst RelativesGrid = (props) => {\r\n    const [idToEdit, setIdToEdit] = useState(null);\r\n    const [idToDelete, setIdToDelete] = useState(null);\r\n    const [idChangeStatus, setIdChangeStatus] = useState(null);\r\n    const [openModal, setOpenModal] = useState(false);\r\n    const tableRef = useRef(null);\r\n\r\n    const onDelete = async () => {\r\n        const url = `${endPoints.masters.relatives.base}/${idToDelete}`;\r\n        try {\r\n        await props.doDelete({ url });\r\n        tableRef.current.refresh();\r\n        closeModalDelete();\r\n        props.appWarning(messages.crud.delete);\r\n        } catch (error) {\r\n        props.appError(messages.crud.fail);\r\n        } finally {\r\n        setIdToDelete(null);\r\n        }\r\n    };\r\n\r\n    const onChangeStatus = async () => {\r\n        const url = `${endPoints.masters.relatives.base}/changestatus/${idChangeStatus}`;\r\n        try {\r\n        await props.doPut({ url });\r\n        props.appWarning(messages.crud.changeStatus);\r\n        tableRef.current.refresh();\r\n        } catch (error) {\r\n        props.appError(messages.crud.fail);\r\n        } finally {\r\n        setIdChangeStatus(null);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (!openModal) {\r\n        setIdToEdit(null);\r\n        }\r\n    }, [openModal]);\r\n\r\n    const breadcrumbs = [{ label: \"masters\" }, { label: title }];\r\n\r\n    const baseUrl = \"/app/general/masters/relatives\";\r\n    const navigate = useNavigate();\r\n\r\n    const redirectNew = () => {\r\n        navigate(`${baseUrl}/new`, { replace: false });\r\n    };\r\n\r\n    const redirectEdit = (idModel) => {\r\n        navigate(`${baseUrl}/edit/${idModel}`, { replace: true, id: idModel });\r\n    };\r\n\r\n    const openModalDelete = ({ id: idToDelete } = {}) =>\r\n        setIdToDelete(idToDelete);\r\n    const closeModalDelete = () => setIdToDelete(null);\r\n\r\n    const actions = (row) => (\r\n        <DefaultActions\r\n            row={row}\r\n            onEdit={() => redirectEdit(row.id)}\r\n            onDelete={() => openModalDelete(row)}\r\n            onChangeStatus={() => setIdChangeStatus(row.id)}\r\n        />\r\n    );\r\n\r\n    const columns = [\r\n\t\t{ name: 'code', label: 'Codigo' },\r\n\t\t{ name: 'name', label: 'Nombre fase' },\r\n\r\n        {\r\n            label: \"Estado\",\r\n            filter: false,\r\n            component: (row) => <EstadoChip estado={getStatusLabel(row.status)} />,\r\n        },\r\n        {\r\n            name: \"acciones\",\r\n            width: 130,\r\n            align: \"right\",\r\n            label: \"Acciones\",\r\n            filter: false,\r\n            component: (row) => actions(row),\r\n        },\r\n    ];\r\n    return (\r\n        <PageGeneral breadcrumbs={breadcrumbs}>\r\n            {Boolean(idToDelete) && (\r\n                <ConfirmModal\r\n                    open\r\n                    title={deleteTitle}\r\n                    message={deleteMessage}\r\n                    onClose={closeModalDelete}\r\n                    onAccept={onDelete}\r\n                    createPermissions={permissions.deletePermissions}\r\n                />\r\n            )}\r\n            {Boolean(idChangeStatus) && (\r\n                <ConfirmModal\r\n                open\r\n                title={changeStatusTitle}\r\n                message={changeStatusMessage}\r\n                onClose={() => setIdChangeStatus(null)}\r\n                onAccept={() => onChangeStatus()}\r\n                createPermissions={permissions.changeStatusPermissions}\r\n                />\r\n            )}\r\n            {openModal && (\r\n                <Form\r\n                id={idToEdit}\r\n                setOpenModal={setOpenModal}\r\n                refreshData={tableRef}\r\n                />\r\n            )}\r\n            <Table\r\n                forwardedRef={tableRef}\r\n                onCreate={redirectNew}\r\n                serverSideUrl={endPoints.masters.relatives.base}\r\n                columns={columns}\r\n                title={title}\r\n                createPermissions={permissions.createPermissions}\r\n            />\r\n        </PageGeneral>\r\n    );\r\n};\r\n\r\nRelativesGrid.propTypes = {\r\n    appWarning: PropTypes.func.isRequired,\r\n    genericException: PropTypes.func.isRequired,\r\n    doDelete: PropTypes.func,\r\n    doGet: PropTypes.func\r\n};\r\n\r\nexport default withApi(withNotification(RelativesGrid));","import { unstable_generateUtilityClasses as generateUtilityClasses } from '@mui/utils';\nconst boxClasses = generateUtilityClasses('MuiBox', ['root']);\nexport default boxClasses;","'use client';\n\nimport PropTypes from 'prop-types';\nimport { unstable_ClassNameGenerator as ClassNameGenerator } from '@mui/utils';\nimport createBox from '../createBox';\nimport boxClasses from './boxClasses';\nconst Box = createBox({\n  defaultClassName: boxClasses.root,\n  generateClassName: ClassNameGenerator.generate\n});\nprocess.env.NODE_ENV !== \"production\" ? Box.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default Box;"],"names":["validationSchema","Yup","code","required","name","status","urlBase","endPoints","masters","relatives","base","initState","withApi","withNotification","_ref","id","doGet","genericException","appSuccess","doPost","doPut","appInfo","setEditable","viewMode","refresh","navigate","useNavigate","state","setState","useState","isLoading","setLoading","loadFields","useCallback","async","params","url","initForm","data","init","getStatusLabel","error","console","log","useEffect","redirectEdit","concat","replace","_jsx","_Fragment","children","Box","p","Loader","Formik","enableReinitialize","initialValues","onSubmit","values","getStatusValue","mapValues","valuesForm","method","resp","messages","crud","update","response","new","subProps","_jsxs","Form","FormButtons","formProps","Grid","container","direction","spacing","item","xs","md","xl","Field","label","component","TextBase","disabled","title","deleteTitle","deleteMessage","changeStatusTitle","changeStatusMessage","masterMessages","permissions","props","idToEdit","setIdToEdit","idToDelete","setIdToDelete","idChangeStatus","setIdChangeStatus","openModal","setOpenModal","tableRef","useRef","breadcrumbs","baseUrl","closeModalDelete","actions","row","DefaultActions","onEdit","idModel","onDelete","arguments","length","undefined","openModalDelete","onChangeStatus","columns","filter","EstadoChip","estado","width","align","PageGeneral","Boolean","ConfirmModal","open","message","onClose","onAccept","doDelete","current","appWarning","delete","appError","fail","createPermissions","changeStatus","refreshData","Table","forwardedRef","onCreate","redirectNew","serverSideUrl","generateUtilityClasses","createBox","defaultClassName","boxClasses","root","generateClassName","ClassNameGenerator","generate"],"sourceRoot":""}