{"version":3,"file":"static/js/148.6b2cc0d5.chunk.js","mappings":"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","sources":["pages/transactions/evolutions/Form.js","pages/transactions/evolutions/index.js","../node_modules/@mui/system/esm/Box/boxClasses.js","../node_modules/@mui/system/esm/Box/Box.js"],"sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Grid, } from '@mui/material';\r\nimport { Form, Field, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { TextBase, SelectBase, TextAreaBase, Loader } from 'components';\r\nimport endPoints from 'endPoints/endPoints';\r\nimport messages from 'constantes/messages';\r\nimport { withApi, withNotification } from 'wrappers';\r\nimport { FormButtons } from 'components/controls';\r\nimport { useNavigate } from 'react-router';\r\nimport { Box } from '@mui/system';\r\nimport { getStatusLabel, getStatusValue } from 'utils/formHelpers';\r\nimport DatePickerBase from 'components/pickers/DatePickerBase';\r\n\r\nconst validationSchema = Yup.object({\r\n    code: Yup.string().required('Codigo es requerido'),\r\n    patient_id: Yup.string().required('Paciente es requerido'),\r\n    employee_id: Yup.string().required('Empleado es requerido'),\r\n    date_of_evolution: Yup.string().required('Fecha de registro es requerido'),\r\n    area: Yup.string().required('Area que registra evolucion es requerido'),\r\n    comments: Yup.string().required('Notas es requerido'),\r\n    status: Yup.string().required('Estado es requerido'),\r\n\r\n});\r\n\r\nconst urlBase = endPoints.transactions.evolutions.base;\r\n\r\nlet patientList = [];\r\nlet employeeList = [];\r\n\r\n\r\nconst baseUrl = '/app/general/transactions/evolutions';\r\n\r\nconst initState = {\r\n    code: false,\r\n    patient_id: null,\r\n    employee_id: null,\r\n    date_of_evolution: false,\r\n    area: false,\r\n    comments: false,\r\n    status: 1,\r\n\r\n};\r\n\r\nconst selectMap = (data) => {\r\n    return data.map((row) => ({ value: row.id, label: row.name }));\r\n};\r\n\r\nconst EvolutionsForm = ({\r\n    id,\r\n    doGet,\r\n    genericException,\r\n    appSuccess,\r\n    doPost,\r\n    doPut,\r\n    appInfo,\r\n    setEditable,\r\n    viewMode,\r\n    refresh,\r\n}) => {\r\n    const navigate = useNavigate();\r\n    const [state, setState] = useState(initState);\r\n    const [isLoading, setLoading] = useState(true);\r\n\r\n    // Call to API for load form values\r\n    const loadFields = useCallback(async () => {\r\n        const params = {\r\n            url: endPoints.transactions.evolutions.initForm,\r\n            data: id ? { id: id } : {}\r\n        };\r\n        const resp = await doGet(params);\r\n        return resp;\r\n    }, [doGet, id, refresh, setEditable]);\r\n\r\n    const init = useCallback(async () => {\r\n        try {\r\n            const { evolutions, patient, employee, } = await loadFields();\r\n            patientList = selectMap(patient);\r\n            employeeList = selectMap(employee);\r\n\r\n\r\n            const {\r\n                code, patient_id, employee_id, date_of_evolution, area, comments, status,\r\n            } = evolutions;\r\n\r\n            setState({\r\n                code: code || \"\",\r\n                patient_id: patient_id || null,\r\n                employee_id: employee_id || null,\r\n                date_of_evolution: date_of_evolution || \"\",\r\n                area: area || \"\",\r\n                comments: comments || \"\",\r\n                status: getStatusLabel(status) || \"Activo\",\r\n\r\n            });\r\n\r\n            setLoading(false);\r\n        } catch (error) {\r\n            console.log('ERROR AL INICIAR' + error);\r\n            genericException(error);\r\n        }\r\n    }, [genericException, loadFields]);\r\n\r\n    useEffect(() => {\r\n        init();\r\n    }, [init]);\r\n\r\n    const redirectEdit = (id) => {\r\n        navigate(`${baseUrl}/edit/${id}`, { replace: false });\r\n    };\r\n\r\n    const mapValues = (values) => {\r\n        const { code, patient_id, employee_id, date_of_evolution, area, comments, status, } = values;\r\n        return {\r\n            code, patient_id, employee_id, date_of_evolution, area, comments, status: getStatusValue(status),\r\n        };\r\n    };\r\n\r\n    const submit = async (valuesForm) => {\r\n        const data = mapValues(valuesForm);\r\n        const params = {\r\n            url: id ? `${urlBase}/${id}` : urlBase,\r\n            data: data\r\n        };\r\n        const method = id ? doPut : doPost;\r\n\r\n        try {\r\n            const resp = await method(params);\r\n            if (id) {\r\n                appInfo(messages.crud.update);\r\n                redirectEdit(resp.response.data.id);\r\n            } else {\r\n                appSuccess(messages.crud.new);\r\n                redirectEdit(resp.response.data.id);\r\n            }\r\n        } catch (error) {\r\n            console.log('ERROR AL GUARDAR ' + error);\r\n            genericException(error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {isLoading ? (\r\n                <Box p={10}>\r\n                    <Loader />\r\n                </Box>\r\n            ) : (\r\n                <Formik enableReinitialize initialValues={state} validationSchema={validationSchema} onSubmit={submit}>\r\n                    {(subProps) => (\r\n                        <Form>\r\n                            {!id && viewMode ? (\r\n                                <FormButtons formProps={subProps} />\r\n                            ) : (\r\n                                <FormButtons formProps={subProps} />\r\n                            )}\r\n                            <Grid container direction=\"row\" spacing={2}>\r\n\r\n                                <Grid item xs={6} md={6} xl={6}>\r\n                                    <Field label=\"Codigo\" name=\"code\" component={TextBase}\r\n                                    //onClick={(event) => handleChangecode(event)} \r\n                                    />\r\n                                </Grid>\r\n\r\n                                <Grid item xs={6} md={6} xl={6}>\r\n                                    <Field label=\"Paciente\" name=\"patient_id\" component={SelectBase} items={patientList}\r\n                                    /*onOptionSelected={(selectedOption) => handleOnChangepatient_id(selectedOption, subProps)} */\r\n                                    />\r\n                                </Grid>\r\n\r\n                                <Grid item xs={6} md={6} xl={6}>\r\n                                    <Field label=\"Empleado\" name=\"employee_id\" component={SelectBase} items={employeeList}\r\n                                    /*onOptionSelected={(selectedOption) => handleOnChangeemployee_id(selectedOption, subProps)} */\r\n                                    />\r\n                                </Grid>\r\n\r\n                                <Grid item xs={6} md={6} xl={6}>\r\n                                    <Field label=\"Fecha de registro\" name=\"date_of_evolution\" component={DatePickerBase}\r\n                                    //onClick={(event) => handleChangedate_of_evolution(event)} \r\n                                    />\r\n                                </Grid>\r\n\r\n                                <Grid item xs={6} md={6} xl={6}>\r\n                                    <Field label=\"Area que registra evolucion\" name=\"area\" component={TextBase}\r\n                                    //onClick={(event) => handleChangearea(event)} \r\n                                    />\r\n                                </Grid>\r\n\r\n                                <Grid item xs={12} md={12} xl={12}>\r\n                                    <Field label=\"Notas\" name=\"comments\" component={TextAreaBase}\r\n                                    //onClick={(event) => handleChangecomments(event)} \r\n                                    />\r\n                                </Grid>\r\n\r\n                                <Grid item xs={12} md={6} xl={6}>\r\n                                    <Field label=\"Estado\" name=\"status\" component={TextBase} disabled={true} />\r\n                                </Grid>\r\n\r\n                            </Grid>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nEvolutionsForm.propTypes = {\r\n    id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n    doPost: PropTypes.func,\r\n    doGet: PropTypes.func,\r\n    doPut: PropTypes.func,\r\n    appInfo: PropTypes.func.isRequired,\r\n    appSuccess: PropTypes.func.isRequired,\r\n    genericException: PropTypes.func.isRequired,\r\n    setEditable: PropTypes.func,\r\n    refresh: PropTypes.oneOfType([PropTypes.object])\r\n};\r\n\r\nexport default withApi(withNotification(EvolutionsForm));","import React, { useState, useRef, useEffect, useCallback } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { useNavigate } from \"react-router\";\r\nimport { PageGeneral, DefaultActions, EstadoChip, Table } from \"components\";\r\nimport endPoints from \"endPoints/endPoints\";\r\nimport messages from \"constantes/messages\";\r\nimport { withApi, withNotification } from \"wrappers\";\r\nimport { ConfirmModal } from \"components/dialogs\";\r\nimport masterMessages from \"constantes/masterMessages\";\r\nimport Form from \"./Form\";\r\nimport { getStatusLabel } from \"utils/formHelpers\";\r\nimport Avatar from \"@mui/material/Avatar\";\r\nimport logo from '../../../assets/logo.png';\r\n\r\nconst {\r\n    transactions: {\r\n        evolutions: {\r\n            title,\r\n            deleteTitle,\r\n            deleteMessage,\r\n            changeStatusTitle,\r\n            changeStatusMessage,\r\n        },\r\n    },\r\n} = masterMessages;\r\n\r\nconst permissions = {\r\n    createPermissions: \"general:transactions:evolutions:create\",\r\n    updatePermissions: \"general:transactions:evolutions:update\",\r\n    deletePermissions: \"general:transactions:evolutions:delete\",\r\n    changeStatusPermissions: \"general:transactions:evolutions:changeStatus\",\r\n};\r\n\r\nconst EvolutionsGrid = (props) => {\r\n    const [idToEdit, setIdToEdit] = useState(null);\r\n    const [idToDelete, setIdToDelete] = useState(null);\r\n    const [idChangeStatus, setIdChangeStatus] = useState(null);\r\n    const [openModal, setOpenModal] = useState(false);\r\n    const [dataReport, setDataReport] = useState(null)\r\n\r\n    const tableRef = useRef(null);\r\n\r\n    const onDelete = async () => {\r\n        const url = `${endPoints.transactions.evolutions.base}/${idToDelete}`;\r\n        try {\r\n            await props.doDelete({ url });\r\n            tableRef.current.refresh();\r\n            closeModalDelete();\r\n            props.appWarning(messages.crud.delete);\r\n        } catch (error) {\r\n            props.appError(messages.crud.fail);\r\n        } finally {\r\n            setIdToDelete(null);\r\n        }\r\n    };\r\n\r\n    const onChangeStatus = async () => {\r\n        const url = `${endPoints.transactions.evolutions.base}/changestatus/${idChangeStatus}`;\r\n        try {\r\n            await props.doPut({ url });\r\n            props.appWarning(messages.crud.changeStatus);\r\n            tableRef.current.refresh();\r\n        } catch (error) {\r\n            props.appError(messages.crud.fail);\r\n        } finally {\r\n            setIdChangeStatus(null);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (!openModal) {\r\n            setIdToEdit(null);\r\n        }\r\n    }, [openModal]);\r\n\r\n    const breadcrumbs = [{ label: \"transactions\" }, { label: title }];\r\n\r\n    const baseUrl = \"/app/general/transactions/evolutions\";\r\n    const navigate = useNavigate();\r\n\r\n    const redirectNew = () => {\r\n        navigate(`${baseUrl}/new`, { replace: false });\r\n    };\r\n\r\n    const redirectEdit = (idModel) => {\r\n        navigate(`${baseUrl}/edit/${idModel}`, { replace: true, id: idModel });\r\n    };\r\n\r\n    const openModalDelete = ({ id: idToDelete } = {}) =>\r\n        setIdToDelete(idToDelete);\r\n    const closeModalDelete = () => setIdToDelete(null);\r\n\r\n    const actions = (row) => (\r\n        <DefaultActions\r\n            row={row}\r\n            onEdit={() => redirectEdit(row.id)}\r\n            //onDelete={() => openModalDelete(row)}\r\n            onChangeStatus={() => setIdChangeStatus(row.id)}\r\n            onPrint={redirectPrint}\r\n        />\r\n    );\r\n\r\n    const generateReportHtml = (dataReport) => {\r\n        const currentDate = new Date()\r\n        const formattedDate = `${currentDate.getFullYear()}-${String(currentDate.getMonth() + 1).padStart(\r\n            2,\r\n            '0'\r\n        )}-${String(currentDate.getDate()).padStart(2, '0')}`\r\n        return `\r\n<!DOCTYPE html>\r\n<html lang=\"es\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Reporte de Evolución de Usuario</title>\r\n    <style>\r\n        body {\r\n            font-family: Arial, sans-serif;\r\n            margin: 20px;\r\n        }\r\n        table {\r\n            width: 100%;\r\n            border-collapse: collapse;\r\n            margin-top: 20px;\r\n        }\r\n        th, td {\r\n            border: 1px solid #000;\r\n            padding: 8px;\r\n            text-align: left;\r\n            vertical-align: top;\r\n        }\r\n        th {\r\n            background-color: #f2f2f2;\r\n        }\r\n        h1 {\r\n            text-align: center;\r\n            font-size: 18px;\r\n            margin-bottom: 10px;\r\n        }\r\n        .logo {\r\n            text-align: left;\r\n        }\r\n        .logo img {\r\n            width: 50px;\r\n        }\r\n    </style>\r\n</head>\r\n<body>\r\n    <!-- Encabezado -->\r\n    <div class=\"logo\">\r\n        <img src=\"${logo}\" alt=\"Logo Corporación OASIS\" />\r\n    </div>\r\n    <h1>REPORTE DE EVOLUCIÓN DE USUARIO <br> IPS CORPORACIÓN OASIS</h1>\r\n\r\n    <!-- Tabla Dinámica -->\r\n    <table>\r\n        <thead>\r\n            <tr>\r\n                <th>ID Paciente</th>\r\n                <th>Paciente</th>\r\n                <th>Fecha/Hora</th>\r\n                <th>Nota</th>\r\n                <th>Área</th>\r\n                <th>Empleado</th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n           <tbody>\r\n              ${dataReport\r\n                .map(\r\n                    (row, index) => `\r\n                <tr>\r\n                    <td>${row.patient_code}</td>\r\n                    <td>${row.patient_name}</td>\r\n                    <td>${row.date_of_evolution}</td>\r\n                    <td>${row.comments}</td>\r\n                    <td>${row.area}</td>\r\n                    <td>${row.employee_name}</td>\r\n                </tr>\r\n              `\r\n                )\r\n                .join('')}\r\n            </tbody>\r\n        </tbody>\r\n    </table>\r\n</body>\r\n</html>\r\n\r\n            \r\n          \r\n    `\r\n    }\r\n\r\n    const loadReportData = useCallback(\r\n        async (id) => {\r\n            try {\r\n                const params = {\r\n                    url: `${endPoints.transactions.evolutions.report}/${id}`,\r\n                    data: {}\r\n                }\r\n                const resp = await props.doGet(params)\r\n                return resp\r\n            } catch (error) {\r\n                console.log('ERROR AL INICIAR ' + error)\r\n                props.genericException(error)\r\n            }\r\n        },\r\n        [props.genericException]\r\n    )\r\n\r\n    const redirectPrint = async ({ patient_id } = {}) => {\r\n        const { evolution } = await loadReportData(patient_id)\r\n        setDataReport(evolution)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (dataReport) {\r\n            const reportHtml = generateReportHtml(dataReport)\r\n            const windowFeatures =\r\n                'toolbar=no,location=no,status=no,menubar=no,scrollbars=yes,resizable=yes,width=800,height=600'\r\n            const printWindow = window.open('', '_blank', windowFeatures)\r\n            printWindow.document.write(reportHtml)\r\n            printWindow.document.close()\r\n            printWindow.print()\r\n        }\r\n    }, [dataReport])\r\n\r\n    const columns = [\r\n        //{ name: 'code', label: 'Codigo' },\r\n        {\r\n            name: \"image\",\r\n            label: \"Imagen\",\r\n            component: (row) => (\r\n                <Avatar\r\n                    alt={row.name}\r\n                    src={row.image}\r\n                    style={{ width: \"50px\", height: \"50px\" }}\r\n                />\r\n            ),\r\n        },\r\n        { name: 'patient_name', label: 'Paciente' },\r\n        { name: 'date_of_evolution', label: 'Fecha de registro' },\r\n        { name: 'area', label: 'Area que registra evolucion' },\r\n        //{ name: 'comments', label: 'Notas' },\r\n        { name: 'employee_name', label: 'Empleado' },\r\n\r\n        {\r\n            label: \"Estado\",\r\n            filter: false,\r\n            component: (row) => <EstadoChip estado={getStatusLabel(row.status)} />,\r\n        },\r\n        {\r\n            name: \"acciones\",\r\n            width: 130,\r\n            align: \"right\",\r\n            label: \"Acciones\",\r\n            filter: false,\r\n            component: (row) => actions(row),\r\n        },\r\n    ];\r\n    return (\r\n        <PageGeneral breadcrumbs={breadcrumbs}>\r\n            {Boolean(idToDelete) && (\r\n                <ConfirmModal\r\n                    open\r\n                    title={deleteTitle}\r\n                    message={deleteMessage}\r\n                    onClose={closeModalDelete}\r\n                    onAccept={onDelete}\r\n                    createPermissions={permissions.deletePermissions}\r\n                />\r\n            )}\r\n            {Boolean(idChangeStatus) && (\r\n                <ConfirmModal\r\n                    open\r\n                    title={changeStatusTitle}\r\n                    message={changeStatusMessage}\r\n                    onClose={() => setIdChangeStatus(null)}\r\n                    onAccept={() => onChangeStatus()}\r\n                    createPermissions={permissions.changeStatusPermissions}\r\n                />\r\n            )}\r\n            {openModal && (\r\n                <Form\r\n                    id={idToEdit}\r\n                    setOpenModal={setOpenModal}\r\n                    refreshData={tableRef}\r\n                />\r\n            )}\r\n            <Table\r\n                forwardedRef={tableRef}\r\n                onCreate={redirectNew}\r\n                serverSideUrl={endPoints.transactions.evolutions.base}\r\n                columns={columns}\r\n                title={title}\r\n                createPermissions={permissions.createPermissions}\r\n            />\r\n        </PageGeneral>\r\n    );\r\n};\r\n\r\nEvolutionsGrid.propTypes = {\r\n    appWarning: PropTypes.func.isRequired,\r\n    genericException: PropTypes.func.isRequired,\r\n    doDelete: PropTypes.func,\r\n    doGet: PropTypes.func\r\n};\r\n\r\nexport default withApi(withNotification(EvolutionsGrid));","import { unstable_generateUtilityClasses as generateUtilityClasses } from '@mui/utils';\nconst boxClasses = generateUtilityClasses('MuiBox', ['root']);\nexport default boxClasses;","'use client';\n\nimport PropTypes from 'prop-types';\nimport { unstable_ClassNameGenerator as ClassNameGenerator } from '@mui/utils';\nimport createBox from '../createBox';\nimport boxClasses from './boxClasses';\nconst Box = createBox({\n  defaultClassName: boxClasses.root,\n  generateClassName: ClassNameGenerator.generate\n});\nprocess.env.NODE_ENV !== \"production\" ? Box.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default Box;"],"names":["validationSchema","Yup","code","required","patient_id","employee_id","date_of_evolution","area","comments","status","urlBase","endPoints","transactions","evolutions","base","patientList","employeeList","initState","selectMap","data","map","row","value","id","label","name","withApi","withNotification","_ref","doGet","genericException","appSuccess","doPost","doPut","appInfo","setEditable","viewMode","refresh","navigate","useNavigate","state","setState","useState","isLoading","setLoading","loadFields","useCallback","async","params","url","initForm","init","patient","employee","getStatusLabel","error","console","log","useEffect","redirectEdit","concat","replace","_jsx","_Fragment","children","Box","p","Loader","Formik","enableReinitialize","initialValues","onSubmit","values","getStatusValue","mapValues","valuesForm","method","resp","messages","crud","update","response","new","subProps","_jsxs","Form","FormButtons","formProps","Grid","container","direction","spacing","item","xs","md","xl","Field","component","TextBase","SelectBase","items","DatePickerBase","TextAreaBase","disabled","title","deleteTitle","deleteMessage","changeStatusTitle","changeStatusMessage","masterMessages","permissions","props","idToEdit","setIdToEdit","idToDelete","setIdToDelete","idChangeStatus","setIdChangeStatus","openModal","setOpenModal","dataReport","setDataReport","tableRef","useRef","breadcrumbs","baseUrl","closeModalDelete","actions","DefaultActions","onEdit","idModel","onChangeStatus","onPrint","redirectPrint","loadReportData","report","arguments","length","undefined","evolution","reportHtml","currentDate","Date","getFullYear","String","getMonth","padStart","getDate","logo","index","patient_code","patient_name","employee_name","join","generateReportHtml","windowFeatures","printWindow","window","open","document","write","close","print","columns","Avatar","alt","src","image","style","width","height","filter","EstadoChip","estado","align","PageGeneral","Boolean","ConfirmModal","message","onClose","onAccept","doDelete","current","appWarning","delete","appError","fail","createPermissions","changeStatus","refreshData","Table","forwardedRef","onCreate","redirectNew","serverSideUrl","generateUtilityClasses","createBox","defaultClassName","boxClasses","root","generateClassName","ClassNameGenerator","generate"],"sourceRoot":""}