{"version":3,"file":"static/js/908.24132da5.chunk.js","mappings":"yRAeA,MAAMA,EAAmBC,EAAAA,GAAW,CAChCC,KAAMD,EAAAA,KAAaE,SAAS,uBAC5BC,WAAYH,EAAAA,KAAaE,SAAS,yBAClCE,cAAeJ,EAAAA,KAAaE,SAAS,kCACrCG,SAAUL,EAAAA,KAAaE,SAAS,qBAChCI,UAAWN,EAAAA,KAAaE,SAAS,yBACjCK,WAAYP,EAAAA,KAAaE,SAAS,6BAClCM,SAAUR,EAAAA,KAAaE,SAAS,4BAChCO,cAAeT,EAAAA,KAAaE,SAAS,2CACrCQ,YAAaV,EAAAA,KAAaE,SAAS,sCACnCS,SAAUX,EAAAA,KAAaE,SAAS,uCAChCU,YAAaZ,EAAAA,KAAaE,SAAS,2BACnCW,KAAMb,EAAAA,KAAaE,SAAS,8BAC5BY,OAAQd,EAAAA,KAAaE,SAAS,yBAI5Ba,EAAUC,EAAAA,EAAUC,aAAaC,YAAYC,KAC7CC,EAAiB,GAAAC,OAAMN,EAAO,qBAEpC,IAAIO,EAAc,GACdC,EAAY,GACZC,EAAa,GACbC,EAAW,CAAC,CAAE,MAAS,WAAY,MAAS,YAAc,CAAE,MAAS,WAAY,MAAS,YAAc,CAAE,MAAS,cAAe,MAAS,gBAG/I,MAEMC,EAAY,CACdzB,MAAM,EACNE,WAAY,KACZC,eAAe,EACfC,SAAU,KACVC,UAAW,KACXC,YAAY,EACZC,UAAU,EACVC,eAAe,EACfC,aAAa,EACbC,UAAU,EACVC,aAAa,EACbC,KAAM,GACNC,OAAQ,GAINa,EAAaC,GACRA,EAAKC,KAAKC,IAAG,CAAQC,MAAOD,EAAIE,GAAIC,MAAOH,EAAII,SA+O1D,GAAeC,EAAAA,EAAAA,KAAQC,EAAAA,EAAAA,KA5OCC,IAWjB,IAXkB,GACrBL,EAAE,MACFM,EAAK,iBACLC,EAAgB,WAChBC,EAAU,OACVC,EAAM,MACNC,EAAK,QACLC,EAAO,YACPC,EAAW,SACXC,EAAQ,QACRC,GACHT,EACG,MAAMU,GAAWC,EAAAA,EAAAA,OACVC,EAAOC,IAAYC,EAAAA,EAAAA,UAASzB,IAC5B0B,EAAWC,IAAcF,EAAAA,EAAAA,WAAS,GAGnCG,GAAaC,EAAAA,EAAAA,cAAYC,UAC3B,MAAMC,EAAS,CACXC,IAAK1C,EAAAA,EAAUC,aAAaC,YAAYyC,SACxC/B,KAAMI,EAAK,CAAEA,GAAIA,GAAO,CAAC,GAG7B,aADmBM,EAAMmB,EACd,GACZ,CAACnB,EAAON,EAAIc,EAASF,IAElBgB,GAAOL,EAAAA,EAAAA,cAAYC,UACrB,IACI,MAAM,YAAEtC,EAAW,QAAE2C,EAAO,MAAEC,EAAK,OAAEC,SAAkBT,IACvDhC,EAAcK,EAAUkC,GACxBtC,EAAYI,EAAUmC,GACtBtC,EAAaG,EAAUoC,GAGvB,MAAM,KACF9D,EAAI,WAAEE,EAAU,cAAEC,EAAa,SAAEC,EAAQ,UAAEC,EAAS,WAAEC,EAAU,SAAEC,EAAQ,cAAEC,EAAa,YAAEC,EAAW,SAAEC,EAAQ,YAAEC,EAAW,KAAEC,EAAI,OAAEC,GACrII,EAEJgC,EAAS,CACLjD,KAAMA,GAAQ,gBACdE,WAAYA,GAAc,KAC1BC,cAAeA,GAAiB,GAChCC,SAAUA,GAAY,KACtBC,UAAWA,GAAa,KACxBC,WAAYA,GAAc,GAC1BC,SAAUA,GAAY,GACtBC,cAAeA,GAAiB,GAChCC,YAAaA,GAAe,GAC5BC,SAAUA,GAAY,GACtBC,YAAaA,GAAe,GAC5BC,KAAMA,GAAQ,GACdC,QAAQkD,EAAAA,EAAAA,IAAelD,IAAW,WAItCuC,GAAW,EACf,CAAE,MAAOY,GACLC,QAAQC,IAAI,mBAAqBF,GACjC1B,EAAiB0B,EACrB,IACD,CAAC1B,EAAkBe,KAEtBc,EAAAA,EAAAA,YAAU,KACNR,GAAM,GACP,CAACA,IAEJ,MAAMS,EAAgBrC,IAClBe,EAAS,GAAD1B,OA1FA,wCA0FW,UAAAA,OAASW,GAAM,CAAEsC,SAAS,GAAQ,EAqDzD,OACIC,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,SACKrB,GACGmB,EAAAA,EAAAA,KAACG,EAAAA,EAAG,CAACC,EAAG,GAAGF,UACPF,EAAAA,EAAAA,KAACK,EAAAA,GAAM,OAGXL,EAAAA,EAAAA,KAACM,EAAAA,GAAM,CAACC,oBAAkB,EAACC,cAAe9B,EAAOlD,iBAAkBA,EAAkBiF,SAlDlFxB,UACX,MAAM5B,EARSqD,KACf,MAAM,KAAEhF,EAAI,WAAEE,EAAU,cAAEC,EAAa,SAAEC,EAAQ,UAAEC,EAAS,WAAEC,EAAU,SAAEC,EAAQ,cAAEC,EAAa,YAAEC,EAAW,SAAEC,EAAQ,YAAEC,EAAW,KAAEC,EAAI,OAAEC,GAAYmE,EACzJ,MAAO,CACHhF,OAAME,aAAYC,gBAAeC,WAAUC,YAAWC,aAAYC,WAAUC,gBAAeC,cAAaC,WAAUC,cAAaC,OAAMC,QAAQoE,EAAAA,EAAAA,IAAepE,GAC/J,EAIYqE,CAAUC,GACjB3B,EAAS,CACXC,IAAK1B,EAAE,GAAAX,OAAMN,EAAO,KAAAM,OAAIW,GAAOjB,EAC/Ba,KAAMA,GAEJyD,EAASrD,EAAKU,EAAQD,EAE5B,IACI,MAAM6C,QAAaD,EAAO5B,GACtBzB,GACAW,EAAQ4C,EAAAA,EAASC,KAAKC,QACtBpB,EAAaiB,EAAKI,SAAS9D,KAAKI,MAEhCQ,EAAW+C,EAAAA,EAASC,KAAKG,KACzBtB,EAAaiB,EAAKI,SAAS9D,KAAKI,IAExC,CAAE,MAAOiC,GACLC,QAAQC,IAAI,oBAAsBF,GAClC1B,EAAiB0B,EACrB,GA8B8GQ,SAChGmB,IACEC,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAAArB,SAAA,EAEGF,EAAAA,EAAAA,KAACwB,EAAAA,GAAW,CAACC,UAAWJ,KAI5BC,EAAAA,EAAAA,MAACI,EAAAA,GAAI,CAACC,WAAS,EAACC,UAAU,MAAMC,QAAS,EAAE3B,SAAA,EAEvCF,EAAAA,EAAAA,KAAC0B,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAE/B,UAC3BF,EAAAA,EAAAA,KAACkC,EAAAA,GAAK,CAACxE,MAAM,SAASC,KAAK,OAAOwE,UAAWC,EAAAA,GACzCC,UAAU,EACVC,WAAY,CACRC,UAAU,QAMtBvC,EAAAA,EAAAA,KAAC0B,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAE/B,UAC3BF,EAAAA,EAAAA,KAACkC,EAAAA,GAAK,CAACxE,MAAM,WAAWC,KAAK,aAAawE,UAAWK,EAAAA,GAAYC,MAAO1F,OAK5EiD,EAAAA,EAAAA,KAAC0B,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAE/B,UAC3BF,EAAAA,EAAAA,KAACkC,EAAAA,GAAK,CAACxE,MAAM,oBAAoBC,KAAK,gBAAgBwE,UAAWO,EAAAA,OAKrE1C,EAAAA,EAAAA,KAAC0B,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAE/B,UAC3BF,EAAAA,EAAAA,KAACkC,EAAAA,GAAK,CAACxE,MAAM,OAAOC,KAAK,WAAWwE,UAAWK,EAAAA,GAAYC,MAAOzF,EAC9D2F,iBAAmBC,GA7D7B3D,OAAO2D,EAAgBC,KAC7C,IACI,GAAID,EAAgB,CAChB,MAAM1D,EAAS,CACXC,IAAKtC,EACLQ,KAAM,CAAEvB,SAAU8G,IAEhB7B,QAAahD,EAAMmB,GACzBjC,EAAaG,EAAU2D,EAAK+B,SAC5BD,EAAYE,cAAc,YAAa,KAC3C,MACI9F,EAAa,GACb4F,EAAYE,cAAc,YAAa,KAE/C,CAAE,MAAOrD,GACLC,QAAQC,IAAI,6BAA+BF,GAC3C1B,EAAiB0B,EACrB,GA4CsEsD,CAAkBJ,EAAgBvB,QAIhFrB,EAAAA,EAAAA,KAAC0B,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAE/B,UAC3BF,EAAAA,EAAAA,KAACkC,EAAAA,GAAK,CAACxE,MAAM,WAAWC,KAAK,YAAYwE,UAAWK,EAAAA,GAAYC,MAAOxF,OAK3E+C,EAAAA,EAAAA,KAAC0B,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAE/B,UAC3BF,EAAAA,EAAAA,KAACkC,EAAAA,GAAK,CAACxE,MAAM,eAAeC,KAAK,aAAawE,UAAWO,EAAAA,OAK7D1C,EAAAA,EAAAA,KAAC0B,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAE/B,UAC3BF,EAAAA,EAAAA,KAACkC,EAAAA,GAAK,CAACxE,MAAM,cAAcC,KAAK,WAAWwE,UAAWO,EAAAA,OAK1D1C,EAAAA,EAAAA,KAAC0B,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAAG/B,UAC5BF,EAAAA,EAAAA,KAACkC,EAAAA,GAAK,CAACxE,MAAM,mCAA6BC,KAAK,gBAAgBwE,UAAWc,EAAAA,GAAcC,KAAM,OAKlGlD,EAAAA,EAAAA,KAAC0B,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAAG/B,UAC5BF,EAAAA,EAAAA,KAACkC,EAAAA,GAAK,CAACxE,MAAM,wBAAwBC,KAAK,cAAcwE,UAAWc,EAAAA,GAAcC,KAAM,OAK3FlD,EAAAA,EAAAA,KAAC0B,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAAG/B,UAC5BF,EAAAA,EAAAA,KAACkC,EAAAA,GAAK,CAACxE,MAAM,yBAAyBC,KAAK,WAAWwE,UAAWc,EAAAA,GAAcC,KAAM,OAKzFlD,EAAAA,EAAAA,KAAC0B,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAAG/B,UAC5BF,EAAAA,EAAAA,KAACkC,EAAAA,GAAK,CAACxE,MAAM,aAAaC,KAAK,cAAcwE,UAAWc,EAAAA,GAAcC,KAAM,OAKhFlD,EAAAA,EAAAA,KAAC0B,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAE/B,UAC5BF,EAAAA,EAAAA,KAACkC,EAAAA,GAAK,CAACxE,MAAM,aAAaC,KAAK,OAAOwE,UAAWK,EAAAA,GAAYC,MAAOvF,OAGxE8C,EAAAA,EAAAA,KAAC0B,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAE/B,UAC5BF,EAAAA,EAAAA,KAACkC,EAAAA,GAAK,CAACxE,MAAM,SAASC,KAAK,SAASwE,UAAWC,EAAAA,GAAUC,UAAU,eAQ5F,I,2GCvRX,MAAM,MAAEc,EAAK,YAAEC,GAAgBC,EAAAA,QAAe3G,aAAaC,YAErD2G,EAAc,CAAC,CAAE5F,MAAO,YAAc,CAAEA,MAAOyF,IAqBrD,QAnBA,WACE,MAAOI,EAAUlF,IAAeO,EAAAA,EAAAA,WAAS,IAClCN,EAAUkF,IAAe5E,EAAAA,EAAAA,WAAS,GACnC6E,GAAQC,EAAAA,EAAAA,UAEd,OACE1D,EAAAA,EAAAA,KAAC2D,EAAAA,GAAW,CAACR,MAAOC,EAAaE,YAAaA,EAAYpD,UACxDF,EAAAA,EAAAA,KAAC4D,EAAAA,EAAe,CACdrF,QAASkF,EACTpF,YAAaA,EACbmF,YAAaA,EACblF,SAAUA,KAIlB,C,6DCvBA,MACA,GADmBuF,E,SAAAA,GAAuB,SAAU,CAAC,SC4BrD,GAvBYC,EAAAA,EAAAA,GAAU,CACpBC,iBAAkBC,EAAWC,KAC7BC,kBAAmBC,EAAAA,EAAmBC,U","sources":["pages/transactions/evaluations/Form.js","pages/transactions/evaluations/New.js","../node_modules/@mui/system/esm/Box/boxClasses.js","../node_modules/@mui/system/esm/Box/Box.js"],"sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Grid, } from '@mui/material';\r\nimport { Form, Field, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { TextBase, SelectBase, TextAreaBase, Loader } from 'components';\r\nimport endPoints from 'endPoints/endPoints';\r\nimport messages from 'constantes/messages';\r\nimport { withApi, withNotification } from 'wrappers';\r\nimport { FormButtons } from 'components/controls';\r\nimport { useNavigate } from 'react-router';\r\nimport { Box } from '@mui/system';\r\nimport { getStatusLabel, getStatusValue } from 'utils/formHelpers';\r\nimport DatePickerBase from 'components/pickers/DatePickerBase';\r\n\r\nconst validationSchema = Yup.object({\r\n    code: Yup.string().required('Codigo es requerido'),\r\n    patient_id: Yup.string().required('Paciente es requerido'),\r\n    creation_date: Yup.string().required('Fecha de Creacion es requerido'),\r\n    phase_id: Yup.string().required('Fase es requerido'),\r\n    target_id: Yup.string().required('Objetivo es requerido'),\r\n    start_date: Yup.string().required('Fecha inicio es requerido'),\r\n    end_date: Yup.string().required('Fecha final es requerido'),\r\n    clinical_team: Yup.string().required('Apreciacion Equipo Clinico es requerido'),\r\n    achievement: Yup.string().required('Logros y Dificultades es requerido'),\r\n    strategy: Yup.string().required('Estrategias Utilizadas es requerido'),\r\n    requirement: Yup.string().required('Exigencias es requerido'),\r\n    test: Yup.string().required('EvaluaciÃ³n es requerido'),\r\n    status: Yup.string().required('Estado es requerido'),\r\n\r\n});\r\n\r\nconst urlBase = endPoints.transactions.evaluations.base;\r\nconst targetsByPhaseUrl = `${urlBase}/targets-by-phase`;\r\n\r\nlet patientList = [];\r\nlet phaseList = [];\r\nlet targetList = [];\r\nlet testList = [{ \"label\": \"Positivo\", \"value\": \"Positivo\" }, { \"label\": \"Negativo\", \"value\": \"Negativo\" }, { \"label\": \"Observacion\", \"value\": \"Observacion\" }];\r\n\r\n\r\nconst baseUrl = '/app/general/transactions/evaluations';\r\n\r\nconst initState = {\r\n    code: false,\r\n    patient_id: null,\r\n    creation_date: false,\r\n    phase_id: null,\r\n    target_id: null,\r\n    start_date: false,\r\n    end_date: false,\r\n    clinical_team: false,\r\n    achievement: false,\r\n    strategy: false,\r\n    requirement: false,\r\n    test: \"\",\r\n    status: 1,\r\n\r\n};\r\n\r\nconst selectMap = (data) => {\r\n    return data.map((row) => ({ value: row.id, label: row.name }));\r\n};\r\n\r\nconst EvaluationsForm = ({\r\n    id,\r\n    doGet,\r\n    genericException,\r\n    appSuccess,\r\n    doPost,\r\n    doPut,\r\n    appInfo,\r\n    setEditable,\r\n    viewMode,\r\n    refresh,\r\n}) => {\r\n    const navigate = useNavigate();\r\n    const [state, setState] = useState(initState);\r\n    const [isLoading, setLoading] = useState(true);\r\n\r\n    // Call to API for load form values\r\n    const loadFields = useCallback(async () => {\r\n        const params = {\r\n            url: endPoints.transactions.evaluations.initForm,\r\n            data: id ? { id: id } : {}\r\n        };\r\n        const resp = await doGet(params);\r\n        return resp;\r\n    }, [doGet, id, refresh, setEditable]);\r\n\r\n    const init = useCallback(async () => {\r\n        try {\r\n            const { evaluations, patient, phase, target, } = await loadFields();\r\n            patientList = selectMap(patient);\r\n            phaseList = selectMap(phase);\r\n            targetList = selectMap(target);\r\n\r\n\r\n            const {\r\n                code, patient_id, creation_date, phase_id, target_id, start_date, end_date, clinical_team, achievement, strategy, requirement, test, status,\r\n            } = evaluations;\r\n\r\n            setState({\r\n                code: code || \"AutomÃ¡tico\",\r\n                patient_id: patient_id || null,\r\n                creation_date: creation_date || \"\",\r\n                phase_id: phase_id || null,\r\n                target_id: target_id || null,\r\n                start_date: start_date || \"\",\r\n                end_date: end_date || \"\",\r\n                clinical_team: clinical_team || \"\",\r\n                achievement: achievement || \"\",\r\n                strategy: strategy || \"\",\r\n                requirement: requirement || \"\",\r\n                test: test || \"\",\r\n                status: getStatusLabel(status) || \"Activo\",\r\n\r\n            });\r\n\r\n            setLoading(false);\r\n        } catch (error) {\r\n            console.log('ERROR AL INICIAR' + error);\r\n            genericException(error);\r\n        }\r\n    }, [genericException, loadFields]);\r\n\r\n    useEffect(() => {\r\n        init();\r\n    }, [init]);\r\n\r\n    const redirectEdit = (id) => {\r\n        navigate(`${baseUrl}/edit/${id}`, { replace: false });\r\n    };\r\n\r\n    const mapValues = (values) => {\r\n        const { code, patient_id, creation_date, phase_id, target_id, start_date, end_date, clinical_team, achievement, strategy, requirement, test, status, } = values;\r\n        return {\r\n            code, patient_id, creation_date, phase_id, target_id, start_date, end_date, clinical_team, achievement, strategy, requirement, test, status: getStatusValue(status),\r\n        };\r\n    };\r\n\r\n    const submit = async (valuesForm) => {\r\n        const data = mapValues(valuesForm);\r\n        const params = {\r\n            url: id ? `${urlBase}/${id}` : urlBase,\r\n            data: data\r\n        };\r\n        const method = id ? doPut : doPost;\r\n\r\n        try {\r\n            const resp = await method(params);\r\n            if (id) {\r\n                appInfo(messages.crud.update);\r\n                redirectEdit(resp.response.data.id);\r\n            } else {\r\n                appSuccess(messages.crud.new);\r\n                redirectEdit(resp.response.data.id);\r\n            }\r\n        } catch (error) {\r\n            console.log('ERROR AL GUARDAR ' + error);\r\n            genericException(error);\r\n        }\r\n    };\r\n\r\n    const handlePhaseChange = async (selectedOption, formikProps) => {\r\n        try {\r\n            if (selectedOption) {\r\n                const params = {\r\n                    url: targetsByPhaseUrl,\r\n                    data: { phase_id: selectedOption }\r\n                };\r\n                const resp = await doGet(params);\r\n                targetList = selectMap(resp.targets);\r\n                formikProps.setFieldValue('target_id', null);\r\n            } else {\r\n                targetList = [];\r\n                formikProps.setFieldValue('target_id', null);\r\n            }\r\n        } catch (error) {\r\n            console.log('ERROR AL CARGAR OBJETIVOS ' + error);\r\n            genericException(error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {isLoading ? (\r\n                <Box p={10}>\r\n                    <Loader />\r\n                </Box>\r\n            ) : (\r\n                <Formik enableReinitialize initialValues={state} validationSchema={validationSchema} onSubmit={submit}>\r\n                    {(subProps) => (\r\n                        <Form>\r\n                            {!id && viewMode ? (\r\n                                <FormButtons formProps={subProps} />\r\n                            ) : (\r\n                                <FormButtons formProps={subProps} />\r\n                            )}\r\n                            <Grid container direction=\"row\" spacing={2}>\r\n\r\n                                <Grid item xs={6} md={6} xl={6}>\r\n                                    <Field label=\"Codigo\" name=\"code\" component={TextBase}\r\n                                        disabled={true}\r\n                                        InputProps={{\r\n                                            readOnly: true\r\n                                        }}\r\n                                    //onClick={(event) => handleChangecode(event)} \r\n                                    />\r\n                                </Grid>\r\n\r\n                                <Grid item xs={6} md={6} xl={6}>\r\n                                    <Field label=\"Paciente\" name=\"patient_id\" component={SelectBase} items={patientList}\r\n                                    /*onOptionSelected={(selectedOption) => handleOnChangepatient_id(selectedOption, subProps)} */\r\n                                    />\r\n                                </Grid>\r\n\r\n                                <Grid item xs={6} md={6} xl={6}>\r\n                                    <Field label=\"Fecha de Creacion\" name=\"creation_date\" component={DatePickerBase}\r\n                                    //onClick={(event) => handleChangecreation_date(event)} \r\n                                    />\r\n                                </Grid>\r\n\r\n                                <Grid item xs={6} md={6} xl={6}>\r\n                                    <Field label=\"Fase\" name=\"phase_id\" component={SelectBase} items={phaseList}\r\n                                        onOptionSelected={(selectedOption) => handlePhaseChange(selectedOption, subProps)}\r\n                                    />\r\n                                </Grid>\r\n\r\n                                <Grid item xs={6} md={6} xl={6}>\r\n                                    <Field label=\"Objetivo\" name=\"target_id\" component={SelectBase} items={targetList}\r\n                                    /*onOptionSelected={(selectedOption) => handleOnChangetarget_id(selectedOption, subProps)} */\r\n                                    />\r\n                                </Grid>\r\n\r\n                                <Grid item xs={6} md={6} xl={6}>\r\n                                    <Field label=\"Fecha inicio\" name=\"start_date\" component={DatePickerBase}\r\n                                    //onClick={(event) => handleChangestart_date(event)} \r\n                                    />\r\n                                </Grid>\r\n\r\n                                <Grid item xs={6} md={6} xl={6}>\r\n                                    <Field label=\"Fecha final\" name=\"end_date\" component={DatePickerBase}\r\n                                    //onClick={(event) => handleChangeend_date(event)} \r\n                                    />\r\n                                </Grid>\r\n\r\n                                <Grid item xs={6} md={6} xl={12}>\r\n                                    <Field label=\"ApreciaciÃ³n Equipo ClinÃ­co\" name=\"clinical_team\" component={TextAreaBase} rows={8}\r\n                                    //onClick={(event) => handleChangeclinical_team(event)} \r\n                                    />\r\n                                </Grid>\r\n\r\n                                <Grid item xs={6} md={6} xl={12}>\r\n                                    <Field label=\"Logros y Dificultades\" name=\"achievement\" component={TextAreaBase} rows={8}\r\n                                    //onClick={(event) => handleChangeachievement(event)} \r\n                                    />\r\n                                </Grid>\r\n\r\n                                <Grid item xs={6} md={6} xl={12}>\r\n                                    <Field label=\"Estrategias Utilizadas\" name=\"strategy\" component={TextAreaBase} rows={8}\r\n                                    //onClick={(event) => handleChangestrategy(event)} \r\n                                    />\r\n                                </Grid>\r\n\r\n                                <Grid item xs={6} md={6} xl={12}>\r\n                                    <Field label=\"Exigencias\" name=\"requirement\" component={TextAreaBase} rows={8}\r\n                                    //onClick={(event) => handleChangerequirement(event)} \r\n                                    />\r\n                                </Grid>\r\n\r\n                                <Grid item xs={12} md={6} xl={6}>\r\n                                    <Field label=\"Evaluacion\" name=\"test\" component={SelectBase} items={testList} />\r\n                                </Grid>\r\n\r\n                                <Grid item xs={12} md={6} xl={6}>\r\n                                    <Field label=\"Estado\" name=\"status\" component={TextBase} disabled={true} />\r\n                                </Grid>\r\n\r\n                            </Grid>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nEvaluationsForm.propTypes = {\r\n    id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n    doPost: PropTypes.func,\r\n    doGet: PropTypes.func,\r\n    doPut: PropTypes.func,\r\n    appInfo: PropTypes.func.isRequired,\r\n    appSuccess: PropTypes.func.isRequired,\r\n    genericException: PropTypes.func.isRequired,\r\n    setEditable: PropTypes.func,\r\n    refresh: PropTypes.oneOfType([PropTypes.object])\r\n};\r\n\r\nexport default withApi(withNotification(EvaluationsForm));","import React, { useState, useRef } from 'react';\nimport { PageGeneral } from 'components';\nimport masterMessages from 'constantes/masterMessages';\nimport EvaluationsForm from './Form';\n\nconst { title, createTitle } = masterMessages.transactions.evaluations;\n\nconst breadcrumbs = [{ label: 'Maestros' }, { label: title }];\n\nfunction New() {\n  const [editable, setEditable] = useState(false);\n  const [viewMode, setViewMode] = useState(false);\n  const child = useRef();\n\n  return (\n    <PageGeneral title={createTitle} breadcrumbs={breadcrumbs}>\n      <EvaluationsForm\n        refresh={child}\n        setEditable={setEditable}\n        setViewMode={setViewMode}\n        viewMode={viewMode} \n      />\n    </PageGeneral>\n  );\n}\n\nNew.propTypes = {};\n\nexport default New;","import { unstable_generateUtilityClasses as generateUtilityClasses } from '@mui/utils';\nconst boxClasses = generateUtilityClasses('MuiBox', ['root']);\nexport default boxClasses;","'use client';\n\nimport PropTypes from 'prop-types';\nimport { unstable_ClassNameGenerator as ClassNameGenerator } from '@mui/utils';\nimport createBox from '../createBox';\nimport boxClasses from './boxClasses';\nconst Box = createBox({\n  defaultClassName: boxClasses.root,\n  generateClassName: ClassNameGenerator.generate\n});\nprocess.env.NODE_ENV !== \"production\" ? Box.propTypes /* remove-proptypes */ = {\n  // âââââââââââââââââââââââââââââââ Warning âââââââââââââââââââââââââââââââ\n  // â These PropTypes are generated from the TypeScript type definitions. â\n  // â    To update them, edit the d.ts file and run `pnpm proptypes`.     â\n  // âââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââ\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default Box;"],"names":["validationSchema","Yup","code","required","patient_id","creation_date","phase_id","target_id","start_date","end_date","clinical_team","achievement","strategy","requirement","test","status","urlBase","endPoints","transactions","evaluations","base","targetsByPhaseUrl","concat","patientList","phaseList","targetList","testList","initState","selectMap","data","map","row","value","id","label","name","withApi","withNotification","_ref","doGet","genericException","appSuccess","doPost","doPut","appInfo","setEditable","viewMode","refresh","navigate","useNavigate","state","setState","useState","isLoading","setLoading","loadFields","useCallback","async","params","url","initForm","init","patient","phase","target","getStatusLabel","error","console","log","useEffect","redirectEdit","replace","_jsx","_Fragment","children","Box","p","Loader","Formik","enableReinitialize","initialValues","onSubmit","values","getStatusValue","mapValues","valuesForm","method","resp","messages","crud","update","response","new","subProps","_jsxs","Form","FormButtons","formProps","Grid","container","direction","spacing","item","xs","md","xl","Field","component","TextBase","disabled","InputProps","readOnly","SelectBase","items","DatePickerBase","onOptionSelected","selectedOption","formikProps","targets","setFieldValue","handlePhaseChange","TextAreaBase","rows","title","createTitle","masterMessages","breadcrumbs","editable","setViewMode","child","useRef","PageGeneral","EvaluationsForm","generateUtilityClasses","createBox","defaultClassName","boxClasses","root","generateClassName","ClassNameGenerator","generate"],"sourceRoot":""}