{"version":3,"file":"static/js/766.c31fe42f.chunk.js","mappings":"4VASA,MAAMA,EAAY,CAChBC,KAAM,GACNC,WAAW,GA0Gb,GAAeC,EAAAA,EAAAA,KAAQC,EAAAA,EAAAA,KAvGAC,IAQhB,IARiB,GACtBC,EAAE,OACFC,EAAM,MACNC,EAAK,iBACLC,EAAgB,WAChBC,EAAU,aACVC,EAAY,aACZC,GACDP,EACC,MAAOQ,EAAOC,IAAYC,EAAAA,EAAAA,UAASf,IAC5BgB,EAAcC,IAAmBF,EAAAA,EAAAA,UAAS,KAEjDG,EAAAA,EAAAA,YAAU,KACKC,WACX,MAAMC,EAAS,CACbC,IAAI,GAADC,OAAKC,EAAAA,EAAUC,UAAUC,gBAAgBC,cAAa,KAAAJ,OAAIhB,IAE/D,IACE,MAAMqB,QAAiBnB,EAAMY,GAC7BN,EAAS,CACPb,KAAM0B,EACNzB,WAAW,GAEf,CAAE,MAAO0B,GACPnB,EAAiBmB,EACnB,GAEFC,EAAM,GACL,CAACpB,EAAkBH,EAAIE,IAG1B,MA6BM,UAAEN,EAAS,KAAED,GAASY,GACtB,MAAEiB,GAAUC,EAAAA,QAAeP,UAAUQ,cAM3C,OACEC,EAAAA,EAAAA,KAACC,EAAAA,EAAM,CAACC,MAAI,EAACC,QAASzB,EAAc0B,WAAS,EAACC,SAAS,KAAIC,SACxDrC,GACC+B,EAAAA,EAAAA,KAACO,EAAAA,EAAG,CAACC,EAAG,GAAGF,UACTN,EAAAA,EAAAA,KAACS,EAAAA,GAAM,OAGTC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAL,SAAA,EACEN,EAAAA,EAAAA,KAACY,EAAAA,EAAW,CAAAN,SAAET,KACdG,EAAAA,EAAAA,KAACa,EAAAA,EAAa,CAAAP,UACZN,EAAAA,EAAAA,KAACc,EAAAA,GAAK,CAACC,KAAM/C,EAAMgD,QAdA,CAC3B,CAAEC,KAAM,OAAQC,MAAO,WACvB,CAAED,KAAM,cAAeC,MAAO,WAY4BC,aA9CpCC,IACtBpC,EAAgBoC,EAAS,OA+CnBV,EAAAA,EAAAA,MAACW,EAAAA,EAAa,CAAAf,SAAA,EACZN,EAAAA,EAAAA,KAACsB,EAAAA,EAAM,CAACC,WAAYxC,EAAayC,OAAS,GAAIC,QAAQ,YAAYC,QA5CrDxC,UACrB,MAAMyC,EAAS,GACf5C,EAAa6C,SAASC,IACpBF,EAAOG,KAAKD,EAAIZ,KAAK,IAGvB,MAAM9B,EAAS,CACbC,IAAKE,EAAAA,EAAUC,UAAUC,gBAAgBuC,KACzChB,KAAM,CACJiB,OAAQ3D,EACR4D,YAAaN,IAIjB,UACQrD,EAAOa,GACbR,IACAD,IACAD,EAAWyD,EAAAA,EAASC,KAAKC,IAC3B,CAAE,MAAOzC,GACPnB,EAAiBmB,EACnB,GAuBkGW,SAAC,iBAG3FN,EAAAA,EAAAA,KAACsB,EAAAA,EAAM,CAACG,QAAQ,YAAYC,QAAShD,EAAa4B,SAAC,oBAMlD,KCIb,GAAepC,EAAAA,EAAAA,KAAQC,EAAAA,EAAAA,KAjGCC,IAKjB,IAJLC,GAAIA,EAAE,SACNgE,EAAQ,WACRC,EAAU,iBACV9D,GACDJ,EACC,MAAOmE,EAAYC,IAAiB1D,EAAAA,EAAAA,UAAS,OACtC2D,EAAYC,IAAiB5D,EAAAA,EAAAA,UAAS,OACtC6D,EAAWjE,IAAgBI,EAAAA,EAAAA,WAAS,GAErC8D,GAAQC,EAAAA,EAAAA,QAAO,MAIfC,EAAmBA,IAAMN,EAAc,MAYvCO,EAAuBA,IAAMH,EAAMI,QAAQC,WAiB3C,YAAEC,EAAW,cAAEC,GAAkBrD,EAAAA,QAAeP,UAAU6D,IAE1DpC,EAAU,CACd,CAAEC,KAAM,OAAQC,MAAO,WACvB,CAAED,KAAM,cAAeC,MAAO,UAC9B,CACED,KAAM,WACNC,MAAO,WACPmC,QAAQ,EACRC,UAAYzB,IACV,MAAM,KAAEZ,GAASY,EACjB,OACE7B,EAAAA,EAAAA,KAACuD,EAAAA,GAAc,CAACC,SAAUA,IA3CTnF,IAAOmE,EAAcnE,GA2CNoF,CAAgBxC,GAAOY,IAAKA,GAAO,IAK3E,OACEnB,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAL,SAAA,CACGoD,QAAQnB,KACPvC,EAAAA,EAAAA,KAAC2D,EAAAA,EAAY,CACXzD,MAAI,EACJL,MAAOqD,EACPU,QAAST,EACThD,QAAS2C,EACTe,SAvCS3E,UACf,MAAMC,EAAS,CACbC,IAAI,GAADC,OAAKC,EAAAA,EAAUC,UAAUC,gBAAgBuC,MAC5ChB,KAAM,CAAEE,KAAMsB,IAEhB,UACQF,EAASlD,GACf4D,IACAD,IACAR,EAAWJ,EAAAA,EAASC,KAAK2B,OAC3B,CAAE,MAAOnE,GACPnB,EAAiBmB,EACnB,KA8BG+D,QAAQf,KACP3C,EAAAA,EAAAA,KAAC+D,EAAc,CACb1F,GAAIoE,EACJ/D,aA1DiBsF,KACvBtF,GAAa,GACbgE,EAAc,KAAK,EAyDb/D,aAAcoE,KAGlB/C,EAAAA,EAAAA,KAACc,EAAAA,GAAK,CACJmD,aAAcrB,EACdsB,cAAa,GAAA7E,OAAKC,EAAAA,EAAUC,UAAUC,gBAAgBuC,KAAI,KAAA1C,OAAIhB,GAC9D8F,eAAgB,CAAE9F,MAClB+F,SAAUA,IA7DQ,WAAgB,IAAf/F,EAAEgG,UAAA7C,OAAA,QAAA8C,IAAAD,UAAA,GAAAA,UAAA,GAAG,KAC5B3F,GAAa,GACbgE,EAAcrE,EAChB,CA0DsBkG,CAAgBlG,GAChC2C,QAASA,MAEV,MCrFD,MAAEnB,EAAK,YAAE2E,GAAgB1E,EAAAA,QAAeP,UAAU6D,IAElDqB,EAAc,CAAC,CAAEvD,MAAO,aAAe,CAAEA,MAAOrB,IA6BtD,SAAe3B,EAAAA,EAAAA,KAAQC,EAAAA,EAAAA,KAzBvB,WACE,MAAM,GAAEE,IAAOqG,EAAAA,EAAAA,MAETC,EAAY,CAChB,CACEzD,MAAO,WACPoC,WAAWtD,EAAAA,EAAAA,KAAC4E,EAAe,CAACvG,GAAIA,MAGpC,OACEqC,EAAAA,EAAAA,MAACmE,EAAAA,GAAW,CAAChF,MAAO2E,EAAaC,YAAaA,EAAaK,aAAW,EAAAxE,SAAA,EACpEN,EAAAA,EAAAA,KAAC+E,EAAAA,GAAI,CAACC,WAAS,EAACC,QAAS,EAAGC,GAAI,CAAEC,GAAI,EAAGC,UAb5B,KAaoD9E,UAC/DN,EAAAA,EAAAA,KAAC+E,EAAAA,GAAI,CAACM,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAGjF,UACxBN,EAAAA,EAAAA,KAACwF,EAAAA,EAAI,CAACN,GAAI,CAAE1E,EAAG,EAAG4E,UAAW,QAAS9E,UAClCN,EAAAA,EAAAA,KAACyF,EAAAA,EAAI,CAACpH,GAAIA,WAIlB2B,EAAAA,EAAAA,KAACwF,EAAAA,EAAI,CAACN,GAAI,CAAEQ,GAAI,EAAGC,GAAI,GAAIrF,UACzBN,EAAAA,EAAAA,KAAC4F,EAAAA,EAAa,CAACC,OAAQlB,QAI/B,I,gKCrBA,MAAMmB,EAAmBC,EAAAA,GAAW,CAClC,GAUIC,EAAU1G,EAAAA,EAAUC,UAAU0G,MAAMlE,KAI1C,MAEMhE,EAAY,CAChBmI,OAAQ,GACRC,YAAa,GAoHf,GAAejI,EAAAA,EAAAA,KAAQC,EAAAA,EAAAA,KAjHPC,IAST,IATU,GACfC,EAAE,MACFE,EAAK,iBACLC,EAAgB,WAChBC,EAAU,OACVH,EAAM,MACN8H,EAAK,QACLC,EAAO,QACPpD,GACD7E,EACC,MAAMkI,GAAWC,EAAAA,EAAAA,OACV3H,EAAOC,IAAYC,EAAAA,EAAAA,UAASf,GAG7ByI,GAAaC,EAAAA,EAAAA,cAAYvH,UAC7B,MAAMC,EAAS,CACbC,IAAKE,EAAAA,EAAUC,UAAU0G,MAAMS,kBAC/B3F,KAAM1C,EAAK,CAAEA,GAAIA,GAAO,CAAC,GAG3B,aADmBE,EAAMY,EACd,GACV,CAACZ,EAAOF,EAAI4E,IAETrD,GAAO6G,EAAAA,EAAAA,cAAYvH,UACvB,IACE,MAAMK,QAAkBiH,KAChBvF,KAAMiF,GAAW3G,EAEzBV,EAAS,CACPR,GAAIA,GAAM,KACV6H,OAAQA,GAAU,IAEtB,CAAE,MAAOvG,GACPnB,EAAiBmB,EACnB,IACC,CAACnB,EAAkBgI,KAEtBvH,EAAAA,EAAAA,YAAU,KACRW,GAAM,GACL,CAACA,IAEJ,MAAM+G,EAAgBtI,IACpBiI,EAAS,GAADjH,OAjDI,uBAiDO,UAAAA,OAAShB,GAAM,CAAEuI,SAAS,GAAQ,GAiCjD,UAAE3I,GAAcW,EACtB,OAAOX,GACL+B,EAAAA,EAAAA,KAACS,EAAAA,GAAM,KAEPT,EAAAA,EAAAA,KAAC6G,EAAAA,GAAM,CACLC,oBAAkB,EAClBC,cAAenI,EACfkH,iBAAkBA,EAClBkB,SA/BW9H,UACb,MAAM6B,EARWY,KACjB,MAAM,OAAEuE,GAAWvE,EACnB,MAAO,CACLV,KAAMiF,EACP,EAIYe,CAAUC,GACjB/H,EAAS,CACbC,IAAKf,EAAE,GAAAgB,OAAM2G,EAAO,KAAA3G,OAAIhB,GAAO2H,EAC/BjF,KAAMA,GAEFoG,EAAS9I,EAAK+H,EAAQ9H,EAE5B,IACE,MAAM8I,QAAaD,EAAOhI,GACtBd,GACFgI,EAAQnE,EAAAA,EAASC,KAAKkF,QACtBV,EAAaS,EAAK/I,MAElBI,EAAWyD,EAAAA,EAASC,KAAKC,KACzBuE,EAAaS,EAAK/I,IAEtB,CAAE,MAAOsB,GACP2H,QAAQC,IAAI,oBAAsB5H,GAClCnB,EAAiBmB,EACnB,GAWmBW,SAEfkH,IACA9G,EAAAA,EAAAA,MAAC+E,EAAAA,GAAI,CAAAnF,SAAA,EACHN,EAAAA,EAAAA,KAACyH,EAAAA,GAAW,CAACC,UAAWF,KACxBxH,EAAAA,EAAAA,KAAC+E,EAAAA,GAAI,CAACC,WAAS,EAAC2C,UAAU,MAAM1C,QAAS,EAAE3E,UACzCN,EAAAA,EAAAA,KAAC+E,EAAAA,GAAI,CAACC,WAAS,EAACK,MAAI,EAACJ,QAAS,EAAE3E,UAC9BN,EAAAA,EAAAA,KAAC+E,EAAAA,GAAI,CAACM,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGqC,GAAI,EAAEtH,UAC7BN,EAAAA,EAAAA,KAAC6H,EAAAA,GAAK,CAAC3G,MAAM,SAASD,KAAK,SAASqC,UAAWwE,EAAAA,eAO5D,I","sources":["pages/seguridad/roles/RolePermission/PermissionList.js","pages/seguridad/roles/RolePermission/index.js","pages/seguridad/roles/Edit.js","pages/seguridad/roles/Form.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Button, DialogTitle, Dialog, DialogActions, DialogContent, Box } from '@mui/material';\r\nimport PropTypes from 'prop-types';\r\nimport { withApi, withNotification } from 'wrappers';\r\nimport { Table, Loader } from 'components';\r\nimport endPoints from 'endPoints/endPoints';\r\nimport messages from 'constantes/messages';\r\nimport masterMessages from 'constantes/masterMessages';\r\n\r\nconst initState = {\r\n  rows: [],\r\n  isLoading: true\r\n};\r\n\r\nconst PermissionList = ({\r\n  id,\r\n  doPost,\r\n  doGet,\r\n  genericException,\r\n  appSuccess,\r\n  setOpenModal,\r\n  refreshTable\r\n}) => {\r\n  const [state, setState] = useState(initState);\r\n  const [selectedRows, setSelectedRows] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const init = async () => {\r\n      const params = {\r\n        url: `${endPoints.seguridad.rolesPermission.getPermission}/${id}`\r\n      };\r\n      try {\r\n        const permisos = await doGet(params);\r\n        setState({\r\n          rows: permisos,\r\n          isLoading: false\r\n        });\r\n      } catch (error) {\r\n        genericException(error);\r\n      }\r\n    };\r\n    init();\r\n  }, [genericException, id, doGet]);\r\n\r\n  // Save the rows selected in the modal\r\n  const onSelectedRows = (dataRows) => {\r\n    setSelectedRows(dataRows);\r\n  };\r\n\r\n  // Call to API for create new records selected in modal products\r\n  const createProducts = async () => {\r\n    const values = [];\r\n    selectedRows.forEach((row) => {\r\n      values.push(row.name);\r\n    });\r\n\r\n    const params = {\r\n      url: endPoints.seguridad.rolesPermission.base,\r\n      data: {\r\n        roleId: id,\r\n        permissions: values\r\n      }\r\n    };\r\n\r\n    try {\r\n      await doPost(params);\r\n      refreshTable();\r\n      setOpenModal();\r\n      appSuccess(messages.crud.new);\r\n    } catch (error) {\r\n      genericException(error);\r\n    }\r\n  };\r\n\r\n  const { isLoading, rows } = state;\r\n  const { title } = masterMessages.seguridad.rolPermission;\r\n\r\n  const columnsModalProducts = [\r\n    { name: 'name', label: 'Permiso' },\r\n    { name: 'description', label: 'Modulo' },\r\n  ];\r\n  return (\r\n    <Dialog open onClose={setOpenModal} fullWidth maxWidth=\"lg\">\r\n      {isLoading ? (\r\n        <Box p={10}>\r\n          <Loader />\r\n        </Box>\r\n      ) : (\r\n        <>\r\n          <DialogTitle>{title}</DialogTitle>\r\n          <DialogContent>\r\n            <Table data={rows} columns={columnsModalProducts} onRowsSelect={onSelectedRows} />\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button disabled={!(selectedRows.length > 0)} variant=\"contained\" onClick={createProducts}>\r\n              Seleccionar\r\n            </Button>\r\n            <Button variant=\"contained\" onClick={setOpenModal}>\r\n              Cancelar\r\n            </Button>\r\n          </DialogActions>\r\n        </>\r\n      )}\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nPermissionList.propTypes = {\r\n  id: PropTypes.string.isRequired,\r\n  refreshTable: PropTypes.func.isRequired,\r\n  setOpenModal: PropTypes.func.isRequired,\r\n  appSuccess: PropTypes.func.isRequired,\r\n  genericException: PropTypes.func.isRequired,\r\n  doPost: PropTypes.func,\r\n  doGet: PropTypes.func\r\n};\r\n\r\nexport default withApi(withNotification(PermissionList));\r\n","import React, { useState, useRef } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { withApi, withNotification } from \"wrappers\";\r\nimport { ConfirmModal } from \"components/dialogs\";\r\nimport { DefaultActions, Table } from \"components\";\r\nimport endPoints from \"endPoints/endPoints\";\r\nimport messages from \"constantes/messages\";\r\nimport masterMessages from \"constantes/masterMessages\";\r\nimport PermissionList from \"./PermissionList\";\r\n\r\nconst TablePermission = ({\r\n  id: id,\r\n  doDelete,\r\n  appWarning,\r\n  genericException,\r\n}) => {\r\n  const [idToRemove, setIdToRemove] = useState(null);\r\n  const [idToUpdate, setIdToUpdate] = useState(null);\r\n  const [openModal, setOpenModal] = useState(false);\r\n\r\n  const child = useRef(null);\r\n\r\n  const openModalDelete = (id) => setIdToRemove(id);\r\n\r\n  const closeModalDelete = () => setIdToRemove(null);\r\n\r\n  const closeModalUpdate = () => {\r\n    setOpenModal(false);\r\n    setIdToUpdate(null);\r\n  };\r\n\r\n  const openModalUpdate = (id = null) => {\r\n    setOpenModal(true);\r\n    setIdToUpdate(id);\r\n  };\r\n\r\n  const refreshRolPermission = () => child.current.refresh();\r\n\r\n  // Call to API for delete record selected in the table\r\n  const onDelete = async () => {\r\n    const params = {\r\n      url: `${endPoints.seguridad.rolesPermission.base}`,\r\n      data: { name: idToRemove },\r\n    };\r\n    try {\r\n      await doDelete(params);\r\n      refreshRolPermission();\r\n      closeModalDelete();\r\n      appWarning(messages.crud.delete);\r\n    } catch (error) {\r\n      genericException(error);\r\n    }\r\n  };\r\n  const { deleteTitle, deleteMessage } = masterMessages.seguridad.rol;\r\n\r\n  const columns = [\r\n    { name: \"name\", label: \"Permiso\" },\r\n    { name: \"description\", label: \"Modulo\" },\r\n    {\r\n      name: \"acciones\",\r\n      label: \"Acciones\",\r\n      filter: false,\r\n      component: (row) => {\r\n        const { name } = row;\r\n        return (\r\n          <DefaultActions onDelete={() => openModalDelete(name)} row={row} />\r\n        );\r\n      },\r\n    },\r\n  ];\r\n  return (\r\n    <>\r\n      {Boolean(idToRemove) && (\r\n        <ConfirmModal\r\n          open\r\n          title={deleteTitle}\r\n          message={deleteMessage}\r\n          onClose={closeModalDelete}\r\n          onAccept={onDelete}\r\n        />\r\n      )}\r\n      {Boolean(openModal) && (\r\n        <PermissionList\r\n          id={idToUpdate}\r\n          setOpenModal={closeModalUpdate}\r\n          refreshTable={refreshRolPermission}\r\n        />\r\n      )}\r\n      <Table\r\n        forwardedRef={child}\r\n        serverSideUrl={`${endPoints.seguridad.rolesPermission.base}/${id}`}\r\n        serverSideData={{ id }}\r\n        onCreate={() => openModalUpdate(id)}\r\n        columns={columns}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nTablePermission.propTypes = {\r\n  id: PropTypes.string.isRequired,\r\n  appWarning: PropTypes.func.isRequired,\r\n  genericException: PropTypes.func.isRequired,\r\n  doDelete: PropTypes.func,\r\n  refreshPresolped: PropTypes.func,\r\n};\r\n\r\nexport default withApi(withNotification(TablePermission));\r\n","import React, { useState, useRef } from 'react';\r\nimport { withApi, withNotification } from 'wrappers';\r\nimport { PageGeneral } from 'components';\r\nimport masterMessages from 'constantes/masterMessages';\r\nimport { useParams } from 'react-router';\r\nimport TabsComponent from 'components/Tab';\r\nimport { Card, Grid } from '@mui/material';\r\nimport Form from './Form';\r\nimport TablePermission from './RolePermission';\r\n\r\nconst { title, updateTitle } = masterMessages.seguridad.rol;\r\n\r\nconst breadcrumbs = [{ label: 'Seguridad' }, { label: title }];\r\n\r\nconst MIN_HEIGHT = 250;\r\n\r\nfunction Edit() {\r\n  const { id } = useParams();\r\n\r\n  const tabConfig = [\r\n    {\r\n      label: 'Permisos',\r\n      component: <TablePermission id={id}  />\r\n    }\r\n  ];\r\n  return (\r\n    <PageGeneral title={updateTitle} breadcrumbs={breadcrumbs} withOutCard>\r\n      <Grid container spacing={2} sx={{ pb: 2, minHeight: MIN_HEIGHT }}>\r\n        <Grid item xs={12} md={12}>\r\n          <Card sx={{ p: 3, minHeight: '100%' }}>\r\n              <Form id={id} />\r\n          </Card>\r\n        </Grid>\r\n      </Grid>\r\n      <Card sx={{ pl: 2, pr: 2 }}>\r\n        <TabsComponent config={tabConfig} />\r\n      </Card>\r\n    </PageGeneral>\r\n  );\r\n}\r\n\r\nexport default withApi(withNotification(Edit));\r\n","import React, { useCallback, useEffect, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Grid } from \"@mui/material\";\r\nimport { Form, Field, Formik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport {\r\n  SelectBase,\r\n  TextBase,\r\n  TextAreaBase,\r\n  AutoCompleteBase,\r\n  Loader,\r\n} from \"components\";\r\nimport endPoints from \"endPoints/endPoints\";\r\nimport messages from \"constantes/messages\";\r\nimport { withApi, withNotification } from \"wrappers\";\r\nimport { FormButtons } from \"components/controls\";\r\nimport { useNavigate } from \"react-router\";\r\n\r\nconst validationSchema = Yup.object({\r\n  /* documentoCompra: Yup.number().required('El campo es requerido'),\r\n  documentoProveedor: Yup.string().required('El campo es requerido'),\r\n  proveedor: Yup.number().required('El campo es requerido'),\r\n  // moneda: Yup.number().required('El campo es requerido'),\r\n  fechaCompra: Yup.date().required('El campo fecha es requerida'),\r\n  bodega: Yup.number().when('requiereBodega', (requiereBodega, schema) =>\r\n    requiereBodega ? schema.required('El campo incoterm es requerido') : schema\r\n  ) */\r\n});\r\n\r\nconst urlBase = endPoints.seguridad.roles.base;\r\n\r\nlet empleadosList = [{ label: \"General\", value: \"1\" }];\r\n\r\nconst baseUrl = \"/app/seguridad/roles\";\r\n\r\nconst initState = {\r\n  nombre: \"\",\r\n  compania_id: 1,\r\n};\r\n\r\nconst RolForm = ({\r\n  id,\r\n  doGet,\r\n  genericException,\r\n  appSuccess,\r\n  doPost,\r\n  doPut,\r\n  appInfo,\r\n  refresh,\r\n}) => {\r\n  const navigate = useNavigate();\r\n  const [state, setState] = useState(initState);\r\n\r\n  // Call to API for load form values\r\n  const loadFields = useCallback(async () => {\r\n    const params = {\r\n      url: endPoints.seguridad.roles.initFormComponent,\r\n      data: id ? { id: id } : {},\r\n    };\r\n    const resp = await doGet(params);\r\n    return resp;\r\n  }, [doGet, id, refresh]);\r\n\r\n  const init = useCallback(async () => {\r\n    try {\r\n      const seguridad = await loadFields();\r\n      const { name: nombre } = seguridad;\r\n\r\n      setState({\r\n        id: id || null,\r\n        nombre: nombre || \"\",\r\n      });\r\n    } catch (error) {\r\n      genericException(error);\r\n    }\r\n  }, [genericException, loadFields]);\r\n\r\n  useEffect(() => {\r\n    init();\r\n  }, [init]);\r\n\r\n  const redirectEdit = (id) => {\r\n    navigate(`${baseUrl}/edit/${id}`, { replace: false });\r\n  };\r\n\r\n  const mapValues = (values) => {\r\n    const { nombre } = values;\r\n    return {\r\n      name: nombre,\r\n    };\r\n  };\r\n\r\n  const submit = async (valuesForm) => {\r\n    const data = mapValues(valuesForm);\r\n    const params = {\r\n      url: id ? `${urlBase}/${id}` : urlBase,\r\n      data: data,\r\n    };\r\n    const method = id ? doPut : doPost;\r\n\r\n    try {\r\n      const resp = await method(params);\r\n      if (id) {\r\n        appInfo(messages.crud.update);\r\n        redirectEdit(resp.id);\r\n      } else {\r\n        appSuccess(messages.crud.new);\r\n        redirectEdit(resp.id);\r\n      }\r\n    } catch (error) {\r\n      console.log(\"ERROR AL GUARDAR \" + error);\r\n      genericException(error);\r\n    }\r\n  };\r\n\r\n  const { isLoading } = state;\r\n  return isLoading ? (\r\n    <Loader />\r\n  ) : (\r\n    <Formik\r\n      enableReinitialize\r\n      initialValues={state}\r\n      validationSchema={validationSchema}\r\n      onSubmit={submit}\r\n    >\r\n      {(subProps) => (\r\n        <Form>\r\n          <FormButtons formProps={subProps} />\r\n          <Grid container direction=\"row\" spacing={2}>\r\n            <Grid container item spacing={2}>\r\n              <Grid item xs={6} md={6} xl={6}>\r\n                <Field label=\"Nombre\" name=\"nombre\" component={TextBase} />\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </Form>\r\n      )}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nRolForm.propTypes = {\r\n  id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n  doPost: PropTypes.func,\r\n  doGet: PropTypes.func,\r\n  doPut: PropTypes.func,\r\n  appInfo: PropTypes.func.isRequired,\r\n  appSuccess: PropTypes.func.isRequired,\r\n  genericException: PropTypes.func.isRequired,\r\n  setViewMode: PropTypes.func,\r\n  refresh: PropTypes.oneOfType([PropTypes.object]),\r\n};\r\n\r\nexport default withApi(withNotification(RolForm));\r\n"],"names":["initState","rows","isLoading","withApi","withNotification","_ref","id","doPost","doGet","genericException","appSuccess","setOpenModal","refreshTable","state","setState","useState","selectedRows","setSelectedRows","useEffect","async","params","url","concat","endPoints","seguridad","rolesPermission","getPermission","permisos","error","init","title","masterMessages","rolPermission","_jsx","Dialog","open","onClose","fullWidth","maxWidth","children","Box","p","Loader","_jsxs","_Fragment","DialogTitle","DialogContent","Table","data","columns","name","label","onRowsSelect","dataRows","DialogActions","Button","disabled","length","variant","onClick","values","forEach","row","push","base","roleId","permissions","messages","crud","new","doDelete","appWarning","idToRemove","setIdToRemove","idToUpdate","setIdToUpdate","openModal","child","useRef","closeModalDelete","refreshRolPermission","current","refresh","deleteTitle","deleteMessage","rol","filter","component","DefaultActions","onDelete","openModalDelete","Boolean","ConfirmModal","message","onAccept","delete","PermissionList","closeModalUpdate","forwardedRef","serverSideUrl","serverSideData","onCreate","arguments","undefined","openModalUpdate","updateTitle","breadcrumbs","useParams","tabConfig","TablePermission","PageGeneral","withOutCard","Grid","container","spacing","sx","pb","minHeight","item","xs","md","Card","Form","pl","pr","TabsComponent","config","validationSchema","Yup","urlBase","roles","nombre","compania_id","doPut","appInfo","navigate","useNavigate","loadFields","useCallback","initFormComponent","redirectEdit","replace","Formik","enableReinitialize","initialValues","onSubmit","mapValues","valuesForm","method","resp","update","console","log","subProps","FormButtons","formProps","direction","xl","Field","TextBase"],"sourceRoot":""}