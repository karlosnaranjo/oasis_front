{"version":3,"file":"static/js/828.8937944e.chunk.js","mappings":"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","sources":["pages/transactions/evaluations/Form.js","pages/transactions/evaluations/index.js","../node_modules/@mui/system/esm/Box/boxClasses.js","../node_modules/@mui/system/esm/Box/Box.js"],"sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Grid, } from '@mui/material';\nimport { Form, Field, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { TextBase, SelectBase, Loader } from 'components';\nimport endPoints from 'endPoints/endPoints';\nimport messages from 'constantes/messages';\nimport { withApi, withNotification } from 'wrappers';\nimport { FormButtons } from 'components/controls';\nimport { useNavigate } from 'react-router';\nimport { Box } from '@mui/system';\nimport { getStatusLabel, getStatusValue } from 'utils/formHelpers';\nimport DatePickerBase from 'components/pickers/DatePickerBase';\n\nconst validationSchema = Yup.object({\n    code: Yup.string().required('Codigo es requerido'),\n    patient_id: Yup.string().required('Paciente es requerido'),\n    creation_date: Yup.string().required('Fecha de Creacion es requerido'),\n    phase_id: Yup.string().required('Fase es requerido'),\n    target_id: Yup.string().required('Objetivo es requerido'),\n    start_date: Yup.string().required('Fecha inicio es requerido'),\n    end_date: Yup.string().required('Fecha final es requerido'),\n    clinical_team: Yup.string().required('Apreciacion Equipo Clinico es requerido'),\n    achievement: Yup.string().required('Logros y Dificultades es requerido'),\n    strategy: Yup.string().required('Estrategias Utilizadas es requerido'),\n    requirement: Yup.string().required('Exigencias es requerido'),\n    test: Yup.string().required('Evaluacion es requerido'),\n    status: Yup.string().required('Estado es requerido'),\n\n});\n\nconst urlBase = endPoints.transactions.evaluations.base;\nconst targetsByPhaseUrl = `${urlBase}/targets-by-phase`;\n\nlet patientList = [];\nlet phaseList = [];\nlet targetList = [];\nlet testList = [{ \"label\": \"Positivo\", \"value\": \"Positivo\" }, { \"label\": \"Negativo\", \"value\": \"Negativo\" }, { \"label\": \"Observacion\", \"value\": \"Observacion\" }];\n\n\nconst baseUrl = '/app/general/transactions/evaluations';\n\nconst initState = {\n    code: false,\n    patient_id: null,\n    creation_date: false,\n    phase_id: null,\n    target_id: null,\n    start_date: false,\n    end_date: false,\n    clinical_team: false,\n    achievement: false,\n    strategy: false,\n    requirement: false,\n    test: \"\",\n    status: 1,\n\n};\n\nconst selectMap = (data) => {\n    return data.map((row) => ({ value: row.id, label: row.name }));\n};\n\nconst EvaluationsForm = ({\n    id,\n    doGet,\n    genericException,\n    appSuccess,\n    doPost,\n    doPut,\n    appInfo,\n    setEditable,\n    viewMode,\n    refresh,\n}) => {\n    const navigate = useNavigate();\n    const [state, setState] = useState(initState);\n    const [isLoading, setLoading] = useState(true);\n\n    // Call to API for load form values\n    const loadFields = useCallback(async () => {\n        const params = {\n            url: endPoints.transactions.evaluations.initForm,\n            data: id ? { id: id } : {}\n        };\n        const resp = await doGet(params);\n        return resp;\n    }, [doGet, id, refresh, setEditable]);\n\n    const init = useCallback(async () => {\n        try {\n            const { evaluations, patient, phase, target, } = await loadFields();\n            patientList = selectMap(patient);\n            phaseList = selectMap(phase);\n            targetList = selectMap(target);\n\n\n            const {\n                code, patient_id, creation_date, phase_id, target_id, start_date, end_date, clinical_team, achievement, strategy, requirement, test, status,\n            } = evaluations;\n\n            setState({\n                code: code || \"Automático\",\n                patient_id: patient_id || null,\n                creation_date: creation_date || \"\",\n                phase_id: phase_id || null,\n                target_id: target_id || null,\n                start_date: start_date || \"\",\n                end_date: end_date || \"\",\n                clinical_team: clinical_team || \"\",\n                achievement: achievement || \"\",\n                strategy: strategy || \"\",\n                requirement: requirement || \"\",\n                test: test || \"\",\n                status: getStatusLabel(status) || \"Activo\",\n\n            });\n\n            setLoading(false);\n        } catch (error) {\n            console.log('ERROR AL INICIAR' + error);\n            genericException(error);\n        }\n    }, [genericException, loadFields]);\n\n    useEffect(() => {\n        init();\n    }, [init]);\n\n    const redirectEdit = (id) => {\n        navigate(`${baseUrl}/edit/${id}`, { replace: false });\n    };\n\n    const mapValues = (values) => {\n        const { code, patient_id, creation_date, phase_id, target_id, start_date, end_date, clinical_team, achievement, strategy, requirement, test, status, } = values;\n        return {\n            code, patient_id, creation_date, phase_id, target_id, start_date, end_date, clinical_team, achievement, strategy, requirement, test, status: getStatusValue(status),\n        };\n    };\n\n    const submit = async (valuesForm) => {\n        const data = mapValues(valuesForm);\n        const params = {\n            url: id ? `${urlBase}/${id}` : urlBase,\n            data: data\n        };\n        const method = id ? doPut : doPost;\n\n        try {\n            const resp = await method(params);\n            if (id) {\n                appInfo(messages.crud.update);\n                redirectEdit(resp.response.data.id);\n            } else {\n                appSuccess(messages.crud.new);\n                redirectEdit(resp.response.data.id);\n            }\n        } catch (error) {\n            console.log('ERROR AL GUARDAR ' + error);\n            genericException(error);\n        }\n    };\n\n    const handlePhaseChange = async (selectedOption, formikProps) => {\n        try {\n            if (selectedOption) {\n                const params = {\n                    url: targetsByPhaseUrl,\n                    data: { phase_id: selectedOption }\n                };\n                const resp = await doGet(params);\n                targetList = selectMap(resp.targets);\n                formikProps.setFieldValue('target_id', null);\n            } else {\n                targetList = [];\n                formikProps.setFieldValue('target_id', null);\n            }\n        } catch (error) {\n            console.log('ERROR AL CARGAR OBJETIVOS ' + error);\n            genericException(error);\n        }\n    };\n\n    return (\n        <>\n            {isLoading ? (\n                <Box p={10}>\n                    <Loader />\n                </Box>\n            ) : (\n                <Formik enableReinitialize initialValues={state} validationSchema={validationSchema} onSubmit={submit}>\n                    {(subProps) => (\n                        <Form>\n                            {!id && viewMode ? (\n                                <FormButtons formProps={subProps} />\n                            ) : (\n                                <FormButtons formProps={subProps} />\n                            )}\n                            <Grid container direction=\"row\" spacing={2}>\n\n                                <Grid item xs={6} md={6} xl={6}>\n                                    <Field label=\"Codigo\" name=\"code\" component={TextBase}\n                                        disabled={true}\n                                        InputProps={{\n                                            readOnly: true\n                                        }}\n                                    //onClick={(event) => handleChangecode(event)} \n                                    />\n                                </Grid>\n\n                                <Grid item xs={6} md={6} xl={6}>\n                                    <Field label=\"Paciente\" name=\"patient_id\" component={SelectBase} items={patientList}\n                                    /*onOptionSelected={(selectedOption) => handleOnChangepatient_id(selectedOption, subProps)} */\n                                    />\n                                </Grid>\n\n                                <Grid item xs={6} md={6} xl={6}>\n                                    <Field label=\"Fecha de Creacion\" name=\"creation_date\" component={DatePickerBase}\n                                    //onClick={(event) => handleChangecreation_date(event)} \n                                    />\n                                </Grid>\n\n                                <Grid item xs={6} md={6} xl={6}>\n                                    <Field label=\"Fase\" name=\"phase_id\" component={SelectBase} items={phaseList}\n                                        onOptionSelected={(selectedOption) => handlePhaseChange(selectedOption, subProps)}\n                                    />\n                                </Grid>\n\n                                <Grid item xs={6} md={6} xl={6}>\n                                    <Field label=\"Objetivo\" name=\"target_id\" component={SelectBase} items={targetList}\n                                    /*onOptionSelected={(selectedOption) => handleOnChangetarget_id(selectedOption, subProps)} */\n                                    />\n                                </Grid>\n\n                                <Grid item xs={6} md={6} xl={6}>\n                                    <Field label=\"Fecha inicio\" name=\"start_date\" component={DatePickerBase}\n                                    //onClick={(event) => handleChangestart_date(event)} \n                                    />\n                                </Grid>\n\n                                <Grid item xs={6} md={6} xl={6}>\n                                    <Field label=\"Fecha final\" name=\"end_date\" component={DatePickerBase}\n                                    //onClick={(event) => handleChangeend_date(event)} \n                                    />\n                                </Grid>\n\n                                <Grid item xs={6} md={6} xl={6}>\n                                    <Field label=\"Apreciacion Equipo Clinico\" name=\"clinical_team\" component={TextBase}\n                                    //onClick={(event) => handleChangeclinical_team(event)} \n                                    />\n                                </Grid>\n\n                                <Grid item xs={6} md={6} xl={6}>\n                                    <Field label=\"Logros y Dificultades\" name=\"achievement\" component={TextBase}\n                                    //onClick={(event) => handleChangeachievement(event)} \n                                    />\n                                </Grid>\n\n                                <Grid item xs={6} md={6} xl={6}>\n                                    <Field label=\"Estrategias Utilizadas\" name=\"strategy\" component={TextBase}\n                                    //onClick={(event) => handleChangestrategy(event)} \n                                    />\n                                </Grid>\n\n                                <Grid item xs={6} md={6} xl={6}>\n                                    <Field label=\"Exigencias\" name=\"requirement\" component={TextBase}\n                                    //onClick={(event) => handleChangerequirement(event)} \n                                    />\n                                </Grid>\n\n                                <Grid item xs={12} md={6} xl={6}>\n                                    <Field label=\"Evaluacion\" name=\"test\" component={SelectBase} items={testList} />\n                                </Grid>\n\n                                <Grid item xs={12} md={6} xl={6}>\n                                    <Field label=\"Estado\" name=\"status\" component={TextBase} disabled={true} />\n                                </Grid>\n\n                            </Grid>\n                        </Form>\n                    )}\n                </Formik>\n            )}\n        </>\n    );\n};\n\nEvaluationsForm.propTypes = {\n    id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    doPost: PropTypes.func,\n    doGet: PropTypes.func,\n    doPut: PropTypes.func,\n    appInfo: PropTypes.func.isRequired,\n    appSuccess: PropTypes.func.isRequired,\n    genericException: PropTypes.func.isRequired,\n    setEditable: PropTypes.func,\n    refresh: PropTypes.oneOfType([PropTypes.object])\n};\n\nexport default withApi(withNotification(EvaluationsForm));","import React, { useState, useRef, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useNavigate } from \"react-router\";\nimport { PageGeneral, DefaultActions, EstadoChip, Table } from \"components\";\nimport endPoints from \"endPoints/endPoints\";\nimport messages from \"constantes/messages\";\nimport { withApi, withNotification } from \"wrappers\";\nimport { ConfirmModal } from \"components/dialogs\";\nimport masterMessages from \"constantes/masterMessages\";\nimport Form from \"./Form\";\nimport { getStatusLabel } from \"utils/formHelpers\";\nimport Avatar from \"@mui/material/Avatar\";\n\nconst {\n    transactions: {\n        evaluations: {\n            title,\n            deleteTitle,\n            deleteMessage,\n            changeStatusTitle,\n            changeStatusMessage,\n        },\n    },\n} = masterMessages;\n\nconst permissions = {\n    createPermissions: \"general:transactions:evaluations:create\",\n    updatePermissions: \"general:transactions:evaluations:update\",\n    deletePermissions: \"general:transactions:evaluations:delete\",\n    changeStatusPermissions: \"general:transactions:evaluations:changeStatus\",\n};\n\nconst EvaluationsGrid = (props) => {\n    const [idToEdit, setIdToEdit] = useState(null);\n    const [idToDelete, setIdToDelete] = useState(null);\n    const [idChangeStatus, setIdChangeStatus] = useState(null);\n    const [openModal, setOpenModal] = useState(false);\n    const tableRef = useRef(null);\n\n    const onDelete = async () => {\n        const url = `${endPoints.transactions.evaluations.base}/${idToDelete}`;\n        try {\n            await props.doDelete({ url });\n            tableRef.current.refresh();\n            closeModalDelete();\n            props.appWarning(messages.crud.delete);\n        } catch (error) {\n            props.appError(messages.crud.fail);\n        } finally {\n            setIdToDelete(null);\n        }\n    };\n\n    const onChangeStatus = async () => {\n        const url = `${endPoints.transactions.evaluations.base}/changestatus/${idChangeStatus}`;\n        try {\n            await props.doPut({ url });\n            props.appWarning(messages.crud.changeStatus);\n            tableRef.current.refresh();\n        } catch (error) {\n            props.appError(messages.crud.fail);\n        } finally {\n            setIdChangeStatus(null);\n        }\n    };\n\n    useEffect(() => {\n        if (!openModal) {\n            setIdToEdit(null);\n        }\n    }, [openModal]);\n\n    const breadcrumbs = [{ label: \"transactions\" }, { label: title }];\n\n    const baseUrl = \"/app/general/transactions/evaluations\";\n    const navigate = useNavigate();\n\n    const redirectNew = () => {\n        navigate(`${baseUrl}/new`, { replace: false });\n    };\n\n    const redirectEdit = (idModel) => {\n        navigate(`${baseUrl}/edit/${idModel}`, { replace: true, id: idModel });\n    };\n\n    const openModalDelete = ({ id: idToDelete } = {}) =>\n        setIdToDelete(idToDelete);\n    const closeModalDelete = () => setIdToDelete(null);\n\n    const actions = (row) => (\n        <DefaultActions\n            row={row}\n            onEdit={() => redirectEdit(row.id)}\n            //onDelete={() => openModalDelete(row)}\n            onChangeStatus={() => setIdChangeStatus(row.id)}\n        />\n    );\n\n    const columns = [\n        //\t{ name: 'code', label: 'Codigo' },\n        {\n            name: \"image\",\n            label: \"Imagen\",\n            component: (row) => (\n                <Avatar\n                    alt={row.name}\n                    src={row.image}\n                    style={{ width: \"50px\", height: \"50px\" }}\n                />\n            ),\n        },\n        { name: 'patient_name', label: 'Paciente' },\n        { name: 'creation_date', label: 'Fecha de Creacion' },\n        { name: 'phase_name', label: 'Fase' },\n        { name: 'target_name', label: 'Objetivo' },\n        { name: 'start_date', label: 'Fecha inicio' },\n        { name: 'end_date', label: 'Fecha final' },\n        //\t{ name: 'clinical_team', label: 'Apreciacion Equipo Clinico' },\n        //\t{ name: 'achievement', label: 'Logros y Dificultades' },\n        //\t{ name: 'strategy', label: 'Estrategias Utilizadas' },\n        //\t{ name: 'requirement', label: 'Exigencias' },\n        { name: 'test', label: 'Evaluacion' },\n\n        {\n            label: \"Estado\",\n            filter: false,\n            component: (row) => <EstadoChip estado={getStatusLabel(row.status)} />,\n        },\n        {\n            name: \"acciones\",\n            width: 130,\n            align: \"right\",\n            label: \"Acciones\",\n            filter: false,\n            component: (row) => actions(row),\n        },\n    ];\n    return (\n        <PageGeneral breadcrumbs={breadcrumbs}>\n            {Boolean(idToDelete) && (\n                <ConfirmModal\n                    open\n                    title={deleteTitle}\n                    message={deleteMessage}\n                    onClose={closeModalDelete}\n                    onAccept={onDelete}\n                    createPermissions={permissions.deletePermissions}\n                />\n            )}\n            {Boolean(idChangeStatus) && (\n                <ConfirmModal\n                    open\n                    title={changeStatusTitle}\n                    message={changeStatusMessage}\n                    onClose={() => setIdChangeStatus(null)}\n                    onAccept={() => onChangeStatus()}\n                    createPermissions={permissions.changeStatusPermissions}\n                />\n            )}\n            {openModal && (\n                <Form\n                    id={idToEdit}\n                    setOpenModal={setOpenModal}\n                    refreshData={tableRef}\n                />\n            )}\n            <Table\n                forwardedRef={tableRef}\n                onCreate={redirectNew}\n                serverSideUrl={endPoints.transactions.evaluations.base}\n                columns={columns}\n                title={title}\n                createPermissions={permissions.createPermissions}\n            />\n        </PageGeneral>\n    );\n};\n\nEvaluationsGrid.propTypes = {\n    appWarning: PropTypes.func.isRequired,\n    genericException: PropTypes.func.isRequired,\n    doDelete: PropTypes.func,\n    doGet: PropTypes.func\n};\n\nexport default withApi(withNotification(EvaluationsGrid));","import { unstable_generateUtilityClasses as generateUtilityClasses } from '@mui/utils';\nconst boxClasses = generateUtilityClasses('MuiBox', ['root']);\nexport default boxClasses;","'use client';\n\nimport PropTypes from 'prop-types';\nimport { unstable_ClassNameGenerator as ClassNameGenerator } from '@mui/utils';\nimport createBox from '../createBox';\nimport boxClasses from './boxClasses';\nconst Box = createBox({\n  defaultClassName: boxClasses.root,\n  generateClassName: ClassNameGenerator.generate\n});\nprocess.env.NODE_ENV !== \"production\" ? Box.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default Box;"],"names":["validationSchema","Yup","code","required","patient_id","creation_date","phase_id","target_id","start_date","end_date","clinical_team","achievement","strategy","requirement","test","status","urlBase","endPoints","transactions","evaluations","base","targetsByPhaseUrl","concat","patientList","phaseList","targetList","testList","initState","selectMap","data","map","row","value","id","label","name","withApi","withNotification","_ref","doGet","genericException","appSuccess","doPost","doPut","appInfo","setEditable","viewMode","refresh","navigate","useNavigate","state","setState","useState","isLoading","setLoading","loadFields","useCallback","async","params","url","initForm","init","patient","phase","target","getStatusLabel","error","console","log","useEffect","redirectEdit","replace","_jsx","_Fragment","children","Box","p","Loader","Formik","enableReinitialize","initialValues","onSubmit","values","getStatusValue","mapValues","valuesForm","method","resp","messages","crud","update","response","new","subProps","_jsxs","Form","FormButtons","formProps","Grid","container","direction","spacing","item","xs","md","xl","Field","component","TextBase","disabled","InputProps","readOnly","SelectBase","items","DatePickerBase","onOptionSelected","selectedOption","formikProps","targets","setFieldValue","handlePhaseChange","title","deleteTitle","deleteMessage","changeStatusTitle","changeStatusMessage","masterMessages","permissions","props","idToEdit","setIdToEdit","idToDelete","setIdToDelete","idChangeStatus","setIdChangeStatus","openModal","setOpenModal","tableRef","useRef","breadcrumbs","baseUrl","closeModalDelete","actions","DefaultActions","onEdit","idModel","onChangeStatus","columns","Avatar","alt","src","image","style","width","height","filter","EstadoChip","estado","align","PageGeneral","Boolean","ConfirmModal","open","message","onClose","onAccept","doDelete","current","appWarning","delete","appError","fail","createPermissions","changeStatus","refreshData","Table","forwardedRef","onCreate","redirectNew","serverSideUrl","generateUtilityClasses","createBox","defaultClassName","boxClasses","root","generateClassName","ClassNameGenerator","generate"],"sourceRoot":""}