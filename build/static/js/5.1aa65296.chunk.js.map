{"version":3,"file":"static/js/5.1aa65296.chunk.js","mappings":"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","sources":["pages/transactions/evolutions/Edit.js","pages/transactions/evolutions/Form.js","../node_modules/@mui/system/esm/Box/boxClasses.js","../node_modules/@mui/system/esm/Box/Box.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport { withApi, withNotification } from 'wrappers';\r\nimport { PageGeneral } from 'components';\r\nimport masterMessages from 'constantes/masterMessages';\r\nimport { useParams } from 'react-router';\r\nimport TabsComponent from 'components/Tab';\r\nimport { Card, Grid } from '@mui/material';\r\nimport EvolutionsForm from './Form';\r\n\r\nconst { title, updateTitle } = masterMessages.transactions.evolutions;\r\n\r\nconst breadcrumbs = [{ label: 'Maestros' }, { label: title }];\r\n\r\nconst MIN_HEIGHT = 250;\r\n\r\nfunction Edit() {\r\n  const { id } = useParams();\r\n  const [editable, setEditable] = useState(false);\r\n  const [viewMode, setViewMode] = useState(false);\r\n\r\n  const child = useRef();\r\n\r\n  const refreshParent = () => child.current.refresh();\r\n  \r\n\r\n  return (\r\n    <PageGeneral title={updateTitle} breadcrumbs={breadcrumbs} withOutCard>\r\n      <Grid container spacing={2} sx={{ pb: 2, minHeight: MIN_HEIGHT }}>\r\n        <Grid item xs={12} md={12}>\r\n          <Card sx={{ p: 3, minHeight: '100%' }}>\r\n              <EvolutionsForm id={id} refresh={child} setEditable={setEditable} setViewMode={setViewMode} viewMode={viewMode} \r\n              />\r\n          </Card>\r\n        </Grid>\r\n      </Grid>\r\n      \r\n    </PageGeneral>\r\n  );\r\n}\r\n\r\nexport default withApi(withNotification(Edit));","import React, { useCallback, useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Grid, } from '@mui/material';\r\nimport { Form, Field, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { TextBase, SelectBase, TextAreaBase, Loader } from 'components';\r\nimport endPoints from 'endPoints/endPoints';\r\nimport messages from 'constantes/messages';\r\nimport { withApi, withNotification } from 'wrappers';\r\nimport { FormButtons } from 'components/controls';\r\nimport { useNavigate } from 'react-router';\r\nimport { Box } from '@mui/system';\r\nimport { getStatusLabel, getStatusValue } from 'utils/formHelpers';\r\nimport DatePickerBase from 'components/pickers/DatePickerBase';\r\n\r\nconst validationSchema = Yup.object({\r\n    code: Yup.string().required('Codigo es requerido'),\r\n    patient_id: Yup.string().required('Paciente es requerido'),\r\n    employee_id: Yup.string().required('Empleado es requerido'),\r\n    date_of_evolution: Yup.string().required('Fecha de registro es requerido'),\r\n    area: Yup.string().required('Area que registra evolucion es requerido'),\r\n    comments: Yup.string().required('Notas es requerido'),\r\n    status: Yup.string().required('Estado es requerido'),\r\n\r\n});\r\n\r\nconst urlBase = endPoints.transactions.evolutions.base;\r\n\r\nlet patientList = [];\r\nlet employeeList = [];\r\n\r\n\r\nconst baseUrl = '/app/general/transactions/evolutions';\r\n\r\nconst initState = {\r\n    code: false,\r\n    patient_id: null,\r\n    employee_id: null,\r\n    date_of_evolution: false,\r\n    area: false,\r\n    comments: false,\r\n    status: 1,\r\n\r\n};\r\n\r\nconst selectMap = (data) => {\r\n    return data.map((row) => ({ value: row.id, label: row.name }));\r\n};\r\n\r\nconst EvolutionsForm = ({\r\n    id,\r\n    doGet,\r\n    genericException,\r\n    appSuccess,\r\n    doPost,\r\n    doPut,\r\n    appInfo,\r\n    setEditable,\r\n    viewMode,\r\n    refresh,\r\n}) => {\r\n    const navigate = useNavigate();\r\n    const [state, setState] = useState(initState);\r\n    const [isLoading, setLoading] = useState(true);\r\n\r\n    // Call to API for load form values\r\n    const loadFields = useCallback(async () => {\r\n        const params = {\r\n            url: endPoints.transactions.evolutions.initForm,\r\n            data: id ? { id: id } : {}\r\n        };\r\n        const resp = await doGet(params);\r\n        return resp;\r\n    }, [doGet, id, refresh, setEditable]);\r\n\r\n    const init = useCallback(async () => {\r\n        try {\r\n            const { evolutions, patient, employee, } = await loadFields();\r\n            patientList = selectMap(patient);\r\n            employeeList = selectMap(employee);\r\n\r\n\r\n            const {\r\n                code, patient_id, employee_id, date_of_evolution, area, comments, status,\r\n            } = evolutions;\r\n\r\n            setState({\r\n                code: code || \"\",\r\n                patient_id: patient_id || null,\r\n                employee_id: employee_id || null,\r\n                date_of_evolution: date_of_evolution || \"\",\r\n                area: area || \"\",\r\n                comments: comments || \"\",\r\n                status: getStatusLabel(status) || \"Activo\",\r\n\r\n            });\r\n\r\n            setLoading(false);\r\n        } catch (error) {\r\n            console.log('ERROR AL INICIAR' + error);\r\n            genericException(error);\r\n        }\r\n    }, [genericException, loadFields]);\r\n\r\n    useEffect(() => {\r\n        init();\r\n    }, [init]);\r\n\r\n    const redirectEdit = (id) => {\r\n        navigate(`${baseUrl}/edit/${id}`, { replace: false });\r\n    };\r\n\r\n    const mapValues = (values) => {\r\n        const { code, patient_id, employee_id, date_of_evolution, area, comments, status, } = values;\r\n        return {\r\n            code, patient_id, employee_id, date_of_evolution, area, comments, status: getStatusValue(status),\r\n        };\r\n    };\r\n\r\n    const submit = async (valuesForm) => {\r\n        const data = mapValues(valuesForm);\r\n        const params = {\r\n            url: id ? `${urlBase}/${id}` : urlBase,\r\n            data: data\r\n        };\r\n        const method = id ? doPut : doPost;\r\n\r\n        try {\r\n            const resp = await method(params);\r\n            if (id) {\r\n                appInfo(messages.crud.update);\r\n                redirectEdit(resp.response.data.id);\r\n            } else {\r\n                appSuccess(messages.crud.new);\r\n                redirectEdit(resp.response.data.id);\r\n            }\r\n        } catch (error) {\r\n            console.log('ERROR AL GUARDAR ' + error);\r\n            genericException(error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {isLoading ? (\r\n                <Box p={10}>\r\n                    <Loader />\r\n                </Box>\r\n            ) : (\r\n                <Formik enableReinitialize initialValues={state} validationSchema={validationSchema} onSubmit={submit}>\r\n                    {(subProps) => (\r\n                        <Form>\r\n                            {!id && viewMode ? (\r\n                                <FormButtons formProps={subProps} />\r\n                            ) : (\r\n                                <FormButtons formProps={subProps} />\r\n                            )}\r\n                            <Grid container direction=\"row\" spacing={2}>\r\n\r\n                                <Grid item xs={6} md={6} xl={6}>\r\n                                    <Field label=\"Codigo\" name=\"code\" component={TextBase}\r\n                                    //onClick={(event) => handleChangecode(event)} \r\n                                    />\r\n                                </Grid>\r\n\r\n                                <Grid item xs={6} md={6} xl={6}>\r\n                                    <Field label=\"Paciente\" name=\"patient_id\" component={SelectBase} items={patientList}\r\n                                    /*onOptionSelected={(selectedOption) => handleOnChangepatient_id(selectedOption, subProps)} */\r\n                                    />\r\n                                </Grid>\r\n\r\n                                <Grid item xs={6} md={6} xl={6}>\r\n                                    <Field label=\"Empleado\" name=\"employee_id\" component={SelectBase} items={employeeList}\r\n                                    /*onOptionSelected={(selectedOption) => handleOnChangeemployee_id(selectedOption, subProps)} */\r\n                                    />\r\n                                </Grid>\r\n\r\n                                <Grid item xs={6} md={6} xl={6}>\r\n                                    <Field label=\"Fecha de registro\" name=\"date_of_evolution\" component={DatePickerBase}\r\n                                    //onClick={(event) => handleChangedate_of_evolution(event)} \r\n                                    />\r\n                                </Grid>\r\n\r\n                                <Grid item xs={6} md={6} xl={6}>\r\n                                    <Field label=\"Area que registra evolucion\" name=\"area\" component={TextBase}\r\n                                    //onClick={(event) => handleChangearea(event)} \r\n                                    />\r\n                                </Grid>\r\n\r\n                                <Grid item xs={12} md={12} xl={12}>\r\n                                    <Field label=\"Notas\" name=\"comments\" component={TextAreaBase}\r\n                                    //onClick={(event) => handleChangecomments(event)} \r\n                                    />\r\n                                </Grid>\r\n\r\n                                <Grid item xs={12} md={6} xl={6}>\r\n                                    <Field label=\"Estado\" name=\"status\" component={TextBase} disabled={true} />\r\n                                </Grid>\r\n\r\n                            </Grid>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nEvolutionsForm.propTypes = {\r\n    id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n    doPost: PropTypes.func,\r\n    doGet: PropTypes.func,\r\n    doPut: PropTypes.func,\r\n    appInfo: PropTypes.func.isRequired,\r\n    appSuccess: PropTypes.func.isRequired,\r\n    genericException: PropTypes.func.isRequired,\r\n    setEditable: PropTypes.func,\r\n    refresh: PropTypes.oneOfType([PropTypes.object])\r\n};\r\n\r\nexport default withApi(withNotification(EvolutionsForm));","import { unstable_generateUtilityClasses as generateUtilityClasses } from '@mui/utils';\nconst boxClasses = generateUtilityClasses('MuiBox', ['root']);\nexport default boxClasses;","'use client';\n\nimport PropTypes from 'prop-types';\nimport { unstable_ClassNameGenerator as ClassNameGenerator } from '@mui/utils';\nimport createBox from '../createBox';\nimport boxClasses from './boxClasses';\nconst Box = createBox({\n  defaultClassName: boxClasses.root,\n  generateClassName: ClassNameGenerator.generate\n});\nprocess.env.NODE_ENV !== \"production\" ? Box.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default Box;"],"names":["title","updateTitle","masterMessages","transactions","evolutions","breadcrumbs","label","withApi","withNotification","id","useParams","editable","setEditable","useState","viewMode","setViewMode","child","useRef","_jsx","PageGeneral","withOutCard","children","Grid","container","spacing","sx","pb","minHeight","item","xs","md","Card","p","EvolutionsForm","refresh","validationSchema","Yup","code","required","patient_id","employee_id","date_of_evolution","area","comments","status","urlBase","endPoints","base","patientList","employeeList","initState","selectMap","data","map","row","value","name","_ref","doGet","genericException","appSuccess","doPost","doPut","appInfo","navigate","useNavigate","state","setState","isLoading","setLoading","loadFields","useCallback","async","params","url","initForm","init","patient","employee","getStatusLabel","error","console","log","useEffect","redirectEdit","concat","replace","_Fragment","Box","Loader","Formik","enableReinitialize","initialValues","onSubmit","values","getStatusValue","mapValues","valuesForm","method","resp","messages","crud","update","response","new","subProps","_jsxs","Form","FormButtons","formProps","direction","xl","Field","component","TextBase","SelectBase","items","DatePickerBase","TextAreaBase","disabled","generateUtilityClasses","createBox","defaultClassName","boxClasses","root","generateClassName","ClassNameGenerator","generate"],"sourceRoot":""}