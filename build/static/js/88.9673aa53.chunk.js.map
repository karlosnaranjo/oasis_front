{"version":3,"file":"static/js/88.9673aa53.chunk.js","mappings":"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","sources":["pages/masters/employees/Edit.js","pages/masters/employees/Form.js","../node_modules/@mui/system/esm/Box/boxClasses.js","../node_modules/@mui/system/esm/Box/Box.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport { withApi, withNotification } from 'wrappers';\nimport { PageGeneral } from 'components';\nimport masterMessages from 'constantes/masterMessages';\nimport { useParams } from 'react-router';\nimport TabsComponent from 'components/Tab';\nimport { Card, Grid } from '@mui/material';\nimport EmployeesForm from './Form';\n\nconst { title, updateTitle } = masterMessages.masters.employees;\n\nconst breadcrumbs = [{ label: 'Maestros' }, { label: title }];\n\nconst MIN_HEIGHT = 250;\n\nfunction Edit() {\n  const { id } = useParams();\n  const [editable, setEditable] = useState(false);\n  const [viewMode, setViewMode] = useState(false);\n\n  const child = useRef();\n\n  const refreshParent = () => child.current.refresh();\n  \n\n  return (\n    <PageGeneral title={updateTitle} breadcrumbs={breadcrumbs} withOutCard>\n      <Grid container spacing={2} sx={{ pb: 2, minHeight: MIN_HEIGHT }}>\n        <Grid item xs={12} md={12}>\n          <Card sx={{ p: 3, minHeight: '100%' }}>\n              <EmployeesForm id={id} refresh={child} setEditable={setEditable} setViewMode={setViewMode} viewMode={viewMode} \n              />\n          </Card>\n        </Grid>\n      </Grid>\n      \n    </PageGeneral>\n  );\n}\n\nexport default withApi(withNotification(Edit));","import React, { useCallback, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Grid,  } from '@mui/material';\nimport { Form, Field, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { SelectBase, TextBase, TextAreaBase, Loader } from 'components';\nimport endPoints from 'endPoints/endPoints';\nimport messages from 'constantes/messages';\nimport { withApi, withNotification } from 'wrappers';\nimport { FormButtons } from 'components/controls';\nimport { useNavigate } from 'react-router';\nimport { Box } from '@mui/system';\nimport { getStatusLabel, getStatusValue } from 'utils/formHelpers';\nimport DatePickerBase from 'components/pickers/DatePickerBase';\n\nconst validationSchema = Yup.object({\n   \tdocument_type: Yup.string().required('Tipo de documento es requerido'),\n\tcode: Yup.string().required('Numero es requerido'),\n\tname: Yup.string().required('Nombres es requerido'),\n\timage: Yup.string().required('Imagen es requerido'),\n\tgender: Yup.string().required('Genero es requerido'),\n\tmarital_status: Yup.string().required('Estado Civil es requerido'),\n\tdate_of_birth: Yup.string().required('Fecha de Nacimiento es requerido'),\n\taddress1: Yup.string().required('Direccion 1 es requerido'),\n\taddress2: Yup.string().required('Direccion 2 es requerido'),\n\tphone: Yup.string().required('Telefono es requerido'),\n\tcellphone: Yup.string().required('Celular es requerido'),\n\temail: Yup.string().required('E-Mail es requerido'),\n\tjob_title: Yup.string().required('Cargo es requerido'),\n\tstatus: Yup.string().required('Estado es requerido'),\n \n});\n\nconst urlBase = endPoints.masters.employees.base;\n\nlet document_typeList = [{\"label\":\"DNI\",\"value\":\"DNI\"},{\"label\":\"RUC\",\"value\":\"RUC\"},{\"label\":\"TI\",\"value\":\"TI\"},{\"label\":\"CEDULA\",\"value\":\"CEDULA\"}];\nlet genderList = [{\"label\":\"Masculino\",\"value\":\"Masculino\"},{\"label\":\"Femenino\",\"value\":\"Femenino\"},{\"label\":\"No binario\",\"value\":\"No binario\"},{\"label\":\"Prefiero no especificar\",\"value\":\"Prefiero no especificar\"}];\nlet marital_statusList = [{\"label\":\"Soltero(a)\",\"value\":\"Soltero(a)\"},{\"label\":\"Casado(a)\",\"value\":\"Casado(a)\"},{\"label\":\"Union Libre\",\"value\":\"Union Libre\"},{\"label\":\"Separado(a)\",\"value\":\"Separado(a)\"},{\"label\":\"Divorciado(a)\",\"value\":\"Divorciado(a)\"},{\"label\":\"Viudo(a)\",\"value\":\"Viudo(a)\"}];\n\n\nconst baseUrl = '/app/general/masters/employees';\n\nconst initState = {\n    \tdocument_type: \"\",\n\tcode: false,\n\tname: false,\n\timage: false,\n\tgender: \"\",\n\tmarital_status: \"\",\n\tdate_of_birth: false,\n\taddress1: false,\n\taddress2: false,\n\tphone: false,\n\tcellphone: false,\n\temail: false,\n\tjob_title: false,\n\tstatus: 1,\n\n};\n\nconst selectMap = (data) => {\n    return data.map((row) => ({ value: row.id, label: row.name }));\n};\n\nconst EmployeesForm = ({\n    id,\n    doGet,\n    genericException,\n    appSuccess,\n    doPost,\n    doPut,\n    appInfo,\n    setEditable,\n    viewMode,\n    refresh,\n    }) => {\n    const navigate = useNavigate();\n    const [state, setState] = useState(initState);\n    const [isLoading, setLoading] = useState(true);\n\n    // Call to API for load form values\n    const loadFields = useCallback(async () => {\n    const params = {\n        url: endPoints.masters.employees.initForm,\n        data: id ? { id: id } : {}\n    };\n    const resp = await doGet(params);\n    return resp;\n    }, [doGet, id, refresh, setEditable]);\n\n    const init = useCallback(async () => {\n    try {\n        const { employees,  } = await loadFields();\n\n\n        const {\ndocument_type, code, name, image, gender, marital_status, date_of_birth, address1, address2, phone, cellphone, email, job_title, status, \n        } = employees;\n\n        setState({\n\t\t\tdocument_type: document_type || \"\",\n\t\t\tcode: code || \"\",\n\t\t\tname: name || \"\",\n\t\t\timage: image || \"\",\n\t\t\tgender: gender || \"\",\n\t\t\tmarital_status: marital_status || \"\",\n\t\t\tdate_of_birth: date_of_birth || \"\",\n\t\t\taddress1: address1 || \"\",\n\t\t\taddress2: address2 || \"\",\n\t\t\tphone: phone || \"\",\n\t\t\tcellphone: cellphone || \"\",\n\t\t\temail: email || \"\",\n\t\t\tjob_title: job_title || \"\",\n\t\t\tstatus: getStatusLabel(status) || \"Activo\",\n\n        });\n\n        setLoading(false);\n    } catch (error) {\n        console.log('ERROR AL INICIAR'+error);\n        genericException(error);\n    }\n    }, [genericException, loadFields]);\n\n    useEffect(() => {\n        init();\n    }, [init]);\n\n    const redirectEdit = (id) => {\n        navigate(`${baseUrl}/edit/${id}`, { replace: false });\n    };\n\n    const mapValues = (values) => {\n        const { document_type, code, name, image, gender, marital_status, date_of_birth, address1, address2, phone, cellphone, email, job_title, status,  } = values;\n        return {\ndocument_type, code, name, image, gender, marital_status, date_of_birth, address1, address2, phone, cellphone, email, job_title, status: getStatusValue(status), \n        };\n    };\n\n    const submit = async (valuesForm) => {\n        const data = mapValues(valuesForm);\n        const params = {\n            url: id ? `${urlBase}/${id}` : urlBase,\n            data: data\n        };\n        const method = id ? doPut : doPost;\n\n        try {\n            const resp = await method(params);\n            if (id) {\n                appInfo(messages.crud.update);\n                redirectEdit(resp.response.data.id);\n            } else {\n                appSuccess(messages.crud.new);\n                redirectEdit(resp.response.data.id);\n            }\n        } catch (error) {\n            console.log('ERROR AL GUARDAR '+error);\n            genericException(error);\n        }\n    };\n\n    return (\n    <>\n        {isLoading ? (\n            <Box p={10}>\n                <Loader />\n            </Box>\n        ) : (\n            <Formik enableReinitialize initialValues={state} validationSchema={validationSchema} onSubmit={submit}>\n                {(subProps) => (\n                <Form>\n                    {!id && viewMode ? (\n                    <FormButtons formProps={subProps} />\n                    ) : (\n                    <FormButtons formProps={subProps} />\n                    )}\n                    <Grid container direction=\"row\" spacing={2}>\n    \n                        <Grid item xs={12} md={6} xl={6}>\n                            <Field label=\"Tipo de documento\" name=\"document_type\" component={SelectBase}  items={document_typeList} />\n                        </Grid>\n            \n                        <Grid item xs={6} md={6} xl={6}>\n                            <Field label=\"Numero\" name=\"code\" component={TextBase} \n                                //onClick={(event) => handleChangecode(event)} \n                            />\n                        </Grid>\n            \n                        <Grid item xs={6} md={6} xl={6}>\n                            <Field label=\"Nombres\" name=\"name\" component={TextBase} \n                                //onClick={(event) => handleChangename(event)} \n                            />\n                        </Grid>\n            \n                        <Grid item xs={6} md={6} xl={6}>\n                            <Field label=\"Imagen\" name=\"image\" component={TextBase} \n                                //onClick={(event) => handleChangeimage(event)} \n                            />\n                        </Grid>\n            \n                        <Grid item xs={12} md={6} xl={6}>\n                            <Field label=\"Genero\" name=\"gender\" component={SelectBase}  items={genderList} />\n                        </Grid>\n            \n                        <Grid item xs={12} md={6} xl={6}>\n                            <Field label=\"Estado Civil\" name=\"marital_status\" component={SelectBase}  items={marital_statusList} />\n                        </Grid>\n            \n                        <Grid item xs={6} md={6} xl={6}>\n                            <Field label=\"Fecha de Nacimiento\" name=\"date_of_birth\" component={DatePickerBase} \n                                //onClick={(event) => handleChangedate_of_birth(event)} \n                            />\n                        </Grid>\n            \n                        <Grid item xs={6} md={6} xl={6}>\n                            <Field label=\"Direccion 1\" name=\"address1\" component={TextBase} \n                                //onClick={(event) => handleChangeaddress1(event)} \n                            />\n                        </Grid>\n            \n                        <Grid item xs={6} md={6} xl={6}>\n                            <Field label=\"Direccion 2\" name=\"address2\" component={TextAreaBase} \n                                //onClick={(event) => handleChangeaddress2(event)} \n                            />\n                        </Grid>\n            \n                        <Grid item xs={6} md={6} xl={6}>\n                            <Field label=\"Telefono\" name=\"phone\" component={TextBase} \n                                //onClick={(event) => handleChangephone(event)} \n                            />\n                        </Grid>\n            \n                        <Grid item xs={6} md={6} xl={6}>\n                            <Field label=\"Celular\" name=\"cellphone\" component={TextBase} \n                                //onClick={(event) => handleChangecellphone(event)} \n                            />\n                        </Grid>\n            \n                        <Grid item xs={6} md={6} xl={6}>\n                            <Field label=\"E-Mail\" name=\"email\" component={TextBase} \n                                //onClick={(event) => handleChangeemail(event)} \n                            />\n                        </Grid>\n            \n                        <Grid item xs={6} md={6} xl={6}>\n                            <Field label=\"Cargo\" name=\"job_title\" component={TextBase} \n                                //onClick={(event) => handleChangejob_title(event)} \n                            />\n                        </Grid>\n            \n                        <Grid item xs={12} md={6} xl={6}>\n                            <Field label=\"Estado\" name=\"status\" component={TextBase} disabled={true} />\n                        </Grid>\n            \n                    </Grid>\n                </Form>\n                )}\n            </Formik>\n        )}\n    </>\n    );\n};\n\nEmployeesForm.propTypes = {\n    id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    doPost: PropTypes.func,\n    doGet: PropTypes.func,\n    doPut: PropTypes.func,\n    appInfo: PropTypes.func.isRequired,\n    appSuccess: PropTypes.func.isRequired,\n    genericException: PropTypes.func.isRequired,\n    setEditable: PropTypes.func,\n    refresh: PropTypes.oneOfType([PropTypes.object])\n};\n\nexport default withApi(withNotification(EmployeesForm));","import { unstable_generateUtilityClasses as generateUtilityClasses } from '@mui/utils';\nconst boxClasses = generateUtilityClasses('MuiBox', ['root']);\nexport default boxClasses;","'use client';\n\nimport PropTypes from 'prop-types';\nimport { unstable_ClassNameGenerator as ClassNameGenerator } from '@mui/utils';\nimport createBox from '../createBox';\nimport boxClasses from './boxClasses';\nconst Box = createBox({\n  defaultClassName: boxClasses.root,\n  generateClassName: ClassNameGenerator.generate\n});\nprocess.env.NODE_ENV !== \"production\" ? Box.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default Box;"],"names":["title","updateTitle","masterMessages","masters","employees","breadcrumbs","label","withApi","withNotification","id","useParams","editable","setEditable","useState","viewMode","setViewMode","child","useRef","_jsx","PageGeneral","withOutCard","children","Grid","container","spacing","sx","pb","minHeight","item","xs","md","Card","p","EmployeesForm","refresh","validationSchema","Yup","document_type","required","code","name","image","gender","marital_status","date_of_birth","address1","address2","phone","cellphone","email","job_title","status","urlBase","endPoints","base","document_typeList","genderList","marital_statusList","initState","_ref","doGet","genericException","appSuccess","doPost","doPut","appInfo","navigate","useNavigate","state","setState","isLoading","setLoading","loadFields","useCallback","async","params","url","initForm","data","init","getStatusLabel","error","console","log","useEffect","redirectEdit","concat","replace","_Fragment","Box","Loader","Formik","enableReinitialize","initialValues","onSubmit","values","getStatusValue","mapValues","valuesForm","method","resp","messages","crud","update","response","new","subProps","_jsxs","Form","FormButtons","formProps","direction","xl","Field","component","SelectBase","items","TextBase","DatePickerBase","TextAreaBase","disabled","generateUtilityClasses","createBox","defaultClassName","boxClasses","root","generateClassName","ClassNameGenerator","generate"],"sourceRoot":""}