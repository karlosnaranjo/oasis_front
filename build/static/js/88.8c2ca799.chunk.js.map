{"version":3,"file":"static/js/88.8c2ca799.chunk.js","mappings":"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","sources":["pages/masters/employees/Edit.js","pages/masters/employees/Form.js","../node_modules/@mui/system/esm/Box/boxClasses.js","../node_modules/@mui/system/esm/Box/Box.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport { withApi, withNotification } from 'wrappers';\nimport { PageGeneral } from 'components';\nimport masterMessages from 'constantes/masterMessages';\nimport { useParams } from 'react-router';\nimport TabsComponent from 'components/Tab';\nimport { Card, Grid } from '@mui/material';\nimport EmployeesForm from './Form';\n\nconst { title, updateTitle } = masterMessages.masters.employees;\n\nconst breadcrumbs = [{ label: 'Maestros' }, { label: title }];\n\nconst MIN_HEIGHT = 250;\n\nfunction Edit() {\n  const { id } = useParams();\n  const [editable, setEditable] = useState(false);\n  const [viewMode, setViewMode] = useState(false);\n\n  const child = useRef();\n\n  const refreshParent = () => child.current.refresh();\n  \n\n  return (\n    <PageGeneral title={updateTitle} breadcrumbs={breadcrumbs} withOutCard>\n      <Grid container spacing={2} sx={{ pb: 2, minHeight: MIN_HEIGHT }}>\n        <Grid item xs={12} md={12}>\n          <Card sx={{ p: 3, minHeight: '100%' }}>\n              <EmployeesForm id={id} refresh={child} setEditable={setEditable} setViewMode={setViewMode} viewMode={viewMode} \n              />\n          </Card>\n        </Grid>\n      </Grid>\n      \n    </PageGeneral>\n  );\n}\n\nexport default withApi(withNotification(Edit));","import React, { useCallback, useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Grid, } from '@mui/material';\r\nimport { Form, Field, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { SelectBase, TextBase, TextAreaBase, Loader } from 'components';\r\nimport endPoints from 'endPoints/endPoints';\r\nimport messages from 'constantes/messages';\r\nimport { withApi, withNotification } from 'wrappers';\r\nimport { FormButtons } from 'components/controls';\r\nimport { useNavigate } from 'react-router';\r\nimport { Box } from '@mui/system';\r\nimport { getStatusLabel, getStatusValue } from 'utils/formHelpers';\r\nimport DatePickerBase from 'components/pickers/DatePickerBase';\r\n\r\nconst validationSchema = Yup.object({\r\n    document_type: Yup.string().required('Tipo de documento es requerido'),\r\n    code: Yup.string().required('Numero es requerido'),\r\n    name: Yup.string().required('Nombres es requerido'),\r\n    //image: Yup.string().required('Imagen es requerido'),\r\n    gender: Yup.string().required('Genero es requerido'),\r\n    marital_status: Yup.string().required('Estado Civil es requerido'),\r\n    date_of_birth: Yup.string().required('Fecha de Nacimiento es requerido'),\r\n    address1: Yup.string().required('Direccion 1 es requerido'),\r\n    //address2: Yup.string().required('Direccion 2 es requerido'),\r\n    //phone: Yup.string().required('Telefono es requerido'),\r\n    cellphone: Yup.string().required('Celular es requerido'),\r\n    email: Yup.string().required('E-Mail es requerido'),\r\n    job_title: Yup.string().required('Cargo es requerido'),\r\n    status: Yup.string().required('Estado es requerido'),\r\n\r\n});\r\n\r\nconst urlBase = endPoints.masters.employees.base;\r\n\r\nlet document_typeList = [{ \"label\": \"DNI\", \"value\": \"DNI\" }, { \"label\": \"RUC\", \"value\": \"RUC\" }, { \"label\": \"TI\", \"value\": \"TI\" }, { \"label\": \"CEDULA\", \"value\": \"CEDULA\" }];\r\nlet genderList = [{ \"label\": \"Masculino\", \"value\": \"Masculino\" }, { \"label\": \"Femenino\", \"value\": \"Femenino\" }, { \"label\": \"No binario\", \"value\": \"No binario\" }, { \"label\": \"Prefiero no especificar\", \"value\": \"Prefiero no especificar\" }];\r\nlet marital_statusList = [{ \"label\": \"Soltero(a)\", \"value\": \"Soltero(a)\" }, { \"label\": \"Casado(a)\", \"value\": \"Casado(a)\" }, { \"label\": \"Union Libre\", \"value\": \"Union Libre\" }, { \"label\": \"Separado(a)\", \"value\": \"Separado(a)\" }, { \"label\": \"Divorciado(a)\", \"value\": \"Divorciado(a)\" }, { \"label\": \"Viudo(a)\", \"value\": \"Viudo(a)\" }];\r\n\r\n\r\nconst baseUrl = '/app/general/masters/employees';\r\n\r\nconst initState = {\r\n    document_type: \"\",\r\n    code: false,\r\n    name: false,\r\n    image: false,\r\n    gender: \"\",\r\n    marital_status: \"\",\r\n    date_of_birth: false,\r\n    address1: false,\r\n    address2: false,\r\n    phone: false,\r\n    cellphone: false,\r\n    email: false,\r\n    job_title: false,\r\n    status: 1,\r\n\r\n};\r\n\r\nconst selectMap = (data) => {\r\n    return data.map((row) => ({ value: row.id, label: row.name }));\r\n};\r\n\r\nconst EmployeesForm = ({\r\n    id,\r\n    doGet,\r\n    genericException,\r\n    appSuccess,\r\n    doPost,\r\n    doPut,\r\n    appInfo,\r\n    setEditable,\r\n    viewMode,\r\n    refresh,\r\n}) => {\r\n    const navigate = useNavigate();\r\n    const [state, setState] = useState(initState);\r\n    const [isLoading, setLoading] = useState(true);\r\n\r\n    // Call to API for load form values\r\n    const loadFields = useCallback(async () => {\r\n        const params = {\r\n            url: endPoints.masters.employees.initForm,\r\n            data: id ? { id: id } : {}\r\n        };\r\n        const resp = await doGet(params);\r\n        return resp;\r\n    }, [doGet, id, refresh, setEditable]);\r\n\r\n    const init = useCallback(async () => {\r\n        try {\r\n            const { employees, } = await loadFields();\r\n\r\n\r\n            const {\r\n                document_type, code, name, image, gender, marital_status, date_of_birth, address1, address2, phone, cellphone, email, job_title, status,\r\n            } = employees;\r\n\r\n            setState({\r\n                document_type: document_type || \"\",\r\n                code: code || \"\",\r\n                name: name || \"\",\r\n                image: image || \"\",\r\n                gender: gender || \"\",\r\n                marital_status: marital_status || \"\",\r\n                date_of_birth: date_of_birth || \"\",\r\n                address1: address1 || \"\",\r\n                address2: address2 || \"\",\r\n                phone: phone || \"\",\r\n                cellphone: cellphone || \"\",\r\n                email: email || \"\",\r\n                job_title: job_title || \"\",\r\n                status: getStatusLabel(status) || \"Activo\",\r\n\r\n            });\r\n\r\n            setLoading(false);\r\n        } catch (error) {\r\n            console.log('ERROR AL INICIAR' + error);\r\n            genericException(error);\r\n        }\r\n    }, [genericException, loadFields]);\r\n\r\n    useEffect(() => {\r\n        init();\r\n    }, [init]);\r\n\r\n    const redirectEdit = (id) => {\r\n        navigate(`${baseUrl}/edit/${id}`, { replace: false });\r\n    };\r\n\r\n    const mapValues = (values) => {\r\n        const { document_type, code, name, image, gender, marital_status, date_of_birth, address1, address2, phone, cellphone, email, job_title, status, } = values;\r\n        return {\r\n            document_type, code, name, image, gender, marital_status, date_of_birth, address1, address2, phone, cellphone, email, job_title, status: getStatusValue(status),\r\n        };\r\n    };\r\n\r\n    const submit = async (valuesForm) => {\r\n        const data = mapValues(valuesForm);\r\n        const params = {\r\n            url: id ? `${urlBase}/${id}` : urlBase,\r\n            data: data\r\n        };\r\n        const method = id ? doPut : doPost;\r\n\r\n        try {\r\n            const resp = await method(params);\r\n            if (id) {\r\n                appInfo(messages.crud.update);\r\n                redirectEdit(resp.response.data.id);\r\n            } else {\r\n                appSuccess(messages.crud.new);\r\n                redirectEdit(resp.response.data.id);\r\n            }\r\n        } catch (error) {\r\n            console.log('ERROR AL GUARDAR ' + error);\r\n            genericException(error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {isLoading ? (\r\n                <Box p={10}>\r\n                    <Loader />\r\n                </Box>\r\n            ) : (\r\n                <Formik enableReinitialize initialValues={state} validationSchema={validationSchema} onSubmit={submit}>\r\n                    {(subProps) => (\r\n                        <Form>\r\n                            {!id && viewMode ? (\r\n                                <FormButtons formProps={subProps} />\r\n                            ) : (\r\n                                <FormButtons formProps={subProps} />\r\n                            )}\r\n                            <Grid container direction=\"row\" spacing={2}>\r\n\r\n                                <Grid item xs={12} md={6} xl={6}>\r\n                                    <Field label=\"Tipo de documento\" name=\"document_type\" component={SelectBase} items={document_typeList} />\r\n                                </Grid>\r\n\r\n                                <Grid item xs={6} md={6} xl={6}>\r\n                                    <Field label=\"Numero\" name=\"code\" component={TextBase}\r\n                                    //onClick={(event) => handleChangecode(event)} \r\n                                    />\r\n                                </Grid>\r\n\r\n                                <Grid item xs={6} md={6} xl={6}>\r\n                                    <Field label=\"Nombres\" name=\"name\" component={TextBase}\r\n                                    //onClick={(event) => handleChangename(event)} \r\n                                    />\r\n                                </Grid>\r\n\r\n                                <Grid item xs={6} md={6} xl={6}>\r\n                                    <Field label=\"Imagen\" name=\"image\" component={TextBase}\r\n                                    //onClick={(event) => handleChangeimage(event)} \r\n                                    />\r\n                                </Grid>\r\n\r\n                                <Grid item xs={12} md={6} xl={6}>\r\n                                    <Field label=\"Genero\" name=\"gender\" component={SelectBase} items={genderList} />\r\n                                </Grid>\r\n\r\n                                <Grid item xs={12} md={6} xl={6}>\r\n                                    <Field label=\"Estado Civil\" name=\"marital_status\" component={SelectBase} items={marital_statusList} />\r\n                                </Grid>\r\n\r\n                                <Grid item xs={6} md={6} xl={6}>\r\n                                    <Field label=\"Fecha de Nacimiento\" name=\"date_of_birth\" component={DatePickerBase}\r\n                                    //onClick={(event) => handleChangedate_of_birth(event)} \r\n                                    />\r\n                                </Grid>\r\n\r\n                                <Grid item xs={6} md={6} xl={6}>\r\n                                    <Field label=\"Direccion 1\" name=\"address1\" component={TextBase}\r\n                                    //onClick={(event) => handleChangeaddress1(event)} \r\n                                    />\r\n                                </Grid>\r\n\r\n                                <Grid item xs={6} md={6} xl={6}>\r\n                                    <Field label=\"Direccion 2\" name=\"address2\" component={TextAreaBase}\r\n                                    //onClick={(event) => handleChangeaddress2(event)} \r\n                                    />\r\n                                </Grid>\r\n\r\n                                <Grid item xs={6} md={6} xl={6}>\r\n                                    <Field label=\"Telefono\" name=\"phone\" component={TextBase}\r\n                                    //onClick={(event) => handleChangephone(event)} \r\n                                    />\r\n                                </Grid>\r\n\r\n                                <Grid item xs={6} md={6} xl={6}>\r\n                                    <Field label=\"Celular\" name=\"cellphone\" component={TextBase}\r\n                                    //onClick={(event) => handleChangecellphone(event)} \r\n                                    />\r\n                                </Grid>\r\n\r\n                                <Grid item xs={6} md={6} xl={6}>\r\n                                    <Field label=\"E-Mail\" name=\"email\" component={TextBase}\r\n                                    //onClick={(event) => handleChangeemail(event)} \r\n                                    />\r\n                                </Grid>\r\n\r\n                                <Grid item xs={6} md={6} xl={6}>\r\n                                    <Field label=\"Cargo\" name=\"job_title\" component={TextBase}\r\n                                    //onClick={(event) => handleChangejob_title(event)} \r\n                                    />\r\n                                </Grid>\r\n\r\n                                <Grid item xs={12} md={6} xl={6}>\r\n                                    <Field label=\"Estado\" name=\"status\" component={TextBase} disabled={true} />\r\n                                </Grid>\r\n\r\n                            </Grid>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nEmployeesForm.propTypes = {\r\n    id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n    doPost: PropTypes.func,\r\n    doGet: PropTypes.func,\r\n    doPut: PropTypes.func,\r\n    appInfo: PropTypes.func.isRequired,\r\n    appSuccess: PropTypes.func.isRequired,\r\n    genericException: PropTypes.func.isRequired,\r\n    setEditable: PropTypes.func,\r\n    refresh: PropTypes.oneOfType([PropTypes.object])\r\n};\r\n\r\nexport default withApi(withNotification(EmployeesForm));","import { unstable_generateUtilityClasses as generateUtilityClasses } from '@mui/utils';\nconst boxClasses = generateUtilityClasses('MuiBox', ['root']);\nexport default boxClasses;","'use client';\n\nimport PropTypes from 'prop-types';\nimport { unstable_ClassNameGenerator as ClassNameGenerator } from '@mui/utils';\nimport createBox from '../createBox';\nimport boxClasses from './boxClasses';\nconst Box = createBox({\n  defaultClassName: boxClasses.root,\n  generateClassName: ClassNameGenerator.generate\n});\nprocess.env.NODE_ENV !== \"production\" ? Box.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default Box;"],"names":["title","updateTitle","masterMessages","masters","employees","breadcrumbs","label","withApi","withNotification","id","useParams","editable","setEditable","useState","viewMode","setViewMode","child","useRef","_jsx","PageGeneral","withOutCard","children","Grid","container","spacing","sx","pb","minHeight","item","xs","md","Card","p","EmployeesForm","refresh","validationSchema","Yup","document_type","required","code","name","gender","marital_status","date_of_birth","address1","cellphone","email","job_title","status","urlBase","endPoints","base","document_typeList","genderList","marital_statusList","initState","image","address2","phone","_ref","doGet","genericException","appSuccess","doPost","doPut","appInfo","navigate","useNavigate","state","setState","isLoading","setLoading","loadFields","useCallback","async","params","url","initForm","data","init","getStatusLabel","error","console","log","useEffect","redirectEdit","concat","replace","_Fragment","Box","Loader","Formik","enableReinitialize","initialValues","onSubmit","values","getStatusValue","mapValues","valuesForm","method","resp","messages","crud","update","response","new","subProps","_jsxs","Form","FormButtons","formProps","direction","xl","Field","component","SelectBase","items","TextBase","DatePickerBase","TextAreaBase","disabled","generateUtilityClasses","createBox","defaultClassName","boxClasses","root","generateClassName","ClassNameGenerator","generate"],"sourceRoot":""}