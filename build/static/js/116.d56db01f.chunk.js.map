{"version":3,"file":"static/js/116.d56db01f.chunk.js","mappings":"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","sources":["components/upload/UploadAvatar.js","components/HeaderBreadcrumbs.js","components/_dashboard/user/account/AccountBillingAddressBook.js","components/_dashboard/user/account/AccountBillingPaymentMethod.js","components/_dashboard/user/account/AccountBillingInvoiceHistory.js","utils/formatTime.js","components/_dashboard/user/account/AccountBilling.js","components/_dashboard/user/account/AccountChangePassword.js","components/upload/UploadMultiFile.js","components/upload/UploadSingleFile.js","components/_dashboard/user/account/AccountGeneral.js","components/_dashboard/user/account/AccountNotifications.js","pages/dashboard/UserAccount.js","utils/formatNumber.js"],"sourcesContent":["import { isString } from 'lodash';\r\nimport PropTypes from 'prop-types';\r\nimport { Icon } from '@iconify/react';\r\nimport { useDropzone } from 'react-dropzone';\r\nimport roundAddAPhoto from '@iconify/icons-ic/round-add-a-photo';\r\n// material\r\nimport { alpha, styled } from '@mui/material/styles';\r\nimport { Box, Typography, Paper } from '@mui/material';\r\n// utils\r\nimport { fData } from '../../utils/formatNumber';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nconst RootStyle = styled('div')(({ theme }) => ({\r\n  width: 144,\r\n  height: 144,\r\n  margin: 'auto',\r\n  borderRadius: '50%',\r\n  padding: theme.spacing(1),\r\n  border: `1px dashed ${theme.palette.grey[500_32]}`\r\n}));\r\n\r\nconst DropZoneStyle = styled('div')({\r\n  zIndex: 0,\r\n  width: '100%',\r\n  height: '100%',\r\n  outline: 'none',\r\n  display: 'flex',\r\n  overflow: 'hidden',\r\n  borderRadius: '50%',\r\n  position: 'relative',\r\n  alignItems: 'center',\r\n  justifyContent: 'center',\r\n  '& > *': { width: '100%', height: '100%' },\r\n  '&:hover': {\r\n    cursor: 'pointer',\r\n    '& .placeholder': {\r\n      zIndex: 9\r\n    }\r\n  }\r\n});\r\n\r\nconst PlaceholderStyle = styled('div')(({ theme }) => ({\r\n  display: 'flex',\r\n  position: 'absolute',\r\n  alignItems: 'center',\r\n  flexDirection: 'column',\r\n  justifyContent: 'center',\r\n  color: theme.palette.text.secondary,\r\n  backgroundColor: theme.palette.background.neutral,\r\n  transition: theme.transitions.create('opacity', {\r\n    easing: theme.transitions.easing.easeInOut,\r\n    duration: theme.transitions.duration.shorter\r\n  }),\r\n  '&:hover': { opacity: 0.72 }\r\n}));\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nUploadAvatar.propTypes = {\r\n  error: PropTypes.bool,\r\n  file: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\r\n  caption: PropTypes.node,\r\n  sx: PropTypes.object\r\n};\r\n\r\nexport default function UploadAvatar({ error, file, caption, sx, ...other }) {\r\n  const { getRootProps, getInputProps, isDragActive, isDragReject, fileRejections } = useDropzone({\r\n    multiple: false,\r\n    ...other\r\n  });\r\n\r\n  const ShowRejectionItems = () => (\r\n    <Paper\r\n      variant=\"outlined\"\r\n      sx={{\r\n        py: 1,\r\n        px: 2,\r\n        my: 2,\r\n        borderColor: 'error.light',\r\n        bgcolor: (theme) => alpha(theme.palette.error.main, 0.08)\r\n      }}\r\n    >\r\n      {fileRejections.map(({ file, errors }) => {\r\n        const { path, size } = file;\r\n        return (\r\n          <Box key={path} sx={{ my: 1 }}>\r\n            <Typography variant=\"subtitle2\" noWrap>\r\n              {path} - {fData(size)}\r\n            </Typography>\r\n            {errors.map((e) => (\r\n              <Typography key={e.code} variant=\"caption\" component=\"p\">\r\n                - {e.message}\r\n              </Typography>\r\n            ))}\r\n          </Box>\r\n        );\r\n      })}\r\n    </Paper>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <RootStyle sx={sx}>\r\n        <DropZoneStyle\r\n          {...getRootProps()}\r\n          sx={{\r\n            ...(isDragActive && { opacity: 0.72 }),\r\n            ...((isDragReject || error) && {\r\n              color: 'error.main',\r\n              borderColor: 'error.light',\r\n              bgcolor: 'error.lighter'\r\n            })\r\n          }}\r\n        >\r\n          <input {...getInputProps()} />\r\n\r\n          {file && (\r\n            <Box\r\n              component=\"img\"\r\n              alt=\"avatar\"\r\n              src={isString(file) ? file : file.preview}\r\n              sx={{ zIndex: 8, objectFit: 'cover' }}\r\n            />\r\n          )}\r\n\r\n          <PlaceholderStyle\r\n            className=\"placeholder\"\r\n            sx={{\r\n              ...(file && {\r\n                opacity: 0,\r\n                color: 'common.white',\r\n                bgcolor: 'grey.900',\r\n                '&:hover': { opacity: 0.72 }\r\n              })\r\n            }}\r\n          >\r\n            <Box component={Icon} icon={roundAddAPhoto} sx={{ width: 24, height: 24, mb: 1 }} />\r\n            <Typography variant=\"caption\">{file ? 'Update photo' : 'Upload photo'}</Typography>\r\n          </PlaceholderStyle>\r\n        </DropZoneStyle>\r\n      </RootStyle>\r\n\r\n      {caption}\r\n\r\n      {fileRejections.length > 0 && <ShowRejectionItems />}\r\n    </>\r\n  );\r\n}\r\n","import { isString } from 'lodash';\r\nimport PropTypes from 'prop-types';\r\n// material\r\nimport { Box, Typography, Link } from '@mui/material';\r\n//\r\nimport { MBreadcrumbs } from './@material-extend';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nHeaderBreadcrumbs.propTypes = {\r\n  links: PropTypes.array,\r\n  action: PropTypes.node,\r\n  heading: PropTypes.string.isRequired,\r\n  moreLink: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\r\n  sx: PropTypes.object\r\n};\r\n\r\nexport default function HeaderBreadcrumbs({ links, action, heading, moreLink = '' || [], sx, ...other }) {\r\n  return (\r\n    <Box sx={{ mb: 5, ...sx }}>\r\n      <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n        <Box sx={{ flexGrow: 1 }}>\r\n          <Typography variant=\"h4\" gutterBottom>\r\n            {heading}\r\n          </Typography>\r\n          <MBreadcrumbs links={links} {...other} />\r\n        </Box>\r\n\r\n        {action && <Box sx={{ flexShrink: 0 }}>{action}</Box>}\r\n      </Box>\r\n\r\n      <Box sx={{ mt: 2 }}>\r\n        {isString(moreLink) ? (\r\n          <Link href={moreLink} target=\"_blank\" variant=\"body2\">\r\n            {moreLink}\r\n          </Link>\r\n        ) : (\r\n          moreLink.map((href) => (\r\n            <Link noWrap key={href} href={href} variant=\"body2\" target=\"_blank\" sx={{ display: 'table' }}>\r\n              {href}\r\n            </Link>\r\n          ))\r\n        )}\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n","import PropTypes from 'prop-types';\r\nimport { Icon } from '@iconify/react';\r\nimport plusFill from '@iconify/icons-eva/plus-fill';\r\nimport editFill from '@iconify/icons-eva/edit-fill';\r\nimport trash2Fill from '@iconify/icons-eva/trash-2-fill';\r\n// material\r\nimport { Box, Card, Button, Typography, Stack, Paper } from '@mui/material';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nAccountBillingAddressBook.propTypes = {\r\n  addressBook: PropTypes.array\r\n};\r\n\r\nexport default function AccountBillingAddressBook({ addressBook }) {\r\n  return (\r\n    <Card sx={{ p: 3 }}>\r\n      <Stack spacing={3} alignItems=\"flex-start\">\r\n        <Typography variant=\"overline\" sx={{ color: 'text.secondary' }}>\r\n          Billing Info\r\n        </Typography>\r\n\r\n        {addressBook.map((address) => (\r\n          <Paper\r\n            key={address.id}\r\n            sx={{\r\n              p: 3,\r\n              width: 1,\r\n              bgcolor: 'background.neutral'\r\n            }}\r\n          >\r\n            <Typography variant=\"subtitle1\" gutterBottom>\r\n              {address.name}\r\n            </Typography>\r\n\r\n            <Typography variant=\"body2\" gutterBottom>\r\n              <Typography variant=\"body2\" component=\"span\" sx={{ color: 'text.secondary' }}>\r\n                Address: &nbsp;\r\n              </Typography>\r\n              {`${address.street}, ${address.city}, ${address.state}, ${address.country} ${address.zipCode}`}\r\n            </Typography>\r\n\r\n            <Typography variant=\"body2\" gutterBottom>\r\n              <Typography variant=\"body2\" component=\"span\" sx={{ color: 'text.secondary' }}>\r\n                Phone: &nbsp;\r\n              </Typography>\r\n              {address.phone}\r\n            </Typography>\r\n\r\n            <Box sx={{ mt: 1 }}>\r\n              <Button\r\n                color=\"error\"\r\n                size=\"small\"\r\n                startIcon={<Icon icon={trash2Fill} />}\r\n                onClick={() => {}}\r\n                sx={{ mr: 1 }}\r\n              >\r\n                Delete\r\n              </Button>\r\n              <Button size=\"small\" startIcon={<Icon icon={editFill} />} onClick={() => {}}>\r\n                Edit\r\n              </Button>\r\n            </Box>\r\n          </Paper>\r\n        ))}\r\n\r\n        <Button size=\"small\" startIcon={<Icon icon={plusFill} />}>\r\n          Add new address\r\n        </Button>\r\n      </Stack>\r\n    </Card>\r\n  );\r\n}\r\n","import PropTypes from 'prop-types';\r\nimport { Icon } from '@iconify/react';\r\nimport { Form, FormikProvider } from 'formik';\r\nimport plusFill from '@iconify/icons-eva/plus-fill';\r\nimport moreVerticalFill from '@iconify/icons-eva/more-vertical-fill';\r\n// material\r\nimport { Box, Paper, Stack, Card, Button, Collapse, TextField, IconButton, Typography } from '@mui/material';\r\nimport { LoadingButton } from '@mui/lab';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nAccountBillingPaymentMethod.propTypes = {\r\n  formik: PropTypes.object,\r\n  cards: PropTypes.array,\r\n  isOpen: PropTypes.bool,\r\n  onOpen: PropTypes.func,\r\n  onCancel: PropTypes.func\r\n};\r\n\r\nexport default function AccountBillingPaymentMethod({ formik, cards, isOpen, onOpen, onCancel }) {\r\n  const { errors, touched, isSubmitting, handleSubmit, getFieldProps } = formik;\r\n\r\n  return (\r\n    <Card sx={{ p: 3 }}>\r\n      <Typography variant=\"overline\" sx={{ mb: 3, display: 'block', color: 'text.secondary' }}>\r\n        Payment Method\r\n      </Typography>\r\n\r\n      <Stack spacing={2} direction={{ xs: 'column', md: 'row' }}>\r\n        {cards.map((card) => (\r\n          <Paper\r\n            key={card.id}\r\n            sx={{\r\n              p: 3,\r\n              width: 1,\r\n              position: 'relative',\r\n              border: (theme) => `solid 1px ${theme.palette.grey[500_32]}`\r\n            }}\r\n          >\r\n            <Box\r\n              component=\"img\"\r\n              alt=\"icon\"\r\n              src={card.cardType === 'master_card' ? '/static/icons/ic_mastercard.svg' : '/static/icons/ic_visa.svg'}\r\n              sx={{ mb: 1 }}\r\n            />\r\n            <Typography variant=\"subtitle2\">{card.cardNumber}</Typography>\r\n            <IconButton\r\n              sx={{\r\n                top: 8,\r\n                right: 8,\r\n                position: 'absolute'\r\n              }}\r\n            >\r\n              <Icon icon={moreVerticalFill} width={20} height={20} />\r\n            </IconButton>\r\n          </Paper>\r\n        ))}\r\n      </Stack>\r\n\r\n      <Box sx={{ mt: 3 }}>\r\n        <Button size=\"small\" startIcon={<Icon icon={plusFill} />} onClick={onOpen}>\r\n          Add new card\r\n        </Button>\r\n      </Box>\r\n\r\n      <Collapse in={isOpen}>\r\n        <Box\r\n          sx={{\r\n            padding: 3,\r\n            marginTop: 3,\r\n            borderRadius: 1,\r\n            bgcolor: 'background.neutral'\r\n          }}\r\n        >\r\n          <FormikProvider value={formik}>\r\n            <Form noValidate autoComplete=\"off\" onSubmit={handleSubmit}>\r\n              <Stack spacing={3}>\r\n                <Typography variant=\"subtitle1\">Add new card</Typography>\r\n\r\n                <Stack direction={{ xs: 'column', sm: 'row' }} spacing={2}>\r\n                  <TextField\r\n                    fullWidth\r\n                    label=\"Name on card\"\r\n                    {...getFieldProps('cardName')}\r\n                    error={Boolean(touched.cardName && errors.cardName)}\r\n                    helperText={touched.cardName && errors.cardName}\r\n                  />\r\n\r\n                  <TextField\r\n                    fullWidth\r\n                    label=\"Card number\"\r\n                    {...getFieldProps('cardNumber')}\r\n                    error={Boolean(touched.cardNumber && errors.cardNumber)}\r\n                    helperText={touched.cardNumber && errors.cardNumber}\r\n                  />\r\n                </Stack>\r\n\r\n                <Stack direction={{ xs: 'column', sm: 'row' }} spacing={2}>\r\n                  <TextField\r\n                    fullWidth\r\n                    label=\"Expiration date\"\r\n                    placeholder=\"MM/YY\"\r\n                    {...getFieldProps('cardExpired')}\r\n                    error={Boolean(touched.cardExpired && errors.cardExpired)}\r\n                    helperText={touched.cardExpired && errors.cardExpired}\r\n                  />\r\n\r\n                  <TextField\r\n                    fullWidth\r\n                    label=\"Cvv\"\r\n                    {...getFieldProps('cardCvv')}\r\n                    error={Boolean(touched.cardCvv && errors.cardCvv)}\r\n                    helperText={touched.cardCvv && errors.cardCvv}\r\n                  />\r\n                </Stack>\r\n\r\n                <Stack direction=\"row\" justifyContent=\"flex-end\" spacing={1.5}>\r\n                  <Button type=\"button\" color=\"inherit\" variant=\"outlined\" onClick={onCancel}>\r\n                    Cancel\r\n                  </Button>\r\n                  <LoadingButton type=\"submit\" variant=\"contained\" loading={isSubmitting}>\r\n                    Save Change\r\n                  </LoadingButton>\r\n                </Stack>\r\n              </Stack>\r\n            </Form>\r\n          </FormikProvider>\r\n        </Box>\r\n      </Collapse>\r\n    </Card>\r\n  );\r\n}\r\n","import PropTypes from 'prop-types';\r\nimport { Icon } from '@iconify/react';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\nimport arrowIosForwardFill from '@iconify/icons-eva/arrow-ios-forward-fill';\r\n// material\r\nimport { Link, Stack, Button, Typography } from '@mui/material';\r\n// utils\r\nimport { fDate } from '../../../../utils/formatTime';\r\nimport { fCurrency } from '../../../../utils/formatNumber';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nAccountBillingInvoiceHistory.propTypes = {\r\n  invoices: PropTypes.array\r\n};\r\n\r\nexport default function AccountBillingInvoiceHistory({ invoices }) {\r\n  return (\r\n    <Stack spacing={3} alignItems=\"flex-end\">\r\n      <Typography variant=\"subtitle1\" sx={{ width: 1 }}>\r\n        Invoice History\r\n      </Typography>\r\n\r\n      <Stack spacing={2} sx={{ width: 1 }}>\r\n        {invoices.map((invoice) => (\r\n          <Stack key={invoice.id} direction=\"row\" justifyContent=\"space-between\" sx={{ width: 1 }}>\r\n            <Typography variant=\"body2\" sx={{ minWidth: 160 }}>\r\n              {fDate(invoice.createdAt)}\r\n            </Typography>\r\n            <Typography variant=\"body2\">{fCurrency(invoice.price)}</Typography>\r\n            <Link component={RouterLink} to=\"#\">\r\n              PDF\r\n            </Link>\r\n          </Stack>\r\n        ))}\r\n      </Stack>\r\n\r\n      <Button size=\"small\" endIcon={<Icon icon={arrowIosForwardFill} />}>\r\n        All invoices\r\n      </Button>\r\n    </Stack>\r\n  );\r\n}\r\n","import { format, getTime, formatDistanceToNow } from 'date-fns';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport function fDate(date) {\r\n  return format(new Date(date), 'dd MMMM yyyy');\r\n}\r\n\r\nexport function fDateTime(date) {\r\n  return format(new Date(date), 'dd MMM yyyy HH:mm');\r\n}\r\n\r\nexport function fTimestamp(date) {\r\n  return getTime(new Date(date));\r\n}\r\n\r\nexport function fDateTimeSuffix(date) {\r\n  return format(new Date(date), 'dd/MM/yyyy hh:mm p');\r\n}\r\n\r\nexport function fToNow(date) {\r\n  return formatDistanceToNow(new Date(date), {\r\n    addSuffix: true\r\n  });\r\n}\r\n","import * as Yup from 'yup';\r\nimport { useFormik } from 'formik';\r\nimport { useState } from 'react';\r\nimport { useSnackbar } from 'notistack';\r\n// material\r\nimport { Box, Grid, Card, Button, Typography, Stack } from '@mui/material';\r\n// redux\r\nimport { useSelector } from '../../../../redux/store';\r\n// utils\r\nimport fakeRequest from '../../../../utils/fakeRequest';\r\n//\r\nimport AccountBillingAddressBook from './AccountBillingAddressBook';\r\nimport AccountBillingPaymentMethod from './AccountBillingPaymentMethod';\r\nimport AccountBillingInvoiceHistory from './AccountBillingInvoiceHistory';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function AccountBilling() {\r\n  const { cards, invoices, addressBook } = useSelector((state) => state.user);\r\n  const [open, setOpen] = useState(false);\r\n  const { enqueueSnackbar } = useSnackbar();\r\n\r\n  const NewCardSchema = Yup.object().shape({\r\n    cardName: Yup.string().required('Name is required'),\r\n    cardNumber: Yup.string().required('Card number is required'),\r\n    cardExpired: Yup.string().required('Card expired is required'),\r\n    cardCvv: Yup.string().required('Cvv is required')\r\n  });\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      cardName: '',\r\n      cardNumber: '',\r\n      cardExpired: '',\r\n      cardCvv: ''\r\n    },\r\n    validationSchema: NewCardSchema,\r\n    onSubmit: async (values, { setSubmitting, resetForm }) => {\r\n      await fakeRequest(500);\r\n      handleCancel();\r\n      resetForm();\r\n      setSubmitting(false);\r\n      alert(JSON.stringify(values, null, 2));\r\n      enqueueSnackbar('Add card success', { variant: 'success' });\r\n    }\r\n  });\r\n\r\n  const handleOpenAddCard = () => {\r\n    setOpen((prevOpen) => !prevOpen);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setOpen(false);\r\n    formik.resetForm();\r\n  };\r\n\r\n  return (\r\n    <Grid container spacing={5}>\r\n      <Grid item xs={12} md={8}>\r\n        <Stack spacing={3}>\r\n          <Card sx={{ p: 3 }}>\r\n            <Typography variant=\"overline\" sx={{ mb: 3, display: 'block', color: 'text.secondary' }}>\r\n              Your Plan\r\n            </Typography>\r\n            <Typography variant=\"h4\">Premium</Typography>\r\n            <Box\r\n              sx={{\r\n                mt: { xs: 2, sm: 0 },\r\n                position: { sm: 'absolute' },\r\n                top: { sm: 24 },\r\n                right: { sm: 24 }\r\n              }}\r\n            >\r\n              <Button size=\"small\" color=\"inherit\" variant=\"outlined\" sx={{ mr: 1 }}>\r\n                Cancel plan\r\n              </Button>\r\n              <Button size=\"small\" variant=\"outlined\">\r\n                Upgrade plan\r\n              </Button>\r\n            </Box>\r\n          </Card>\r\n\r\n          <AccountBillingPaymentMethod\r\n            cards={cards}\r\n            formik={formik}\r\n            isOpen={open}\r\n            onOpen={handleOpenAddCard}\r\n            onCancel={handleCancel}\r\n          />\r\n\r\n          <AccountBillingAddressBook addressBook={addressBook} />\r\n        </Stack>\r\n      </Grid>\r\n\r\n      <Grid item xs={12} md={4}>\r\n        <AccountBillingInvoiceHistory invoices={invoices} />\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n","import * as Yup from 'yup';\r\nimport { useSnackbar } from 'notistack';\r\nimport { useFormik, Form, FormikProvider } from 'formik';\r\n// material\r\nimport { Stack, Card, TextField } from '@mui/material';\r\nimport { LoadingButton } from '@mui/lab';\r\n// utils\r\nimport fakeRequest from '../../../../utils/fakeRequest';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function AccountChangePassword() {\r\n  const { enqueueSnackbar } = useSnackbar();\r\n\r\n  const ChangePassWordSchema = Yup.object().shape({\r\n    oldPassword: Yup.string().required('Old Password is required'),\r\n    newPassword: Yup.string().min(6, 'Password must be at least 6 characters').required('New Password is required'),\r\n    confirmNewPassword: Yup.string().oneOf([Yup.ref('newPassword'), null], 'Passwords must match')\r\n  });\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      oldPassword: '',\r\n      newPassword: '',\r\n      confirmNewPassword: ''\r\n    },\r\n    validationSchema: ChangePassWordSchema,\r\n    onSubmit: async (values, { setSubmitting }) => {\r\n      await fakeRequest(500);\r\n      setSubmitting(false);\r\n      alert(JSON.stringify(values, null, 2));\r\n      enqueueSnackbar('Save success', { variant: 'success' });\r\n    }\r\n  });\r\n\r\n  const { errors, touched, isSubmitting, handleSubmit, getFieldProps } = formik;\r\n\r\n  return (\r\n    <Card sx={{ p: 3 }}>\r\n      <FormikProvider value={formik}>\r\n        <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\r\n          <Stack spacing={3} alignItems=\"flex-end\">\r\n            <TextField\r\n              {...getFieldProps('oldPassword')}\r\n              fullWidth\r\n              autoComplete=\"on\"\r\n              type=\"password\"\r\n              label=\"Old Password\"\r\n              error={Boolean(touched.oldPassword && errors.oldPassword)}\r\n              helperText={touched.oldPassword && errors.oldPassword}\r\n            />\r\n\r\n            <TextField\r\n              {...getFieldProps('newPassword')}\r\n              fullWidth\r\n              autoComplete=\"on\"\r\n              type=\"password\"\r\n              label=\"New Password\"\r\n              error={Boolean(touched.newPassword && errors.newPassword)}\r\n              helperText={(touched.newPassword && errors.newPassword) || 'Password must be minimum 6+'}\r\n            />\r\n\r\n            <TextField\r\n              {...getFieldProps('confirmNewPassword')}\r\n              fullWidth\r\n              autoComplete=\"on\"\r\n              type=\"password\"\r\n              label=\"Confirm New Password\"\r\n              error={Boolean(touched.confirmNewPassword && errors.confirmNewPassword)}\r\n              helperText={touched.confirmNewPassword && errors.confirmNewPassword}\r\n            />\r\n\r\n            <LoadingButton type=\"submit\" variant=\"contained\" loading={isSubmitting}>\r\n              Save Changes\r\n            </LoadingButton>\r\n          </Stack>\r\n        </Form>\r\n      </FormikProvider>\r\n    </Card>\r\n  );\r\n}\r\n","import { isString } from \"lodash\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Icon } from \"@iconify/react\";\r\nimport { useDropzone } from \"react-dropzone\";\r\nimport fileFill from \"@iconify/icons-eva/file-fill\";\r\nimport closeFill from \"@iconify/icons-eva/close-fill\";\r\nimport { motion, AnimatePresence } from \"framer-motion\";\r\n// material\r\nimport { alpha, styled } from \"@mui/material/styles\";\r\nimport {\r\n  Box,\r\n  List,\r\n  Stack,\r\n  Paper,\r\n  Button,\r\n  ListItem,\r\n  Typography,\r\n  ListItemIcon,\r\n  ListItemText,\r\n  ListItemSecondaryAction,\r\n} from \"@mui/material\";\r\n// utils\r\nimport { fData } from \"../../utils/formatNumber\";\r\n//\r\nimport { MIconButton } from \"../@material-extend\";\r\nimport { varFadeInRight } from \"../animate\";\r\nimport { UploadIllustration } from \"../../assets\";\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nconst DropZoneStyle = styled(\"div\")(({ theme }) => ({\r\n  outline: \"none\",\r\n  display: \"flex\",\r\n  textAlign: \"center\",\r\n  alignItems: \"center\",\r\n  flexDirection: \"column\",\r\n  justifyContent: \"center\",\r\n  padding: theme.spacing(5, 1),\r\n  borderRadius: theme.shape.borderRadius,\r\n  backgroundColor: theme.palette.background.neutral,\r\n  border: `1px dashed ${theme.palette.grey[500_32]}`,\r\n  \"&:hover\": { opacity: 0.72, cursor: \"pointer\" },\r\n  [theme.breakpoints.up(\"md\")]: { textAlign: \"left\", flexDirection: \"row\" },\r\n}));\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nUploadMultiFile.propTypes = {\r\n  error: PropTypes.bool,\r\n  showPreview: PropTypes.bool,\r\n  files: PropTypes.array,\r\n  onRemove: PropTypes.func,\r\n  onRemoveAll: PropTypes.func,\r\n  sx: PropTypes.object,\r\n};\r\n\r\nexport default function UploadMultiFile({\r\n  error,\r\n  showPreview = false,\r\n  title,\r\n  message,\r\n  files,\r\n  onRemove,\r\n  onRemoveAll,\r\n  onUpload,\r\n  sx,\r\n  ...other\r\n}) {\r\n  const hasFile = files.length > 0;\r\n\r\n  const {\r\n    getRootProps,\r\n    getInputProps,\r\n    isDragActive,\r\n    isDragReject,\r\n    fileRejections,\r\n  } = useDropzone({\r\n    ...other,\r\n  });\r\n\r\n  const ShowRejectionItems = () => (\r\n    <Paper\r\n      variant=\"outlined\"\r\n      sx={{\r\n        py: 1,\r\n        px: 2,\r\n        mt: 3,\r\n        borderColor: \"error.light\",\r\n        bgcolor: (theme) => alpha(theme.palette.error.main, 0.08),\r\n      }}\r\n    >\r\n      {fileRejections.map(({ file, errors }) => {\r\n        const { path, size } = file;\r\n        return (\r\n          <Box key={path} sx={{ my: 1 }}>\r\n            <Typography variant=\"subtitle2\" noWrap>\r\n              {path} - {fData(size)}\r\n            </Typography>\r\n            {errors.map((e) => (\r\n              <Typography key={e.code} variant=\"caption\" component=\"p\">\r\n                - {e.message}\r\n              </Typography>\r\n            ))}\r\n          </Box>\r\n        );\r\n      })}\r\n    </Paper>\r\n  );\r\n\r\n  return (\r\n    <Box sx={{ width: \"100%\", ...sx }}>\r\n      <DropZoneStyle\r\n        {...getRootProps()}\r\n        sx={{\r\n          ...(isDragActive && { opacity: 0.72 }),\r\n          ...((isDragReject || error) && {\r\n            color: \"error.main\",\r\n            borderColor: \"error.light\",\r\n            bgcolor: \"error.lighter\",\r\n          }),\r\n        }}\r\n      >\r\n        <input {...getInputProps()} />\r\n\r\n        <UploadIllustration sx={{ width: 220 }} />\r\n\r\n        <Box sx={{ p: 3, ml: { md: 2 } }}>\r\n          <Typography gutterBottom variant=\"h5\">\r\n            {title || `Suelte o seleccione los archivos`}\r\n          </Typography>\r\n\r\n          <Typography variant=\"body2\" sx={{ color: \"text.secondary\" }}>\r\n            {message ||\r\n              `Arrastre y suelte los achivos o haga click en esta área para seleccionarlos desde su equipo`}\r\n          </Typography>\r\n        </Box>\r\n      </DropZoneStyle>\r\n\r\n      {fileRejections.length > 0 && <ShowRejectionItems />}\r\n\r\n      <List disablePadding sx={{ ...(hasFile && { my: 3 }) }}>\r\n        <AnimatePresence>\r\n          {files.map((file) => {\r\n            const { name, size, preview } = file;\r\n            const key = isString(file) ? file : name;\r\n\r\n            if (showPreview) {\r\n              return (\r\n                <ListItem\r\n                  key={key}\r\n                  component={motion.div}\r\n                  {...varFadeInRight}\r\n                  sx={{\r\n                    p: 0,\r\n                    m: 0.5,\r\n                    width: 120,\r\n                    height: 120,\r\n                    borderRadius: 1.5,\r\n                    overflow: \"hidden\",\r\n                    position: \"relative\",\r\n                    display: \"inline-flex\",\r\n                  }}\r\n                >\r\n                  <Paper\r\n                    variant=\"outlined\"\r\n                    component=\"img\"\r\n                    src={isString(file) ? file : preview}\r\n                    sx={{\r\n                      width: \"100%\",\r\n                      height: \"100%\",\r\n                      objectFit: \"cover\",\r\n                      position: \"absolute\",\r\n                    }}\r\n                  />\r\n                  <Box sx={{ top: 6, right: 6, position: \"absolute\" }}>\r\n                    <MIconButton\r\n                      size=\"small\"\r\n                      onClick={() => onRemove(file)}\r\n                      sx={{\r\n                        p: \"2px\",\r\n                        color: \"common.white\",\r\n                        bgcolor: (theme) =>\r\n                          alpha(theme.palette.grey[900], 0.72),\r\n                        \"&:hover\": {\r\n                          bgcolor: (theme) =>\r\n                            alpha(theme.palette.grey[900], 0.48),\r\n                        },\r\n                      }}\r\n                    >\r\n                      <Icon icon={closeFill} />\r\n                    </MIconButton>\r\n                  </Box>\r\n                </ListItem>\r\n              );\r\n            }\r\n\r\n            return (\r\n              <ListItem\r\n                key={key}\r\n                component={motion.div}\r\n                {...varFadeInRight}\r\n                sx={{\r\n                  my: 1,\r\n                  py: 0.75,\r\n                  px: 2,\r\n                  borderRadius: 1,\r\n                  border: (theme) => `solid 1px ${theme.palette.divider}`,\r\n                  bgcolor: \"background.paper\",\r\n                }}\r\n              >\r\n                <ListItemIcon>\r\n                  <Icon icon={fileFill} width={28} height={28} />\r\n                </ListItemIcon>\r\n                <ListItemText\r\n                  primary={isString(file) ? file : name}\r\n                  secondary={isString(file) ? \"\" : fData(size)}\r\n                  primaryTypographyProps={{ variant: \"subtitle2\" }}\r\n                  secondaryTypographyProps={{ variant: \"caption\" }}\r\n                />\r\n                <ListItemSecondaryAction>\r\n                  <MIconButton\r\n                    edge=\"end\"\r\n                    size=\"small\"\r\n                    onClick={() => onRemove(file)}\r\n                  >\r\n                    <Icon icon={closeFill} />\r\n                  </MIconButton>\r\n                </ListItemSecondaryAction>\r\n              </ListItem>\r\n            );\r\n          })}\r\n        </AnimatePresence>\r\n      </List>\r\n\r\n      {hasFile && (\r\n        <Stack direction=\"row\" justifyContent=\"flex-end\">\r\n          <Button onClick={onRemoveAll} sx={{ mr: 1.5 }}>\r\n            Eliminar todos\r\n          </Button>\r\n          <Button variant=\"contained\" onClick={onUpload}>\r\n            Cargar Archivos\r\n          </Button>\r\n        </Stack>\r\n      )}\r\n    </Box>\r\n  );\r\n}\r\n","import { isString } from 'lodash';\r\nimport PropTypes from 'prop-types';\r\nimport { useDropzone } from 'react-dropzone';\r\n// material\r\nimport { alpha, styled } from '@mui/material/styles';\r\nimport { Paper, Box, Typography } from '@mui/material';\r\n// utils\r\nimport { fData } from '../../utils/formatNumber';\r\n//\r\nimport { UploadIllustration } from '../../assets';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nconst DropZoneStyle = styled('div')(({ theme }) => ({\r\n  outline: 'none',\r\n  display: 'flex',\r\n  overflow: 'hidden',\r\n  textAlign: 'center',\r\n  position: 'relative',\r\n  alignItems: 'center',\r\n  flexDirection: 'column',\r\n  justifyContent: 'center',\r\n  padding: theme.spacing(5, 0),\r\n  borderRadius: theme.shape.borderRadius,\r\n  transition: theme.transitions.create('padding'),\r\n  backgroundColor: theme.palette.background.neutral,\r\n  border: `1px dashed ${theme.palette.grey[500_32]}`,\r\n  '&:hover': {\r\n    opacity: 0.72,\r\n    cursor: 'pointer'\r\n  },\r\n  [theme.breakpoints.up('md')]: { textAlign: 'left', flexDirection: 'row' }\r\n}));\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nUploadSingleFile.propTypes = {\r\n  error: PropTypes.bool,\r\n  file: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\r\n  sx: PropTypes.object\r\n};\r\n\r\nexport default function UploadSingleFile({ error, file, sx, ...other }) {\r\n  const { getRootProps, getInputProps, isDragActive, isDragReject, fileRejections } = useDropzone({\r\n    multiple: false,\r\n    ...other\r\n  });\r\n\r\n  const ShowRejectionItems = () => (\r\n    <Paper\r\n      variant=\"outlined\"\r\n      sx={{\r\n        py: 1,\r\n        px: 2,\r\n        mt: 3,\r\n        borderColor: 'error.light',\r\n        bgcolor: (theme) => alpha(theme.palette.error.main, 0.08)\r\n      }}\r\n    >\r\n      {fileRejections.map(({ file, errors }) => {\r\n        const { path, size } = file;\r\n        return (\r\n          <Box key={path} sx={{ my: 1 }}>\r\n            <Typography variant=\"subtitle2\" noWrap>\r\n              {path} - {fData(size)}\r\n            </Typography>\r\n            {errors.map((e) => (\r\n              <Typography key={e.code} variant=\"caption\" component=\"p\">\r\n                - {e.message}\r\n              </Typography>\r\n            ))}\r\n          </Box>\r\n        );\r\n      })}\r\n    </Paper>\r\n  );\r\n\r\n  return (\r\n    <Box sx={{ width: '100%', ...sx }}>\r\n      <DropZoneStyle\r\n        {...getRootProps()}\r\n        sx={{\r\n          ...(isDragActive && { opacity: 0.72 }),\r\n          ...((isDragReject || error) && {\r\n            color: 'error.main',\r\n            borderColor: 'error.light',\r\n            bgcolor: 'error.lighter'\r\n          }),\r\n          ...(file && { padding: '12% 0' })\r\n        }}\r\n      >\r\n        <input {...getInputProps()} />\r\n\r\n        <UploadIllustration sx={{ width: 220 }} />\r\n\r\n        <Box sx={{ p: 3, ml: { md: 2 } }}>\r\n          <Typography gutterBottom variant=\"h5\">\r\n            Drop or Select file\r\n          </Typography>\r\n\r\n          <Typography variant=\"body2\" sx={{ color: 'text.secondary' }}>\r\n            Drop files here or click&nbsp;\r\n            <Typography variant=\"body2\" component=\"span\" sx={{ color: 'primary.main', textDecoration: 'underline' }}>\r\n              browse\r\n            </Typography>\r\n            &nbsp;thorough your machine\r\n          </Typography>\r\n        </Box>\r\n\r\n        {file && (\r\n          <Box\r\n            component=\"img\"\r\n            alt=\"file preview\"\r\n            src={isString(file) ? file : file.preview}\r\n            sx={{\r\n              top: 8,\r\n              borderRadius: 1,\r\n              objectFit: 'cover',\r\n              position: 'absolute',\r\n              width: 'calc(100% - 16px)',\r\n              height: 'calc(100% - 16px)'\r\n            }}\r\n          />\r\n        )}\r\n      </DropZoneStyle>\r\n\r\n      {fileRejections.length > 0 && <ShowRejectionItems />}\r\n    </Box>\r\n  );\r\n}\r\n","import * as Yup from 'yup';\r\nimport { useSnackbar } from 'notistack';\r\nimport { useCallback } from 'react';\r\nimport { Form, FormikProvider, useFormik } from 'formik';\r\n// material\r\nimport { Box, Grid, Card, Stack, Switch, TextField, FormControlLabel, Typography, FormHelperText } from '@mui/material';\r\nimport { LoadingButton } from '@mui/lab';\r\n// hooks\r\nimport useAuth from '../../../../hooks/useAuth';\r\nimport useIsMountedRef from '../../../../hooks/useIsMountedRef';\r\nimport { UploadAvatar } from '../../../upload';\r\n// utils\r\nimport { fData } from '../../../../utils/formatNumber';\r\n//\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function AccountGeneral() {\r\n  const isMountedRef = useIsMountedRef();\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const { user, updateProfile } = useAuth();\r\n\r\n  const UpdateUserSchema = Yup.object().shape({\r\n    displayName: Yup.string().required('Name is required')\r\n  });\r\n\r\n  const formik = useFormik({\r\n    enableReinitialize: true,\r\n    initialValues: {\r\n      displayName: user.displayName || '',\r\n      email: user.email,\r\n      photoURL: user.photoURL,\r\n      phoneNumber: user.phoneNumber,\r\n      country: user.country,\r\n      address: user.address,\r\n      state: user.state,\r\n      city: user.city,\r\n      zipCode: user.zipCode,\r\n      about: user.about,\r\n      isPublic: user.isPublic\r\n    },\r\n\r\n    validationSchema: UpdateUserSchema,\r\n    onSubmit: async (values, { setErrors, setSubmitting }) => {\r\n      try {\r\n        await updateProfile({ ...values });\r\n        enqueueSnackbar('Update success', { variant: 'success' });\r\n        if (isMountedRef.current) {\r\n          setSubmitting(false);\r\n        }\r\n      } catch (error) {\r\n        if (isMountedRef.current) {\r\n          setErrors({ afterSubmit: error.code });\r\n          setSubmitting(false);\r\n        }\r\n      }\r\n    }\r\n  });\r\n\r\n  const { values, errors, touched, isSubmitting, handleSubmit, getFieldProps, setFieldValue } = formik;\r\n\r\n  const handleDrop = useCallback(\r\n    (acceptedFiles) => {\r\n      const file = acceptedFiles[0];\r\n      if (file) {\r\n        setFieldValue('photoURL', {\r\n          ...file,\r\n          preview: URL.createObjectURL(file)\r\n        });\r\n      }\r\n    },\r\n    [setFieldValue]\r\n  );\r\n\r\n  return (\r\n    <FormikProvider value={formik}>\r\n      <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\r\n        <Grid container spacing={3}>\r\n          <Grid item xs={12} md={4}>\r\n            <Card sx={{ py: 10, px: 3, textAlign: 'center' }}>\r\n              <UploadAvatar\r\n                accept=\"image/*\"\r\n                file={values.photoURL}\r\n                maxSize={3145728}\r\n                onDrop={handleDrop}\r\n                error={Boolean(touched.photoURL && errors.photoURL)}\r\n                caption={\r\n                  <Typography\r\n                    variant=\"caption\"\r\n                    sx={{\r\n                      mt: 2,\r\n                      mx: 'auto',\r\n                      display: 'block',\r\n                      textAlign: 'center',\r\n                      color: 'text.secondary'\r\n                    }}\r\n                  >\r\n                    Allowed *.jpeg, *.jpg, *.png, *.gif\r\n                    <br /> max size of {fData(3145728)}\r\n                  </Typography>\r\n                }\r\n              />\r\n\r\n              <FormHelperText error sx={{ px: 2, textAlign: 'center' }}>\r\n                {touched.photoURL && errors.photoURL}\r\n              </FormHelperText>\r\n\r\n              <FormControlLabel\r\n                control={<Switch {...getFieldProps('isPublic')} color=\"primary\" />}\r\n                labelPlacement=\"start\"\r\n                label=\"Public Profile\"\r\n                sx={{ mt: 5 }}\r\n              />\r\n            </Card>\r\n          </Grid>\r\n\r\n          <Grid item xs={12} md={8}>\r\n            <Card sx={{ p: 3 }}>\r\n              <Stack spacing={{ xs: 2, md: 3 }}>\r\n                <Stack direction={{ xs: 'column', md: 'row' }} spacing={2}>\r\n                  <TextField fullWidth label=\"Name\" {...getFieldProps('displayName')} />\r\n                  <TextField fullWidth disabled label=\"Email Address\" {...getFieldProps('email')} />\r\n                </Stack>\r\n\r\n                <Stack direction={{ xs: 'column', md: 'row' }} spacing={2}>\r\n                  <TextField fullWidth label=\"Phone Number\" {...getFieldProps('phoneNumber')} />\r\n                  <TextField fullWidth label=\"Address\" {...getFieldProps('address')} />\r\n                </Stack>\r\n\r\n                <Stack direction={{ xs: 'column', md: 'row' }} spacing={2}>\r\n                  <TextField\r\n                    select\r\n                    fullWidth\r\n                    label=\"Country\"\r\n                    placeholder=\"Country\"\r\n                    {...getFieldProps('country')}\r\n                    SelectProps={{ native: true }}\r\n                    error={Boolean(touched.country && errors.country)}\r\n                    helperText={touched.country && errors.country}\r\n                  >\r\n                    <option value=\"\" />\r\n                    {[].map((option) => (\r\n                      <option key={option.code} value={option.label}>\r\n                        {option.label}\r\n                      </option>\r\n                    ))}\r\n                  </TextField>\r\n                  <TextField fullWidth label=\"State/Region\" {...getFieldProps('state')} />\r\n                </Stack>\r\n\r\n                <Stack direction={{ xs: 'column', md: 'row' }} spacing={2}>\r\n                  <TextField fullWidth label=\"City\" {...getFieldProps('city')} />\r\n                  <TextField fullWidth label=\"Zip/Code\" {...getFieldProps('zipCode')} />\r\n                </Stack>\r\n\r\n                <TextField {...getFieldProps('about')} fullWidth multiline minRows={4} maxRows={4} label=\"About\" />\r\n              </Stack>\r\n\r\n              <Box sx={{ mt: 3, display: 'flex', justifyContent: 'flex-end' }}>\r\n                <LoadingButton type=\"submit\" variant=\"contained\" loading={isSubmitting}>\r\n                  Save Changes\r\n                </LoadingButton>\r\n              </Box>\r\n            </Card>\r\n          </Grid>\r\n        </Grid>\r\n      </Form>\r\n    </FormikProvider>\r\n  );\r\n}\r\n","import { useSnackbar } from 'notistack';\r\nimport { useFormik, Form, FormikProvider } from 'formik';\r\n// material\r\nimport { Card, Stack, Switch, Typography, FormControlLabel } from '@mui/material';\r\nimport { LoadingButton } from '@mui/lab';\r\n// redux\r\nimport { useSelector } from '../../../../redux/store';\r\n// utils\r\nimport fakeRequest from '../../../../utils/fakeRequest';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nconst ACTIVITY_OPTIONS = [\r\n  {\r\n    value: 'activityComments',\r\n    label: 'Email me when someone comments onmy article'\r\n  },\r\n  {\r\n    value: 'activityAnswers',\r\n    label: 'Email me when someone answers on my form'\r\n  },\r\n  { value: 'activityFollows', label: 'Email me hen someone follows me' }\r\n];\r\n\r\nconst APPLICATION_OPTIONS = [\r\n  { value: 'applicationNews', label: 'News and announcements' },\r\n  { value: 'applicationProduct', label: 'Weekly product updates' },\r\n  { value: 'applicationBlog', label: 'Weekly blog digest' }\r\n];\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function AccountNotifications() {\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const { notifications } = useSelector((state) => state.user);\r\n\r\n  const formik = useFormik({\r\n    enableReinitialize: true,\r\n    initialValues: {\r\n      activityComments: notifications.activityComments,\r\n      activityAnswers: notifications.activityAnswers,\r\n      activityFollows: notifications.activityFollows,\r\n      applicationNews: notifications.applicationNews,\r\n      applicationProduct: notifications.applicationProduct,\r\n      applicationBlog: notifications.applicationBlog\r\n    },\r\n    onSubmit: async (values, { setSubmitting }) => {\r\n      await fakeRequest(500);\r\n      setSubmitting(false);\r\n      alert(JSON.stringify(values, null, 2));\r\n      enqueueSnackbar('Save success', { variant: 'success' });\r\n    }\r\n  });\r\n\r\n  const { values, isSubmitting, handleSubmit, getFieldProps } = formik;\r\n\r\n  return (\r\n    <Card sx={{ p: 3 }}>\r\n      <FormikProvider value={formik}>\r\n        <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\r\n          <Stack spacing={3} alignItems=\"flex-end\">\r\n            <Stack spacing={2} sx={{ width: 1 }}>\r\n              <Typography variant=\"overline\" sx={{ color: 'text.secondary' }}>\r\n                Activity\r\n              </Typography>\r\n              <Stack spacing={1} alignItems=\"flex-start\">\r\n                {ACTIVITY_OPTIONS.map((activity) => (\r\n                  <FormControlLabel\r\n                    key={activity.value}\r\n                    control={<Switch {...getFieldProps(activity.value)} checked={values[activity.value]} />}\r\n                    label={activity.label}\r\n                    sx={{ mx: 0 }}\r\n                  />\r\n                ))}\r\n              </Stack>\r\n            </Stack>\r\n\r\n            <Stack spacing={2} sx={{ width: 1 }}>\r\n              <Typography variant=\"overline\" sx={{ color: 'text.secondary' }}>\r\n                Application\r\n              </Typography>\r\n              <Stack spacing={1} alignItems=\"flex-start\">\r\n                {APPLICATION_OPTIONS.map((item) => (\r\n                  <FormControlLabel\r\n                    key={item.value}\r\n                    control={<Switch {...getFieldProps(item.value)} checked={values[item.value]} />}\r\n                    label={item.label}\r\n                    sx={{ mx: 0 }}\r\n                  />\r\n                ))}\r\n              </Stack>\r\n            </Stack>\r\n\r\n            <LoadingButton type=\"submit\" variant=\"contained\" loading={isSubmitting}>\r\n              Save Changes\r\n            </LoadingButton>\r\n          </Stack>\r\n        </Form>\r\n      </FormikProvider>\r\n    </Card>\r\n  );\r\n}\r\n","import { Icon } from '@iconify/react';\r\nimport { useState, useEffect } from 'react';\r\nimport bellFill from '@iconify/icons-eva/bell-fill';\r\nimport roundVpnKey from '@iconify/icons-ic/round-vpn-key';\r\nimport roundReceipt from '@iconify/icons-ic/round-receipt';\r\nimport roundAccountBox from '@iconify/icons-ic/round-account-box';\r\n// material\r\nimport { Container, Tab, Box, Tabs, Stack } from '@mui/material';\r\n// redux\r\nimport { useDispatch } from 'redux/store';\r\nimport { getCards, getProfile, getInvoices, getAddressBook, getNotifications } from 'redux/slices/user';\r\n// hooks\r\nimport useSettings from 'hooks/useSettings';\r\n// components\r\nimport Page from 'components/Page';\r\nimport HeaderBreadcrumbs from 'components/HeaderBreadcrumbs';\r\nimport {\r\n  AccountGeneral,\r\n  AccountBilling,\r\n  AccountNotifications,\r\n  AccountChangePassword\r\n} from 'components/_dashboard/user/account';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function UserAccount() {\r\n  const { themeStretch } = useSettings();\r\n  const [currentTab, setCurrentTab] = useState('general');\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    dispatch(getCards());\r\n    dispatch(getAddressBook());\r\n    dispatch(getInvoices());\r\n    dispatch(getNotifications());\r\n    dispatch(getProfile());\r\n  }, [dispatch]);\r\n\r\n  const ACCOUNT_TABS = [\r\n    {\r\n      value: 'general',\r\n      icon: <Icon icon={roundAccountBox} width={20} height={20} />,\r\n      component: <AccountGeneral />\r\n    },\r\n    {\r\n      value: 'billing',\r\n      icon: <Icon icon={roundReceipt} width={20} height={20} />,\r\n      component: <AccountBilling />\r\n    },\r\n    {\r\n      value: 'notifications',\r\n      icon: <Icon icon={bellFill} width={20} height={20} />,\r\n      component: <AccountNotifications />\r\n    },\r\n    {\r\n      value: 'change_password',\r\n      icon: <Icon icon={roundVpnKey} width={20} height={20} />,\r\n      component: <AccountChangePassword />\r\n    }\r\n  ];\r\n\r\n  const handleChangeTab = (event, newValue) => {\r\n    setCurrentTab(newValue);\r\n  };\r\n\r\n  return (\r\n    <Page title=\"User: Account Settings | Minimal-UI\">\r\n      <Container maxWidth={themeStretch ? false : 'lg'}>\r\n        <HeaderBreadcrumbs heading=\"Account\" links={[{ name: 'Account Settings' }]} />\r\n\r\n        <Stack spacing={5}>\r\n          <Tabs\r\n            value={currentTab}\r\n            scrollButtons=\"auto\"\r\n            variant=\"scrollable\"\r\n            allowScrollButtonsMobile\r\n            onChange={handleChangeTab}\r\n          >\r\n            {ACCOUNT_TABS.map((tab) => (\r\n              <Tab disableRipple key={tab.value} label={tab.value} icon={tab.icon} value={tab.value} />\r\n            ))}\r\n          </Tabs>\r\n\r\n          {ACCOUNT_TABS.map((tab) => {\r\n            const isMatched = tab.value === currentTab;\r\n            return isMatched && <Box key={tab.value}>{tab.component}</Box>;\r\n          })}\r\n        </Stack>\r\n      </Container>\r\n    </Page>\r\n  );\r\n}\r\n","import { replace } from 'lodash';\r\nimport numeral from 'numeral';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport function fCurrency(number) {\r\n  return numeral(number).format(Number.isInteger(number) ? '$0,0' : '$0,0.00');\r\n}\r\n\r\nexport function fPercent(number) {\r\n  return numeral(number / 100).format('0.0%');\r\n}\r\n\r\nexport function fNumber(number) {\r\n  return numeral(number).format();\r\n}\r\n\r\nexport function fShortenNumber(number) {\r\n  return replace(numeral(number).format('0.00a'), '.00', '');\r\n}\r\n\r\nexport function fData(number) {\r\n  return numeral(number).format('0.0 b');\r\n}\r\n"],"names":["RootStyle","styled","_ref","theme","width","height","margin","borderRadius","padding","spacing","border","concat","palette","grey","DropZoneStyle","zIndex","outline","display","overflow","position","alignItems","justifyContent","cursor","PlaceholderStyle","_ref2","flexDirection","color","text","secondary","backgroundColor","background","neutral","transition","transitions","create","easing","easeInOut","duration","shorter","opacity","UploadAvatar","_ref3","error","file","caption","sx","other","getRootProps","getInputProps","isDragActive","isDragReject","fileRejections","useDropzone","multiple","ShowRejectionItems","_jsx","Paper","variant","py","px","my","borderColor","bgcolor","alpha","main","children","map","_ref4","errors","path","size","_jsxs","Box","Typography","noWrap","fData","e","component","message","code","_Fragment","alt","src","isString","preview","objectFit","className","Icon","icon","roundAddAPhoto","mb","length","HeaderBreadcrumbs","links","action","heading","moreLink","flexGrow","gutterBottom","MBreadcrumbs","flexShrink","mt","Link","href","target","AccountBillingAddressBook","addressBook","Card","p","Stack","address","name","street","city","state","country","zipCode","phone","Button","startIcon","trash2Fill","onClick","mr","editFill","id","plusFill","AccountBillingPaymentMethod","formik","cards","isOpen","onOpen","onCancel","touched","isSubmitting","handleSubmit","getFieldProps","direction","xs","md","card","cardType","cardNumber","IconButton","top","right","moreVerticalFill","Collapse","in","marginTop","FormikProvider","value","Form","noValidate","autoComplete","onSubmit","sm","TextField","fullWidth","label","Boolean","cardName","helperText","placeholder","cardExpired","cardCvv","type","LoadingButton","loading","AccountBillingInvoiceHistory","invoices","invoice","minWidth","date","createdAt","format","Date","fCurrency","price","RouterLink","to","endIcon","arrowIosForwardFill","AccountBilling","useSelector","user","open","setOpen","useState","enqueueSnackbar","useSnackbar","NewCardSchema","Yup","shape","required","useFormik","initialValues","validationSchema","async","values","setSubmitting","resetForm","fakeRequest","handleCancel","alert","JSON","stringify","Grid","container","item","handleOpenAddCard","prevOpen","AccountChangePassword","ChangePassWordSchema","oldPassword","newPassword","min","confirmNewPassword","oneOf","textAlign","breakpoints","up","AccountGeneral","isMountedRef","useIsMountedRef","updateProfile","useAuth","UpdateUserSchema","displayName","enableReinitialize","email","photoURL","phoneNumber","about","isPublic","setErrors","current","afterSubmit","setFieldValue","handleDrop","useCallback","acceptedFiles","URL","createObjectURL","accept","maxSize","onDrop","mx","FormHelperText","FormControlLabel","control","Switch","labelPlacement","disabled","select","SelectProps","native","option","multiline","minRows","maxRows","ACTIVITY_OPTIONS","APPLICATION_OPTIONS","AccountNotifications","notifications","activityComments","activityAnswers","activityFollows","applicationNews","applicationProduct","applicationBlog","activity","checked","UserAccount","themeStretch","useSettings","currentTab","setCurrentTab","dispatch","useDispatch","useEffect","getCards","getAddressBook","getInvoices","getNotifications","getProfile","ACCOUNT_TABS","roundAccountBox","roundReceipt","bellFill","roundVpnKey","Page","title","Container","maxWidth","Tabs","scrollButtons","allowScrollButtonsMobile","onChange","handleChangeTab","event","newValue","tab","Tab","disableRipple","number","numeral","Number","isInteger","fPercent","fNumber"],"sourceRoot":""}