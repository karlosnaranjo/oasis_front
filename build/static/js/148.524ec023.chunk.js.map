{"version":3,"file":"static/js/148.524ec023.chunk.js","mappings":"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","sources":["pages/transactions/evolutions/Form.js","pages/transactions/evolutions/index.js","../node_modules/@mui/system/esm/Box/boxClasses.js","../node_modules/@mui/system/esm/Box/Box.js"],"sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Grid, } from '@mui/material';\nimport { Form, Field, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { TextBase, SelectBase, TextAreaBase, Loader } from 'components';\nimport endPoints from 'endPoints/endPoints';\nimport messages from 'constantes/messages';\nimport { withApi, withNotification } from 'wrappers';\nimport { FormButtons } from 'components/controls';\nimport { useNavigate } from 'react-router';\nimport { Box } from '@mui/system';\nimport { getStatusLabel, getStatusValue } from 'utils/formHelpers';\nimport DatePickerBase from 'components/pickers/DatePickerBase';\n\nconst validationSchema = Yup.object({\n    code: Yup.string().required('Codigo es requerido'),\n    patient_id: Yup.string().required('Paciente es requerido'),\n    employee_id: Yup.string().required('Empleado es requerido'),\n    date_of_evolution: Yup.string().required('Fecha de registro es requerido'),\n    area: Yup.string().required('Area que registra evolucion es requerido'),\n    comments: Yup.string().required('Notas es requerido'),\n    status: Yup.string().required('Estado es requerido'),\n\n});\n\nconst urlBase = endPoints.transactions.evolutions.base;\n\nlet patientList = [];\nlet employeeList = [];\n\n\nconst baseUrl = '/app/general/transactions/evolutions';\n\nconst initState = {\n    code: false,\n    patient_id: null,\n    employee_id: null,\n    date_of_evolution: false,\n    area: false,\n    comments: false,\n    status: 1,\n\n};\n\nconst selectMap = (data) => {\n    return data.map((row) => ({ value: row.id, label: row.name }));\n};\n\nconst EvolutionsForm = ({\n    id,\n    doGet,\n    genericException,\n    appSuccess,\n    doPost,\n    doPut,\n    appInfo,\n    setEditable,\n    viewMode,\n    refresh,\n}) => {\n    const navigate = useNavigate();\n    const [state, setState] = useState(initState);\n    const [isLoading, setLoading] = useState(true);\n\n    // Call to API for load form values\n    const loadFields = useCallback(async () => {\n        const params = {\n            url: endPoints.transactions.evolutions.initForm,\n            data: id ? { id: id } : {}\n        };\n        const resp = await doGet(params);\n        return resp;\n    }, [doGet, id, refresh, setEditable]);\n\n    const init = useCallback(async () => {\n        try {\n            const { evolutions, patient, employee, } = await loadFields();\n            patientList = selectMap(patient);\n            employeeList = selectMap(employee);\n\n\n            const {\n                code, patient_id, employee_id, date_of_evolution, area, comments, status,\n            } = evolutions;\n\n            setState({\n                code: code || \"Automático\",\n                patient_id: patient_id || null,\n                employee_id: employee_id || null,\n                date_of_evolution: date_of_evolution || \"\",\n                area: area || \"\",\n                comments: comments || \"\",\n                status: getStatusLabel(status) || \"Activo\",\n\n            });\n\n            setLoading(false);\n        } catch (error) {\n            console.log('ERROR AL INICIAR' + error);\n            genericException(error);\n        }\n    }, [genericException, loadFields]);\n\n    useEffect(() => {\n        init();\n    }, [init]);\n\n    const redirectEdit = (id) => {\n        navigate(`${baseUrl}/edit/${id}`, { replace: false });\n    };\n\n    const mapValues = (values) => {\n        const { code, patient_id, employee_id, date_of_evolution, area, comments, status, } = values;\n        return {\n            code, patient_id, employee_id, date_of_evolution, area, comments, status: getStatusValue(status),\n        };\n    };\n\n    const submit = async (valuesForm) => {\n        const data = mapValues(valuesForm);\n        const params = {\n            url: id ? `${urlBase}/${id}` : urlBase,\n            data: data\n        };\n        const method = id ? doPut : doPost;\n\n        try {\n            const resp = await method(params);\n            if (id) {\n                appInfo(messages.crud.update);\n                redirectEdit(resp.response.data.id);\n            } else {\n                appSuccess(messages.crud.new);\n                redirectEdit(resp.response.data.id);\n            }\n        } catch (error) {\n            console.log('ERROR AL GUARDAR ' + error);\n            genericException(error);\n        }\n    };\n\n    return (\n        <>\n            {isLoading ? (\n                <Box p={10}>\n                    <Loader />\n                </Box>\n            ) : (\n                <Formik enableReinitialize initialValues={state} validationSchema={validationSchema} onSubmit={submit}>\n                    {(subProps) => (\n                        <Form>\n                            {!id && viewMode ? (\n                                <FormButtons formProps={subProps} />\n                            ) : (\n                                <FormButtons formProps={subProps} />\n                            )}\n                            <Grid container direction=\"row\" spacing={2}>\n\n                                <Grid item xs={6} md={6} xl={6}>\n                                    <Field label=\"Codigo\" name=\"code\" component={TextBase}\n                                        disabled={true}\n                                        InputProps={{\n                                            readOnly: true\n                                        }}\n                                    //onClick={(event) => handleChangecode(event)} \n                                    />\n                                </Grid>\n\n                                <Grid item xs={6} md={6} xl={6}>\n                                    <Field label=\"Paciente\" name=\"patient_id\" component={SelectBase} items={patientList}\n                                    /*onOptionSelected={(selectedOption) => handleOnChangepatient_id(selectedOption, subProps)} */\n                                    />\n                                </Grid>\n\n                                <Grid item xs={6} md={6} xl={6}>\n                                    <Field label=\"Empleado\" name=\"employee_id\" component={SelectBase} items={employeeList}\n                                    /*onOptionSelected={(selectedOption) => handleOnChangeemployee_id(selectedOption, subProps)} */\n                                    />\n                                </Grid>\n\n                                <Grid item xs={6} md={6} xl={6}>\n                                    <Field label=\"Fecha de registro\" name=\"date_of_evolution\" component={DatePickerBase}\n                                    //onClick={(event) => handleChangedate_of_evolution(event)} \n                                    />\n                                </Grid>\n\n                                <Grid item xs={6} md={6} xl={6}>\n                                    <Field label=\"Terapeuta que registra evolución\" name=\"area\" component={TextBase}\n                                    />\n                                </Grid>\n\n                                <Grid item xs={12} md={12} xl={12}>\n                                    <Field label=\"Notas\" name=\"comments\" component={TextAreaBase} rows={8}\n                                    //onClick={(event) => handleChangecomments(event)} \n                                    />\n                                </Grid>\n\n                                <Grid item xs={12} md={6} xl={6}>\n                                    <Field label=\"Estado\" name=\"status\" component={TextBase} disabled={true} />\n                                </Grid>\n\n                            </Grid>\n                        </Form>\n                    )}\n                </Formik>\n            )}\n        </>\n    );\n};\n\nEvolutionsForm.propTypes = {\n    id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    doPost: PropTypes.func,\n    doGet: PropTypes.func,\n    doPut: PropTypes.func,\n    appInfo: PropTypes.func.isRequired,\n    appSuccess: PropTypes.func.isRequired,\n    genericException: PropTypes.func.isRequired,\n    setEditable: PropTypes.func,\n    refresh: PropTypes.oneOfType([PropTypes.object])\n};\n\nexport default withApi(withNotification(EvolutionsForm));","import React, { useState, useRef, useEffect, useCallback } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useNavigate } from \"react-router\";\nimport { PageGeneral, DefaultActions, EstadoChip, Table } from \"components\";\nimport endPoints from \"endPoints/endPoints\";\nimport messages from \"constantes/messages\";\nimport { withApi, withNotification } from \"wrappers\";\nimport { ConfirmModal } from \"components/dialogs\";\nimport masterMessages from \"constantes/masterMessages\";\nimport Form from \"./Form\";\nimport { getStatusLabel } from \"utils/formHelpers\";\nimport Avatar from \"@mui/material/Avatar\";\nimport logo from '../../../assets/logo.png';\n\nconst {\n    transactions: {\n        evolutions: {\n            title,\n            deleteTitle,\n            deleteMessage,\n            changeStatusTitle,\n            changeStatusMessage,\n        },\n    },\n} = masterMessages;\n\nconst permissions = {\n    createPermissions: \"general:transactions:evolutions:create\",\n    updatePermissions: \"general:transactions:evolutions:update\",\n    deletePermissions: \"general:transactions:evolutions:delete\",\n    changeStatusPermissions: \"general:transactions:evolutions:changeStatus\",\n};\n\nconst EvolutionsGrid = (props) => {\n    const [idToEdit, setIdToEdit] = useState(null);\n    const [idToDelete, setIdToDelete] = useState(null);\n    const [idChangeStatus, setIdChangeStatus] = useState(null);\n    const [openModal, setOpenModal] = useState(false);\n    const [dataReport, setDataReport] = useState(null)\n\n    const tableRef = useRef(null);\n\n    const onDelete = async () => {\n        const url = `${endPoints.transactions.evolutions.base}/${idToDelete}`;\n        try {\n            await props.doDelete({ url });\n            tableRef.current.refresh();\n            closeModalDelete();\n            props.appWarning(messages.crud.delete);\n        } catch (error) {\n            props.appError(messages.crud.fail);\n        } finally {\n            setIdToDelete(null);\n        }\n    };\n\n    const onChangeStatus = async () => {\n        const url = `${endPoints.transactions.evolutions.base}/changestatus/${idChangeStatus}`;\n        try {\n            await props.doPut({ url });\n            props.appWarning(messages.crud.changeStatus);\n            tableRef.current.refresh();\n        } catch (error) {\n            props.appError(messages.crud.fail);\n        } finally {\n            setIdChangeStatus(null);\n        }\n    };\n\n    useEffect(() => {\n        if (!openModal) {\n            setIdToEdit(null);\n        }\n    }, [openModal]);\n\n    const breadcrumbs = [{ label: \"transactions\" }, { label: title }];\n\n    const baseUrl = \"/app/general/transactions/evolutions\";\n    const navigate = useNavigate();\n\n    const redirectNew = () => {\n        navigate(`${baseUrl}/new`, { replace: false });\n    };\n\n    const redirectEdit = (idModel) => {\n        navigate(`${baseUrl}/edit/${idModel}`, { replace: true, id: idModel });\n    };\n\n    const openModalDelete = ({ id: idToDelete } = {}) =>\n        setIdToDelete(idToDelete);\n    const closeModalDelete = () => setIdToDelete(null);\n\n    const actions = (row) => (\n        <DefaultActions\n            row={row}\n            onEdit={() => redirectEdit(row.id)}\n            //onDelete={() => openModalDelete(row)}\n            onChangeStatus={() => setIdChangeStatus(row.id)}\n            onPrint={redirectPrint}\n        />\n    );\n\n    const generateReportHtml = (dataReport) => {\n        const currentDate = new Date()\n        const formattedDate = `${currentDate.getFullYear()}-${String(currentDate.getMonth() + 1).padStart(\n            2,\n            '0'\n        )}-${String(currentDate.getDate()).padStart(2, '0')}`\n        return `\n<!DOCTYPE html>\n<html lang=\"es\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Reporte de Evolución de Usuario</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n        }\n        table {\n            width: 100%;\n            border-collapse: collapse;\n            margin-top: 20px;\n        }\n        th, td {\n            border: 1px solid #000;\n            padding: 8px;\n            text-align: left;\n            vertical-align: top;\n        }\n        th {\n            background-color: #f2f2f2;\n        }\n        h1 {\n            text-align: center;\n            font-size: 18px;\n            margin-bottom: 10px;\n        }\n        .logo {\n            text-align: left;\n        }\n        .logo img {\n            width: 50px;\n        }\n    </style>\n</head>\n<body>\n    <!-- Encabezado -->\n    <div class=\"logo\">\n        <img src=\"${logo}\" alt=\"Logo Corporación OASIS\" />\n    </div>\n    <h1>REPORTE DE EVOLUCIÓN DE USUARIO <br> IPS CORPORACIÓN OASIS</h1>\n\n    <!-- Tabla Dinámica -->\n    <table>\n        <thead>\n            <tr>\n                <th>ID Paciente</th>\n                <th>Paciente</th>\n                <th>Fecha/Hora</th>\n                <th>Nota</th>\n                <th>Área</th>\n                <th>Empleado</th>\n            </tr>\n        </thead>\n        <tbody>\n           <tbody>\n              ${dataReport\n                .map(\n                    (row, index) => `\n                <tr>\n                    <td>${row.patient_code}</td>\n                    <td>${row.patient_name}</td>\n                    <td>${row.date_of_evolution}</td>\n                    <td>${row.comments}</td>\n                    <td>${row.area}</td>\n                    <td>${row.employee_name}</td>\n                </tr>\n              `\n                )\n                .join('')}\n            </tbody>\n        </tbody>\n    </table>\n</body>\n</html>\n\n            \n          \n    `\n    }\n\n    const loadReportData = useCallback(\n        async (id) => {\n            try {\n                const params = {\n                    url: `${endPoints.transactions.evolutions.report}/${id}`,\n                    data: {}\n                }\n                const resp = await props.doGet(params)\n                return resp\n            } catch (error) {\n                console.log('ERROR AL INICIAR ' + error)\n                props.genericException(error)\n            }\n        },\n        [props.genericException]\n    )\n\n    const redirectPrint = async ({ patient_id } = {}) => {\n        const { evolution } = await loadReportData(patient_id)\n        setDataReport(evolution)\n    }\n\n    useEffect(() => {\n        if (dataReport) {\n            const reportHtml = generateReportHtml(dataReport)\n            const windowFeatures =\n                'toolbar=no,location=no,status=no,menubar=no,scrollbars=yes,resizable=yes,width=800,height=600'\n            const printWindow = window.open('', '_blank', windowFeatures)\n            printWindow.document.write(reportHtml)\n            printWindow.document.close()\n            printWindow.print()\n        }\n    }, [dataReport])\n\n    const columns = [\n        //{ name: 'code', label: 'Codigo' },\n        {\n            name: \"image\",\n            label: \"Imagen\",\n            component: (row) => (\n                <Avatar\n                    alt={row.name}\n                    src={row.image}\n                    style={{ width: \"50px\", height: \"50px\" }}\n                />\n            ),\n        },\n        { name: 'patient_name', label: 'Paciente' },\n        { name: 'date_of_evolution', label: 'Fecha de registro' },\n        { name: 'area', label: 'Area que registra evolucion' },\n        //{ name: 'comments', label: 'Notas' },\n        { name: 'employee_name', label: 'Empleado' },\n\n        {\n            label: \"Estado\",\n            filter: false,\n            component: (row) => <EstadoChip estado={getStatusLabel(row.status)} />,\n        },\n        {\n            name: \"acciones\",\n            width: 130,\n            align: \"right\",\n            label: \"Acciones\",\n            filter: false,\n            component: (row) => actions(row),\n        },\n    ];\n    return (\n        <PageGeneral breadcrumbs={breadcrumbs}>\n            {Boolean(idToDelete) && (\n                <ConfirmModal\n                    open\n                    title={deleteTitle}\n                    message={deleteMessage}\n                    onClose={closeModalDelete}\n                    onAccept={onDelete}\n                    createPermissions={permissions.deletePermissions}\n                />\n            )}\n            {Boolean(idChangeStatus) && (\n                <ConfirmModal\n                    open\n                    title={changeStatusTitle}\n                    message={changeStatusMessage}\n                    onClose={() => setIdChangeStatus(null)}\n                    onAccept={() => onChangeStatus()}\n                    createPermissions={permissions.changeStatusPermissions}\n                />\n            )}\n            {openModal && (\n                <Form\n                    id={idToEdit}\n                    setOpenModal={setOpenModal}\n                    refreshData={tableRef}\n                />\n            )}\n            <Table\n                forwardedRef={tableRef}\n                onCreate={redirectNew}\n                serverSideUrl={endPoints.transactions.evolutions.base}\n                columns={columns}\n                title={title}\n                createPermissions={permissions.createPermissions}\n            />\n        </PageGeneral>\n    );\n};\n\nEvolutionsGrid.propTypes = {\n    appWarning: PropTypes.func.isRequired,\n    genericException: PropTypes.func.isRequired,\n    doDelete: PropTypes.func,\n    doGet: PropTypes.func\n};\n\nexport default withApi(withNotification(EvolutionsGrid));","import { unstable_generateUtilityClasses as generateUtilityClasses } from '@mui/utils';\nconst boxClasses = generateUtilityClasses('MuiBox', ['root']);\nexport default boxClasses;","'use client';\n\nimport PropTypes from 'prop-types';\nimport { unstable_ClassNameGenerator as ClassNameGenerator } from '@mui/utils';\nimport createBox from '../createBox';\nimport boxClasses from './boxClasses';\nconst Box = createBox({\n  defaultClassName: boxClasses.root,\n  generateClassName: ClassNameGenerator.generate\n});\nprocess.env.NODE_ENV !== \"production\" ? Box.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default Box;"],"names":["validationSchema","Yup","code","required","patient_id","employee_id","date_of_evolution","area","comments","status","urlBase","endPoints","transactions","evolutions","base","patientList","employeeList","initState","selectMap","data","map","row","value","id","label","name","withApi","withNotification","_ref","doGet","genericException","appSuccess","doPost","doPut","appInfo","setEditable","viewMode","refresh","navigate","useNavigate","state","setState","useState","isLoading","setLoading","loadFields","useCallback","async","params","url","initForm","init","patient","employee","getStatusLabel","error","console","log","useEffect","redirectEdit","concat","replace","_jsx","_Fragment","children","Box","p","Loader","Formik","enableReinitialize","initialValues","onSubmit","values","getStatusValue","mapValues","valuesForm","method","resp","messages","crud","update","response","new","subProps","_jsxs","Form","FormButtons","formProps","Grid","container","direction","spacing","item","xs","md","xl","Field","component","TextBase","disabled","InputProps","readOnly","SelectBase","items","DatePickerBase","TextAreaBase","rows","title","deleteTitle","deleteMessage","changeStatusTitle","changeStatusMessage","masterMessages","permissions","props","idToEdit","setIdToEdit","idToDelete","setIdToDelete","idChangeStatus","setIdChangeStatus","openModal","setOpenModal","dataReport","setDataReport","tableRef","useRef","breadcrumbs","baseUrl","closeModalDelete","actions","DefaultActions","onEdit","idModel","onChangeStatus","onPrint","redirectPrint","loadReportData","report","arguments","length","undefined","evolution","reportHtml","currentDate","Date","getFullYear","String","getMonth","padStart","getDate","logo","index","patient_code","patient_name","employee_name","join","generateReportHtml","windowFeatures","printWindow","window","open","document","write","close","print","columns","Avatar","alt","src","image","style","width","height","filter","EstadoChip","estado","align","PageGeneral","Boolean","ConfirmModal","message","onClose","onAccept","doDelete","current","appWarning","delete","appError","fail","createPermissions","changeStatus","refreshData","Table","forwardedRef","onCreate","redirectNew","serverSideUrl","generateUtilityClasses","createBox","defaultClassName","boxClasses","root","generateClassName","ClassNameGenerator","generate"],"sourceRoot":""}