{"version":3,"file":"static/js/783.1ae3f6fc.chunk.js","mappings":"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","sources":["pages/seguridad/usuario/Form.js","pages/seguridad/usuario/New.js"],"sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Grid } from '@mui/material';\nimport { Form, Field, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { TextBase, Loader } from 'components';\nimport endPoints from 'endPoints/endPoints';\nimport messages from 'constantes/messages';\nimport { withApi, withNotification } from 'wrappers';\nimport { FormButtons, SelectBase } from 'components/controls';\nimport { useNavigate } from 'react-router';\n\nconst validationSchema = Yup.object({\n\n});\n\nconst urlBase = endPoints.seguridad.usuarios.base;\n\nconst baseUrl = '/app/seguridad/usuarios';\n\nconst initState = {\n  name: '',\n  email: '',\n  role: '',\n  password: '',\n  compania_id: 1,\n  roles: []\n};\n\nconst PresolpedForm = ({\n  id,\n  doGet,\n  genericException,\n  appSuccess,\n  doPost,\n  doPut,\n  appInfo,\n  refresh\n}) => {\n  const navigate = useNavigate();\n  const [state, setState] = useState(initState);\n\n  // Call to API for load form values\n  const loadFields = useCallback(async () => {\n    const params = {\n      url: endPoints.seguridad.usuarios.initFormComponent,\n      data: id ? { id: id } : {}\n    };\n    const resp = await doGet(params);\n    return resp;\n  }, [doGet, id, refresh]);\n\n  const selectMap = (data) => data.map((row) => ({ value: row.id, label: row.name }));\n\n  const init = useCallback(async () => {\n    try {\n      const {user,roles}  = await loadFields();\n      const {\n        name,\n        email,\n        role_id: role\n      } = user;\n\n      const rolesSelect = selectMap(roles);\n\n      setState({\n        id: id || null,\n        name: name || '',\n        email: email || '',\n        role: role || '',\n        roles: rolesSelect\n      });\n    } catch (error) {\n      genericException(error);\n    }\n  }, [genericException, loadFields]);\n\n  useEffect(() => {\n    init();\n  }, [init]);\n\n  const redirectEdit = (id) => {\n    navigate(`${baseUrl}/edit/${id}`, { replace: false });\n  };\n\n  const mapValues = (values) => {\n    const { name, email, password, role, username } = values;\n    return {\n      name: name,\n      email: email,\n      password: password,\n      confirm_password: password,\n      role_id: role,\n      username: username\n    };\n  };\n\n  const submit = async (valuesForm) => {\n    const data = mapValues(valuesForm);\n    const params = {\n      url: id ? `${urlBase}/${id}` : urlBase,\n      data: data\n    };\n    const method = id ? doPut : doPost;\n\n    try {\n      const resp = await method(params);\n      if (id) {\n        appInfo(messages.crud.update);\n        redirectEdit(resp.id);\n      } else {\n        appSuccess(messages.crud.new);\n        redirectEdit(resp.id);\n      }\n    } catch (error) {\n      console.log('ERROR AL GUARDAR '+error);\n      genericException(error);\n    }\n  };\n\n  const {isLoading, roles } = state;\n  return isLoading ? (\n    <Loader />\n  ) : (\n    <Formik\n      enableReinitialize\n      initialValues={state}\n      validationSchema={validationSchema}\n      onSubmit={submit}\n    >\n      {(subProps) => (\n        <Form>\n          <FormButtons formProps={subProps} />\n          <Grid container direction=\"row\" spacing={2}>\n            <Grid container item spacing={2}>\n              <Grid item xs={6} md={6} xl={6}>\n                <Field label=\"Nombre\" name=\"name\" component={TextBase} />\n              </Grid>\n              <Grid item xs={6} md={6} xl={6}>\n                <Field label=\"Correo\" name=\"email\" component={TextBase} />\n              </Grid>\n              <Grid item xs={6} md={6} xl={6}>\n                <Field label=\"ContraseÃ±a\" name=\"password\" component={TextBase} />\n              </Grid>\n              <Grid item xs={6} md={6} xl={6}>\n                <Field label=\"Rol\" name=\"role\" component={SelectBase} items={roles} />\n              </Grid>\n            </Grid>\n          </Grid>\n        </Form>\n      )}\n    </Formik>\n  );\n};\n\nPresolpedForm.propTypes = {\n  id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  doPost: PropTypes.func,\n  doGet: PropTypes.func,\n  doPut: PropTypes.func,\n  appInfo: PropTypes.func.isRequired,\n  appSuccess: PropTypes.func.isRequired,\n  genericException: PropTypes.func.isRequired,\n  refresh: PropTypes.oneOfType([PropTypes.object])\n};\n\nexport default withApi(withNotification(PresolpedForm));\n","import React from 'react';\nimport { PageGeneral } from 'components';\nimport masterMessages from 'constantes/masterMessages';\nimport PresolpedForm from './Form';\n\nconst { title, createTitle } = masterMessages.seguridad.rol;\n\nconst breadcrumbs = [{ label: 'Seguridad' }, { label: title }];\n\nfunction New() {\n  return (\n    <PageGeneral title={createTitle} breadcrumbs={breadcrumbs}>\n      <PresolpedForm />\n    </PageGeneral>\n  );\n}\n\nNew.propTypes = {};\n\nexport default New;\n"],"names":["validationSchema","Yup","urlBase","endPoints","seguridad","usuarios","base","initState","name","email","role","password","compania_id","roles","withApi","withNotification","_ref","id","doGet","genericException","appSuccess","doPost","doPut","appInfo","refresh","navigate","useNavigate","state","setState","useState","loadFields","useCallback","async","params","url","initFormComponent","data","init","user","role_id","rolesSelect","map","row","value","label","error","useEffect","redirectEdit","concat","replace","isLoading","_jsx","Loader","Formik","enableReinitialize","initialValues","onSubmit","values","username","confirm_password","mapValues","valuesForm","method","resp","messages","crud","update","new","console","log","children","subProps","_jsxs","Form","FormButtons","formProps","Grid","container","direction","spacing","item","xs","md","xl","Field","component","TextBase","SelectBase","items","title","createTitle","masterMessages","rol","breadcrumbs","PageGeneral","PresolpedForm"],"sourceRoot":""}