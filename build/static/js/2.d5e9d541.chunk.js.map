{"version":3,"file":"static/js/2.d5e9d541.chunk.js","mappings":"qWAcA,MAAMA,EAAmBC,EAAAA,GAAW,CACnCC,KAAMD,EAAAA,KAAaE,SAAS,uBAC5BC,KAAMH,EAAAA,KAAaE,SAAS,4BAC5BE,OAAQJ,EAAAA,KAAaE,SAAS,yBAIzBG,EAAUC,EAAAA,EAAUC,QAAQC,QAAQC,KAIpCC,EAAY,CACjBT,MAAM,EACNE,MAAM,EACLC,OAAQ,GAiKV,GAAeO,EAAAA,EAAAA,KAAQC,EAAAA,EAAAA,KAzJHC,IAcT,IAdU,GACjBC,EAAE,SACFC,EAAQ,MACRC,EAAK,iBACLC,EAAgB,WAChBC,EAAU,OACVC,EAAM,MACNC,EAAK,QACLC,EAAO,YACPC,EAAW,SACXC,EAAQ,aACRC,EAAY,YACZC,EAAW,aACXC,GACCb,EACD,MAAOc,EAAOC,IAAYC,EAAAA,EAAAA,UAASnB,IAC5BoB,EAAWC,IAAcF,EAAAA,EAAAA,WAAS,GAGnCG,GAAaC,EAAAA,EAAAA,cAAYC,UAC/B,MAAMC,EAAS,CACXC,IAAK9B,EAAAA,EAAUC,QAAQC,QAAQ6B,SAC/BC,KAAMxB,EAAK,CAAEA,GAAIA,GAAO,CAAC,GAG7B,aADmBE,EAAMmB,EACd,GACR,CAACnB,EAAOF,EAAIQ,IAETiB,GAAON,EAAAA,EAAAA,cAAYC,UACzB,IACI,MAAM,QAAE1B,SAAoBwB,KAGtB,KACF/B,EAAI,KAAEE,EAAI,OAAEC,GACZI,EAEJoB,EAAS,CACF3B,KAAMA,GAAQ,GAC1BE,KAAMA,GAAQ,GACXC,QAAQoC,EAAAA,EAAAA,IAAepC,IAAW,WAIhC2B,GAAW,EACf,CAAE,MAAOU,GACLC,QAAQC,IAAI,mBAAmBF,GAC/BxB,EAAiBwB,EACrB,IACG,CAACxB,EAAkBe,KAEtBY,EAAAA,EAAAA,YAAU,KACNL,GAAM,GACP,CAACA,IAoCJ,OACAM,EAAAA,EAAAA,MAACC,EAAAA,EAAM,CAACC,WAAS,EAACC,SAAS,KAAKC,MAAI,EAACC,QAASA,IAAM1B,GAAa,GAAQ,kBAAgB,yBAAwB2B,SAAA,EAC7GC,EAAAA,EAAAA,KAACC,EAAAA,EAAW,CAACvC,GAAG,yBAAwBqC,SAAC,eACzCC,EAAAA,EAAAA,KAACE,EAAAA,EAAa,CAAAH,SAEbrB,GACGsB,EAAAA,EAAAA,KAACG,EAAAA,EAAG,CAACC,EAAG,GAAGL,UACPC,EAAAA,EAAAA,KAACK,EAAAA,GAAM,OAGXL,EAAAA,EAAAA,KAACM,EAAAA,GAAM,CAACC,oBAAkB,EAACC,cAAejC,EAAO5B,iBAAkBA,EAAkB8D,SApC9E3B,UACX,MAAM4B,EAAShD,EAAKM,EAAQD,EACtBmB,EAVSyB,KACf,MAAM,KAAE9D,EAAI,KAAEE,EAAI,OAAEC,GAAa2D,EACjC,MAAO,CACHhD,SAAUA,EACVd,OAAME,OAAMC,QAAQ4D,EAAAA,EAAAA,IAAe5D,GACtC,EAKY6D,CAAUC,GACjB/B,EAAS,CACXC,IAAI,GAAD+B,OAAK9D,GAAO8D,OAAGrD,EAAE,IAAAqD,OAAOrD,GAAO,IAElCwB,KAAMA,GAGV,UACuBwB,EAAO3B,GACtBrB,EACAO,EAAQ+C,EAAAA,EAASC,KAAKC,QAEtBpD,EAAWkD,EAAAA,EAASC,KAAKE,KAE7B7C,GACJ,CAAE,MAAOe,GACLC,QAAQC,IAAI,oBAAoBF,GAChCxB,EAAiBwB,EACrB,CAAC,QACGjB,GAAa,GACbC,EAAY+C,QAAQC,SACxB,GAa0GtB,SAChGuB,IACF7B,EAAAA,EAAAA,MAAC8B,EAAAA,GAAI,CAAAxB,SAAA,EACDN,EAAAA,EAAAA,MAAC+B,EAAAA,GAAI,CAACC,WAAS,EAACC,UAAU,MAAMC,QAAS,EAAE5B,SAAA,EAEvCC,EAAAA,EAAAA,KAACwB,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAEhC,UAC3BC,EAAAA,EAAAA,KAACgC,EAAAA,GAAK,CAACC,MAAM,SAASlF,KAAK,OAAOmF,UAAWC,EAAAA,QAKjDnC,EAAAA,EAAAA,KAACwB,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAEhC,UAC3BC,EAAAA,EAAAA,KAACgC,EAAAA,GAAK,CAACC,MAAM,cAAclF,KAAK,OAAOmF,UAAWC,EAAAA,QAKtDnC,EAAAA,EAAAA,KAACwB,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAEhC,UAC5BC,EAAAA,EAAAA,KAACgC,EAAAA,GAAK,CAACC,MAAM,SAASlF,KAAK,SAASmF,UAAWC,EAAAA,GAAUC,UAAU,UAI3EpC,EAAAA,EAAAA,KAACwB,EAAAA,GAAI,CAACC,WAAS,EAACC,UAAU,MAAMW,MAAO,CAAEC,WAAY,IAAMC,QAAQ,WAAUxC,UACzEN,EAAAA,EAAAA,MAAC+B,EAAAA,GAAI,CAACI,MAAI,EAAA7B,SAAA,EACNC,EAAAA,EAAAA,KAACwC,EAAAA,GAAU,KACXxC,EAAAA,EAAAA,KAACyC,EAAAA,GAAU,CACPC,QAASA,IAAMtE,GAAa,GAC5B6D,MAAM,WACNI,MAAO,CAAEM,WAAY,oBASxC,KCjKPC,EACe,iCADfA,EAGe,iCAuHrB,GAAerF,EAAAA,EAAAA,KAAQC,EAAAA,EAAAA,KAnHHC,IAMb,IANc,GACnBC,EAAE,SACFmF,EAAQ,WACRC,EAAU,iBACVjF,EAAgB,SAChBkF,GACDtF,EACC,MAAOuF,EAAYC,IAAiBxE,EAAAA,EAAAA,UAAS,OACtCyE,EAAYC,IAAiB1E,EAAAA,EAAAA,UAAS,MACvCd,EAAWD,EACjB4B,QAAQC,IAAI5B,GACZ,MAAOyF,EAAWhF,IAAgBK,EAAAA,EAAAA,WAAS,GACrC4E,GAAQC,EAAAA,EAAAA,QAAO,MAGfC,EAAmBA,IAAMN,EAAc,MAEvCO,EAAsBA,IAAOH,EAAMjC,QAAQC,UAgB3CoC,EAAgB,WAAgB,IAAf/F,EAAEgG,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,KAC1BtF,GAAa,GACb+E,EAAczF,EAChB,EAOMmG,EAAYC,IAChB,MAAM,GAAEpG,GAAOoG,EACf,OACE9D,EAAAA,EAAAA,KAAC+D,EAAAA,GAAc,CACbC,OAAQA,IAAMP,EAAc/F,GAC5BuG,SAAUA,IAlCqBhB,EAkCCvF,GAChCoG,IAAKA,GACL,GAIA,YAAEI,EAAW,cAAEC,GACnBC,EAAAA,QAAejH,QAAQC,QAEnBiH,EAAU,CAChB,CAAEtH,KAAM,OAAQkF,MAAO,UACvB,CAAElF,KAAM,OAAQkF,MAAO,eAErB,CACEA,MAAO,SACPqC,QAAQ,EACRpC,UAAY4B,IAAQ9D,EAAAA,EAAAA,KAACuE,EAAAA,GAAU,CAACC,QAAQpF,EAAAA,EAAAA,IAAe0E,EAAI9G,WAE7D,CACED,KAAM,WACNkF,MAAO,WACPqC,QAAQ,EACRpC,UAAY4B,GAAQD,EAASC,KAIhC,OACCrE,EAAAA,EAAAA,MAAAgF,EAAAA,SAAA,CAAA1E,SAAA,CACG2E,QAAQ1B,KACPhD,EAAAA,EAAAA,KAAC2E,EAAAA,EAAY,CACX9E,MAAI,EACJ+E,MAAOV,EACPW,QAASV,EACTrE,QAASyD,EACTuB,SA/DShG,UACf,MAAMC,EAAS,CACbC,IAAI,GAAD+B,OAAK7D,EAAAA,EAAUC,QAAQC,QAAQC,KAAI,KAAA0D,OAAIiC,IAE5C,UACQH,EAAS9D,GACfyE,IACAD,IACAT,EAAW9B,EAAAA,EAASC,KAAK8D,OAC3B,CAAE,MAAO1F,GACPxB,EAAiBwB,EACnB,GAqDM2F,kBAAmBpC,IAGtB8B,QAAQtB,KACPpD,EAAAA,EAAAA,KAACiF,EAAW,CACVvH,GAAIwF,EACJvF,SAAUA,EACVS,aApDiB8G,KACvB9G,GAAa,GACb+E,EAAc,KAAK,EAmDb7E,aAAckF,EACdT,SAAUA,KAGd/C,EAAAA,EAAAA,KAACmF,EAAAA,GAAK,CACJC,aAAc/B,EACdgC,cAAenI,EAAAA,EAAUC,QAAQC,QAAQC,KACzCiI,eAAgB,CAAEC,MAAM,YAADxE,OAAcpD,IACrC6H,SAAU/B,EACVY,QAASA,EACTW,kBAAmBpC,MAEpB,MC/GD,MAAEgC,EAAK,YAAEa,GAAgBrB,EAAAA,QAAejH,QAAQuI,OAEhDC,EAAc,CAAC,CAAE1D,MAAO,YAAc,CAAEA,MAAO2C,IAmCrD,SAAerH,EAAAA,EAAAA,KAAQC,EAAAA,EAAAA,KA/BvB,WACE,MAAM,GAAEE,IAAOkI,EAAAA,EAAAA,OACR7C,EAAU7E,IAAeO,EAAAA,EAAAA,WAAS,IAClCN,EAAU0H,IAAepH,EAAAA,EAAAA,WAAS,GAEnC4E,GAAQC,EAAAA,EAAAA,UAINwC,EAAY,CACnB,CAAC,MAAS,YAAa5D,WAAWlC,EAAAA,EAAAA,KAAC+F,EAAW,CAACrI,GAAIA,EAAIsI,cAHlCA,IAAM3C,EAAMjC,QAAQC,UAG4C0B,UAAWA,MAIjG,OACEtD,EAAAA,EAAAA,MAACwG,EAAAA,GAAW,CAACrB,MAAOa,EAAaE,YAAaA,EAAaO,aAAW,EAAAnG,SAAA,EACpEC,EAAAA,EAAAA,KAACwB,EAAAA,GAAI,CAACC,WAAS,EAACE,QAAS,EAAGwE,GAAI,CAAEC,GAAI,EAAGC,UAlB5B,KAkBoDtG,UAC/DC,EAAAA,EAAAA,KAACwB,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAG/B,UACxBC,EAAAA,EAAAA,KAACsG,EAAAA,EAAI,CAACH,GAAI,CAAE/F,EAAG,EAAGiG,UAAW,QAAStG,UAClCC,EAAAA,EAAAA,KAACuG,EAAAA,EAAU,CAAC7I,GAAIA,EAAI2D,QAASgC,EAAOnF,YAAaA,EAAa2H,YAAaA,EAAa1H,SAAUA,WAK1G6B,EAAAA,EAAAA,KAACsG,EAAAA,EAAI,CAACH,GAAI,CAAEK,GAAI,EAAGC,GAAI,GAAI1G,UACzBC,EAAAA,EAAAA,KAAC0G,EAAAA,EAAa,CAACC,OAAQb,QAI/B,I,sLC9BA,MAAMnJ,EAAmBC,EAAAA,GAAW,CAChCC,KAAMD,EAAAA,KAAaE,SAAS,uBAC/BC,KAAMH,EAAAA,KAAaE,SAAS,4BAC5BE,OAAQJ,EAAAA,KAAaE,SAAS,yBAIzBG,EAAUC,EAAAA,EAAUC,QAAQuI,OAAOrI,KAMnCC,EAAY,CACbT,MAAM,EACVE,MAAM,EACNC,OAAQ,GAqJT,GAAeO,EAAAA,EAAAA,KAAQC,EAAAA,EAAAA,KA7IJC,IAWR,IAXS,GAChBC,EAAE,MACFE,EAAK,iBACLC,EAAgB,WAChBC,EAAU,OACVC,EAAM,MACNC,EAAK,QACLC,EAAO,YACPC,EAAW,SACXC,EAAQ,QACRkD,GACC5D,EACD,MAAMmJ,GAAWC,EAAAA,EAAAA,OACVtI,EAAOC,IAAYC,EAAAA,EAAAA,UAASnB,IAC5BoB,EAAWC,IAAcF,EAAAA,EAAAA,WAAS,GAGnCG,GAAaC,EAAAA,EAAAA,cAAYC,UAC/B,MAAMC,EAAS,CACXC,IAAK9B,EAAAA,EAAUC,QAAQuI,OAAOzG,SAC9BC,KAAMxB,EAAK,CAAEA,GAAIA,GAAO,CAAC,GAG7B,aADmBE,EAAMmB,EACd,GACR,CAACnB,EAAOF,EAAI2D,EAASnD,IAElBiB,GAAON,EAAAA,EAAAA,cAAYC,UACzB,IACI,MAAM,OAAE4G,SAAmB9G,KAGrB,KACd/B,EAAI,KAAEE,EAAI,OAAEC,GACA0I,EAEJlH,EAAS,CACd3B,KAAMA,GAAQ,GACdE,KAAMA,GAAQ,GACdC,QAAQoC,EAAAA,EAAAA,IAAepC,IAAW,WAI7B2B,GAAW,EACf,CAAE,MAAOU,GACLC,QAAQC,IAAI,mBAAmBF,GAC/BxB,EAAiBwB,EACrB,IACG,CAACxB,EAAkBe,KAEtBY,EAAAA,EAAAA,YAAU,KACNL,GAAM,GACP,CAACA,IAEJ,MAAM2H,EAAgBpJ,IAClBkJ,EAAS,GAAD7F,OAnEA,8BAmEW,UAAAA,OAASrD,GAAM,CAAEqJ,SAAS,GAAQ,EAiCzD,OACA/G,EAAAA,EAAAA,KAAAyE,EAAAA,SAAA,CAAA1E,SACKrB,GACGsB,EAAAA,EAAAA,KAACG,EAAAA,EAAG,CAACC,EAAG,GAAGL,UACPC,EAAAA,EAAAA,KAACK,EAAAA,GAAM,OAGXL,EAAAA,EAAAA,KAACM,EAAAA,GAAM,CAACC,oBAAkB,EAACC,cAAejC,EAAO5B,iBAAkBA,EAAkB8D,SA9B9E3B,UACX,MAAMI,EARSyB,KACf,MAAM,KAAE9D,EAAI,KAAEE,EAAI,OAAEC,GAAa2D,EACjC,MAAO,CACf9D,OAAME,OAAMC,QAAQ4D,EAAAA,EAAAA,IAAe5D,GAC1B,EAIY6D,CAAUC,GACjB/B,EAAS,CACXC,IAAKtB,EAAE,GAAAqD,OAAM9D,EAAO,KAAA8D,OAAIrD,GAAOT,EAC/BiC,KAAMA,GAEJwB,EAAShD,EAAKM,EAAQD,EAE5B,IACI,MAAMiJ,QAAatG,EAAO3B,GACtBrB,GACAO,EAAQ+C,EAAAA,EAASC,KAAKC,QACtB4F,EAAaE,EAAKC,SAAS/H,KAAKxB,MAEhCI,EAAWkD,EAAAA,EAASC,KAAKE,KACzB2F,EAAaE,EAAKC,SAAS/H,KAAKxB,IAExC,CAAE,MAAO2B,GACLC,QAAQC,IAAI,oBAAoBF,GAChCxB,EAAiBwB,EACrB,GAU0GU,SAChGuB,IACF7B,EAAAA,EAAAA,MAAC8B,EAAAA,GAAI,CAAAxB,SAAA,EAEDC,EAAAA,EAAAA,KAACkH,EAAAA,GAAW,CAACC,UAAW7F,KAIxB7B,EAAAA,EAAAA,MAAC+B,EAAAA,GAAI,CAACC,WAAS,EAACC,UAAU,MAAMC,QAAS,EAAE5B,SAAA,EAEvCC,EAAAA,EAAAA,KAACwB,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAEhC,UAC3BC,EAAAA,EAAAA,KAACgC,EAAAA,GAAK,CAACC,MAAM,SAASlF,KAAK,OAAOmF,UAAWC,EAAAA,QAKjDnC,EAAAA,EAAAA,KAACwB,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAEhC,UAC3BC,EAAAA,EAAAA,KAACgC,EAAAA,GAAK,CAACC,MAAM,cAAclF,KAAK,OAAOmF,UAAWC,EAAAA,QAKtDnC,EAAAA,EAAAA,KAACwB,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAEhC,UAC5BC,EAAAA,EAAAA,KAACgC,EAAAA,GAAK,CAACC,MAAM,SAASlF,KAAK,SAASmF,UAAWC,EAAAA,GAAUC,UAAU,eAQxF,I,6DCnKP,MACA,GADmBgF,E,SAAAA,GAAuB,SAAU,CAAC,SC4BrD,GAvBYC,EAAAA,EAAAA,GAAU,CACpBC,iBAAkBC,EAAWC,KAC7BC,kBAAmBC,EAAAA,EAAmBC,U","sources":["pages/masters/phases/targets/Form.js","pages/masters/phases/targets/index.js","pages/masters/phases/Edit.js","pages/masters/phases/Form.js","../node_modules/@mui/system/esm/Box/boxClasses.js","../node_modules/@mui/system/esm/Box/Box.js"],"sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Grid, Dialog, DialogTitle, DialogContent } from '@mui/material';\r\nimport { Form, Field, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { TextBase, SelectBase,  Loader, ButtonSave, ButtonBase } from 'components';\r\nimport endPoints from 'endPoints/endPoints';\r\nimport messages from 'constantes/messages';\r\nimport { withApi, withNotification } from 'wrappers';\r\nimport { Box } from '@mui/system';\r\nimport { getStatusLabel, getStatusValue } from \"utils/formHelpers\";\r\n\r\n\r\n\r\nconst validationSchema = Yup.object({\r\n\tcode: Yup.string().required('Codigo es requerido'),\r\n\tname: Yup.string().required('Nombre fase es requerido'),\r\n\tstatus: Yup.string().required('Estado es requerido'),\r\n \r\n});\r\n\r\nconst urlBase = endPoints.masters.targets.base;\r\n\r\n\r\n\r\nconst initState = {\r\n\tcode: false,\r\n\tname: false,\r\n\t\tstatus: 1,\r\n\r\n};\r\n\r\nconst selectMap = (data) => {\r\n    return data.map((row) => ({ value: row.id, label: row.name }));\r\n};\r\n\r\nconst TargetsForm = ({\r\n    id,\r\n    phase_id,\r\n    doGet,\r\n    genericException,\r\n    appSuccess,\r\n    doPost,\r\n    doPut,\r\n    appInfo,\r\n    setEditable,\r\n    viewMode,\r\n    setOpenModal,\r\n    refreshData,\r\n    refreshTable\r\n    }) => {\r\n    const [state, setState] = useState(initState);\r\n    const [isLoading, setLoading] = useState(true);\r\n\r\n    // Call to API for load form values\r\n    const loadFields = useCallback(async () => {\r\n    const params = {\r\n        url: endPoints.masters.targets.initForm,\r\n        data: id ? { id: id } : {}\r\n    };\r\n    const resp = await doGet(params);\r\n    return resp;\r\n    }, [doGet, id, setEditable]);\r\n\r\n    const init = useCallback(async () => {\r\n    try {\r\n        const { targets,  } = await loadFields();\r\n\r\n\r\n        const {\r\n            code, name, status, \r\n        } = targets;\r\n\r\n        setState({\r\n            \t\t\tcode: code || \"\",\r\n\t\t\tname: name || \"\",\r\n\t\t\t\t\t\tstatus: getStatusLabel(status) || \"Activo\",\r\n\r\n        });\r\n\r\n        setLoading(false);\r\n    } catch (error) {\r\n        console.log('ERROR AL INICIAR'+error);\r\n        genericException(error);\r\n    }\r\n    }, [genericException, loadFields]);\r\n\r\n    useEffect(() => {\r\n        init();\r\n    }, [init]);\r\n\r\n    const mapValues = (values) => {\r\n        const { code, name, status,  } = values;\r\n        return {\r\n            phase_id: phase_id,\r\n            code, name, status: getStatusValue(status), \r\n        };\r\n    };\r\n\r\n    const submit = async (valuesForm) => {\r\n        const method = id ? doPut : doPost;\r\n        const data = mapValues(valuesForm);\r\n        const params = {\r\n            url: `${urlBase}${id ? `/${id}` : ''}`,\r\n            //url: id ? `${urlBase}/${id}` : urlBase,\r\n            data: data\r\n        };\r\n\r\n        try {\r\n            const resp = await method(params);\r\n            if (id) {\r\n                appInfo(messages.crud.update);\r\n            } else {\r\n                appSuccess(messages.crud.new);\r\n            }\r\n            refreshTable()\r\n        } catch (error) {\r\n            console.log('ERROR AL GUARDAR '+error);\r\n            genericException(error);\r\n        } finally {\r\n            setOpenModal(false);\r\n            refreshData.current.refresh();\r\n        }\r\n    };\r\n\r\n    return (\r\n    <Dialog fullWidth maxWidth=\"xl\" open onClose={() => setOpenModal(false)} aria-labelledby=\"max-width-dialog-title\">\r\n        <DialogTitle id=\"max-width-dialog-title\">Objetivos</DialogTitle>\r\n        <DialogContent>\r\n            \r\n        {isLoading ? (\r\n            <Box p={10}>\r\n                <Loader />\r\n            </Box>\r\n        ) : (\r\n            <Formik enableReinitialize initialValues={state} validationSchema={validationSchema} onSubmit={submit}>\r\n                {(subProps) => (\r\n                <Form>\r\n                    <Grid container direction=\"row\" spacing={2}>\r\n    \r\n                        <Grid item xs={6} md={6} xl={6}>\r\n                            <Field label=\"Codigo\" name=\"code\" component={TextBase} \r\n                                //onClick={(event) => handleChangecode(event)} \r\n                            />\r\n                        </Grid>\r\n            \r\n                        <Grid item xs={6} md={6} xl={6}>\r\n                            <Field label=\"Nombre fase\" name=\"name\" component={TextBase} \r\n                                //onClick={(event) => handleChangename(event)} \r\n                            />\r\n                        </Grid>\r\n            \r\n                        <Grid item xs={12} md={6} xl={6}>\r\n                            <Field label=\"Estado\" name=\"status\" component={TextBase} disabled={true} />\r\n                        </Grid>\r\n            \r\n                    </Grid>\r\n                    <Grid container direction=\"row\" style={{ paddingTop: 30 }} justify=\"flex-end\">\r\n                        <Grid item>\r\n                            <ButtonSave />\r\n                            <ButtonBase\r\n                                onClick={() => setOpenModal(false)}\r\n                                label=\"Cancelar\"\r\n                                style={{ marginLeft: 15 }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                </Form>\r\n                )}\r\n            </Formik>\r\n        )}\r\n       </DialogContent>\r\n    </Dialog>\r\n            \r\n    );\r\n};\r\n\r\nTargetsForm.propTypes = {\r\n    id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n    doPost: PropTypes.func,\r\n    doGet: PropTypes.func,\r\n    doPut: PropTypes.func,\r\n    appInfo: PropTypes.func.isRequired,\r\n    appSuccess: PropTypes.func.isRequired,\r\n    genericException: PropTypes.func.isRequired,\r\n    setEditable: PropTypes.func,\r\n    refresh: PropTypes.oneOfType([PropTypes.object])\r\n};\r\n\r\nexport default withApi(withNotification(TargetsForm));","import React, { useState, useRef } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { withApi, withNotification } from \"wrappers\";\r\nimport { ConfirmModal } from \"components/dialogs\";\r\nimport { DefaultActions, Table, EstadoChip } from \"components\";\r\nimport endPoints from \"endPoints/endPoints\";\r\nimport messages from \"constantes/messages\";\r\nimport masterMessages from \"constantes/masterMessages\";\r\nimport TargetsForm from './Form';\r\nimport { getStatusLabel } from \"utils/formHelpers\";\r\n\r\nconst permissions = {\r\n  createPermissions: \"general:masters:targets:create\",\r\n  updatePermissions: \"general:masters:targets:update\",\r\n  deletePermissions: \"general:masters:targets:delete\",\r\n  changeStatusPermissions: \"general:masters:targets:changeStatus\",\r\n};\r\n\r\nconst TargetsGrid = ({\r\n  id,\r\n  doDelete,\r\n  appWarning,\r\n  genericException,\r\n  editable,\r\n}) => {\r\n  const [idToRemove, setIdToRemove] = useState(null);\r\n  const [idToUpdate, setIdToUpdate] = useState(null);\r\n  const phase_id = id;\r\n  console.log(phase_id);\r\n  const [openModal, setOpenModal] = useState(false);\r\n  const child = useRef(null);\r\n\r\n  const openModalDelete = (idModel) => setIdToRemove(idModel);\r\n  const closeModalDelete = () => setIdToRemove(null);\r\n\r\n  const refreshTabletargets = () =>  child.current.refresh();\r\n\r\n  const onDelete = async () => {\r\n    const params = {\r\n      url: `${endPoints.masters.targets.base}/${idToRemove}`\r\n    };\r\n    try {\r\n      await doDelete(params);\r\n      refreshTabletargets();\r\n      closeModalDelete();\r\n      appWarning(messages.crud.delete);\r\n    } catch (error) {\r\n      genericException(error);\r\n    }\r\n  };\r\n\r\n  const openModalForm = (id = null) => {\r\n    setOpenModal(true);\r\n    setIdToUpdate(id);\r\n  };\r\n\r\n  const closeModalUpdate = () => {\r\n    setOpenModal(false);\r\n    setIdToUpdate(null);\r\n  };\r\n\r\n  const acciones = (row) => {\r\n    const { id } = row;\r\n    return (\r\n      <DefaultActions\r\n        onEdit={() => openModalForm(id)}\r\n        onDelete={() => openModalDelete(id)}\r\n        row={row}\r\n      />\r\n    );\r\n  };\r\n\r\n  const { deleteTitle, deleteMessage } =\r\n    masterMessages.masters.targets;\r\n\r\n  const columns = [\r\n\t\t{ name: 'code', label: 'Codigo' },\r\n\t\t{ name: 'name', label: 'Nombre fase' },\r\n\r\n    {\r\n      label: \"Estado\",\r\n      filter: false,\r\n      component: (row) => <EstadoChip estado={getStatusLabel(row.status)} />,\r\n    },\r\n    {\r\n      name: \"acciones\",\r\n      label: \"Acciones\",\r\n      filter: false,\r\n      component: (row) => acciones(row),\r\n    }\r\n  ];\r\n\r\n   return (\r\n    <>\r\n      {Boolean(idToRemove) && (\r\n        <ConfirmModal\r\n          open\r\n          title={deleteTitle}\r\n          message={deleteMessage}\r\n          onClose={closeModalDelete}\r\n          onAccept={onDelete}\r\n          createPermissions={permissions.deletePermissions}\r\n        />\r\n      )}\r\n      {Boolean(openModal) && (\r\n        <TargetsForm\r\n          id={idToUpdate}\r\n          phase_id={phase_id}\r\n          setOpenModal={closeModalUpdate}\r\n          refreshTable={refreshTabletargets}\r\n          editable={editable}\r\n        />\r\n      )}\r\n      <Table\r\n        forwardedRef={child}\r\n        serverSideUrl={endPoints.masters.targets.base}\r\n        serverSideData={{ where: `phase_id=${phase_id}` }}\r\n        onCreate={openModalForm}\r\n        columns={columns}\r\n        createPermissions={permissions.createPermissions}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nTargetsGrid.propTypes = {\r\n    appWarning: PropTypes.func.isRequired,\r\n    genericException: PropTypes.func.isRequired,\r\n    doDelete: PropTypes.func,\r\n    doGet: PropTypes.func,\r\n    editable: PropTypes.bool,\r\n};\r\n\r\nexport default withApi(withNotification(TargetsGrid)); ","import React, { useState, useRef, useEffect } from 'react';\r\nimport { withApi, withNotification } from 'wrappers';\r\nimport { PageGeneral } from 'components';\r\nimport masterMessages from 'constantes/masterMessages';\r\nimport { useParams } from 'react-router';\r\nimport TabsComponent from 'components/Tab';\r\nimport { Card, Grid } from '@mui/material';\r\nimport PhasesForm from './Form';\r\nimport TargetsGrid from './targets/index';\r\n\r\nconst { title, updateTitle } = masterMessages.masters.phases;\r\n\r\nconst breadcrumbs = [{ label: 'Maestros' }, { label: title }];\r\n\r\nconst MIN_HEIGHT = 250;\r\n\r\nfunction Edit() {\r\n  const { id } = useParams();\r\n  const [editable, setEditable] = useState(false);\r\n  const [viewMode, setViewMode] = useState(false);\r\n\r\n  const child = useRef();\r\n\r\n  const refreshParent = () => child.current.refresh();\r\n  \r\n    const tabConfig = [\r\n\t\t\t{'label': 'Objetivos', component: <TargetsGrid id={id} refreshParent={refreshParent} editable={!editable}/>},\r\n    ]\r\n    \r\n\r\n  return (\r\n    <PageGeneral title={updateTitle} breadcrumbs={breadcrumbs} withOutCard>\r\n      <Grid container spacing={2} sx={{ pb: 2, minHeight: MIN_HEIGHT }}>\r\n        <Grid item xs={12} md={12}>\r\n          <Card sx={{ p: 3, minHeight: '100%' }}>\r\n              <PhasesForm id={id} refresh={child} setEditable={setEditable} setViewMode={setViewMode} viewMode={viewMode} \r\n              />\r\n          </Card>\r\n        </Grid>\r\n      </Grid>\r\n      <Card sx={{ pl: 2, pr: 2 }}>\r\n        <TabsComponent config={tabConfig} />\r\n      </Card>\r\n    </PageGeneral>\r\n  );\r\n}\r\n\r\nexport default withApi(withNotification(Edit));","import React, { useCallback, useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Grid,  } from '@mui/material';\r\nimport { Form, Field, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { TextBase,  Loader } from 'components';\r\nimport endPoints from 'endPoints/endPoints';\r\nimport messages from 'constantes/messages';\r\nimport { withApi, withNotification } from 'wrappers';\r\nimport { FormButtons } from 'components/controls';\r\nimport { useNavigate } from 'react-router';\r\nimport { Box } from '@mui/system';\r\nimport { getStatusLabel, getStatusValue } from 'utils/formHelpers';\r\n\r\n\r\nconst validationSchema = Yup.object({\r\n   \tcode: Yup.string().required('Codigo es requerido'),\r\n\tname: Yup.string().required('Nombre fase es requerido'),\r\n\tstatus: Yup.string().required('Estado es requerido'),\r\n \r\n});\r\n\r\nconst urlBase = endPoints.masters.phases.base;\r\n\r\n\r\n\r\nconst baseUrl = '/app/general/masters/phases';\r\n\r\nconst initState = {\r\n    \tcode: false,\r\n\tname: false,\r\n\tstatus: 1,\r\n\r\n};\r\n\r\nconst selectMap = (data) => {\r\n    return data.map((row) => ({ value: row.id, label: row.name }));\r\n};\r\n\r\nconst PhasesForm = ({\r\n    id,\r\n    doGet,\r\n    genericException,\r\n    appSuccess,\r\n    doPost,\r\n    doPut,\r\n    appInfo,\r\n    setEditable,\r\n    viewMode,\r\n    refresh,\r\n    }) => {\r\n    const navigate = useNavigate();\r\n    const [state, setState] = useState(initState);\r\n    const [isLoading, setLoading] = useState(true);\r\n\r\n    // Call to API for load form values\r\n    const loadFields = useCallback(async () => {\r\n    const params = {\r\n        url: endPoints.masters.phases.initForm,\r\n        data: id ? { id: id } : {}\r\n    };\r\n    const resp = await doGet(params);\r\n    return resp;\r\n    }, [doGet, id, refresh, setEditable]);\r\n\r\n    const init = useCallback(async () => {\r\n    try {\r\n        const { phases,  } = await loadFields();\r\n\r\n\r\n        const {\r\ncode, name, status, \r\n        } = phases;\r\n\r\n        setState({\r\n\t\t\tcode: code || \"\",\r\n\t\t\tname: name || \"\",\r\n\t\t\tstatus: getStatusLabel(status) || \"Activo\",\r\n\r\n        });\r\n\r\n        setLoading(false);\r\n    } catch (error) {\r\n        console.log('ERROR AL INICIAR'+error);\r\n        genericException(error);\r\n    }\r\n    }, [genericException, loadFields]);\r\n\r\n    useEffect(() => {\r\n        init();\r\n    }, [init]);\r\n\r\n    const redirectEdit = (id) => {\r\n        navigate(`${baseUrl}/edit/${id}`, { replace: false });\r\n    };\r\n\r\n    const mapValues = (values) => {\r\n        const { code, name, status,  } = values;\r\n        return {\r\ncode, name, status: getStatusValue(status), \r\n        };\r\n    };\r\n\r\n    const submit = async (valuesForm) => {\r\n        const data = mapValues(valuesForm);\r\n        const params = {\r\n            url: id ? `${urlBase}/${id}` : urlBase,\r\n            data: data\r\n        };\r\n        const method = id ? doPut : doPost;\r\n\r\n        try {\r\n            const resp = await method(params);\r\n            if (id) {\r\n                appInfo(messages.crud.update);\r\n                redirectEdit(resp.response.data.id);\r\n            } else {\r\n                appSuccess(messages.crud.new);\r\n                redirectEdit(resp.response.data.id);\r\n            }\r\n        } catch (error) {\r\n            console.log('ERROR AL GUARDAR '+error);\r\n            genericException(error);\r\n        }\r\n    };\r\n\r\n    return (\r\n    <>\r\n        {isLoading ? (\r\n            <Box p={10}>\r\n                <Loader />\r\n            </Box>\r\n        ) : (\r\n            <Formik enableReinitialize initialValues={state} validationSchema={validationSchema} onSubmit={submit}>\r\n                {(subProps) => (\r\n                <Form>\r\n                    {!id && viewMode ? (\r\n                    <FormButtons formProps={subProps} />\r\n                    ) : (\r\n                    <FormButtons formProps={subProps} />\r\n                    )}\r\n                    <Grid container direction=\"row\" spacing={2}>\r\n    \r\n                        <Grid item xs={6} md={6} xl={6}>\r\n                            <Field label=\"Codigo\" name=\"code\" component={TextBase} \r\n                                //onClick={(event) => handleChangecode(event)} \r\n                            />\r\n                        </Grid>\r\n            \r\n                        <Grid item xs={6} md={6} xl={6}>\r\n                            <Field label=\"Nombre fase\" name=\"name\" component={TextBase} \r\n                                //onClick={(event) => handleChangename(event)} \r\n                            />\r\n                        </Grid>\r\n            \r\n                        <Grid item xs={12} md={6} xl={6}>\r\n                            <Field label=\"Estado\" name=\"status\" component={TextBase} disabled={true} />\r\n                        </Grid>\r\n            \r\n                    </Grid>\r\n                </Form>\r\n                )}\r\n            </Formik>\r\n        )}\r\n    </>\r\n    );\r\n};\r\n\r\nPhasesForm.propTypes = {\r\n    id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n    doPost: PropTypes.func,\r\n    doGet: PropTypes.func,\r\n    doPut: PropTypes.func,\r\n    appInfo: PropTypes.func.isRequired,\r\n    appSuccess: PropTypes.func.isRequired,\r\n    genericException: PropTypes.func.isRequired,\r\n    setEditable: PropTypes.func,\r\n    refresh: PropTypes.oneOfType([PropTypes.object])\r\n};\r\n\r\nexport default withApi(withNotification(PhasesForm));","import { unstable_generateUtilityClasses as generateUtilityClasses } from '@mui/utils';\nconst boxClasses = generateUtilityClasses('MuiBox', ['root']);\nexport default boxClasses;","'use client';\n\nimport PropTypes from 'prop-types';\nimport { unstable_ClassNameGenerator as ClassNameGenerator } from '@mui/utils';\nimport createBox from '../createBox';\nimport boxClasses from './boxClasses';\nconst Box = createBox({\n  defaultClassName: boxClasses.root,\n  generateClassName: ClassNameGenerator.generate\n});\nprocess.env.NODE_ENV !== \"production\" ? Box.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default Box;"],"names":["validationSchema","Yup","code","required","name","status","urlBase","endPoints","masters","targets","base","initState","withApi","withNotification","_ref","id","phase_id","doGet","genericException","appSuccess","doPost","doPut","appInfo","setEditable","viewMode","setOpenModal","refreshData","refreshTable","state","setState","useState","isLoading","setLoading","loadFields","useCallback","async","params","url","initForm","data","init","getStatusLabel","error","console","log","useEffect","_jsxs","Dialog","fullWidth","maxWidth","open","onClose","children","_jsx","DialogTitle","DialogContent","Box","p","Loader","Formik","enableReinitialize","initialValues","onSubmit","method","values","getStatusValue","mapValues","valuesForm","concat","messages","crud","update","new","current","refresh","subProps","Form","Grid","container","direction","spacing","item","xs","md","xl","Field","label","component","TextBase","disabled","style","paddingTop","justify","ButtonSave","ButtonBase","onClick","marginLeft","permissions","doDelete","appWarning","editable","idToRemove","setIdToRemove","idToUpdate","setIdToUpdate","openModal","child","useRef","closeModalDelete","refreshTabletargets","openModalForm","arguments","length","undefined","acciones","row","DefaultActions","onEdit","onDelete","deleteTitle","deleteMessage","masterMessages","columns","filter","EstadoChip","estado","_Fragment","Boolean","ConfirmModal","title","message","onAccept","delete","createPermissions","TargetsForm","closeModalUpdate","Table","forwardedRef","serverSideUrl","serverSideData","where","onCreate","updateTitle","phases","breadcrumbs","useParams","setViewMode","tabConfig","TargetsGrid","refreshParent","PageGeneral","withOutCard","sx","pb","minHeight","Card","PhasesForm","pl","pr","TabsComponent","config","navigate","useNavigate","redirectEdit","replace","resp","response","FormButtons","formProps","generateUtilityClasses","createBox","defaultClassName","boxClasses","root","generateClassName","ClassNameGenerator","generate"],"sourceRoot":""}