{"version":3,"file":"static/js/105.261b0607.chunk.js","mappings":"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","sources":["pages/masters/drugs/Edit.js","pages/masters/drugs/Form.js","../node_modules/@mui/system/esm/Box/boxClasses.js","../node_modules/@mui/system/esm/Box/Box.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport { withApi, withNotification } from 'wrappers';\nimport { PageGeneral } from 'components';\nimport masterMessages from 'constantes/masterMessages';\nimport { useParams } from 'react-router';\nimport TabsComponent from 'components/Tab';\nimport { Card, Grid } from '@mui/material';\nimport DrugsForm from './Form';\n\nconst { title, updateTitle } = masterMessages.masters.drugs;\n\nconst breadcrumbs = [{ label: 'Maestros' }, { label: title }];\n\nconst MIN_HEIGHT = 250;\n\nfunction Edit() {\n  const { id } = useParams();\n  const [editable, setEditable] = useState(false);\n  const [viewMode, setViewMode] = useState(false);\n\n  const child = useRef();\n\n  const refreshParent = () => child.current.refresh();\n  \n\n  return (\n    <PageGeneral title={updateTitle} breadcrumbs={breadcrumbs} withOutCard>\n      <Grid container spacing={2} sx={{ pb: 2, minHeight: MIN_HEIGHT }}>\n        <Grid item xs={12} md={12}>\n          <Card sx={{ p: 3, minHeight: '100%' }}>\n              <DrugsForm id={id} refresh={child} setEditable={setEditable} setViewMode={setViewMode} viewMode={viewMode} \n              />\n          </Card>\n        </Grid>\n      </Grid>\n      \n    </PageGeneral>\n  );\n}\n\nexport default withApi(withNotification(Edit));","import React, { useCallback, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Grid, } from '@mui/material';\nimport { Form, Field, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { TextBase, Loader } from 'components';\nimport endPoints from 'endPoints/endPoints';\nimport messages from 'constantes/messages';\nimport { withApi, withNotification } from 'wrappers';\nimport { FormButtons } from 'components/controls';\nimport { useNavigate } from 'react-router';\nimport { Box } from '@mui/system';\nimport { getStatusLabel, getStatusValue } from 'utils/formHelpers';\n\n\nconst validationSchema = Yup.object({\n    code: Yup.string().required('Codigo es requerido'),\n    name: Yup.string().required('Nombre es requerido'),\n    technical_name: Yup.string().required('Nombre tecnico es requerido'),\n    status: Yup.string().required('Estado es requerido'),\n\n});\n\nconst urlBase = endPoints.masters.drugs.base;\n\n\n\nconst baseUrl = '/app/general/masters/drugs';\n\nconst initState = {\n    code: false,\n    name: false,\n    technical_name: false,\n    status: 1,\n\n};\n\nconst selectMap = (data) => {\n    return data.map((row) => ({ value: row.id, label: row.name }));\n};\n\nconst DrugsForm = ({\n    id,\n    doGet,\n    genericException,\n    appSuccess,\n    doPost,\n    doPut,\n    appInfo,\n    setEditable,\n    viewMode,\n    refresh,\n}) => {\n    const navigate = useNavigate();\n    const [state, setState] = useState(initState);\n    const [isLoading, setLoading] = useState(true);\n\n    // Call to API for load form values\n    const loadFields = useCallback(async () => {\n        const params = {\n            url: endPoints.masters.drugs.initForm,\n            data: id ? { id: id } : {}\n        };\n        const resp = await doGet(params);\n        return resp;\n    }, [doGet, id, refresh, setEditable]);\n\n    const init = useCallback(async () => {\n        try {\n            const { drugs, } = await loadFields();\n\n\n            const {\n                code, name, technical_name, status,\n            } = drugs;\n\n            setState({\n                code: code || \"AutomÃ¡tico\",\n                name: name || \"\",\n                technical_name: technical_name || \"\",\n                status: getStatusLabel(status) || \"Activo\",\n\n            });\n\n            setLoading(false);\n        } catch (error) {\n            console.log('ERROR AL INICIAR' + error);\n            genericException(error);\n        }\n    }, [genericException, loadFields]);\n\n    useEffect(() => {\n        init();\n    }, [init]);\n\n    const redirectEdit = (id) => {\n        navigate(`${baseUrl}/edit/${id}`, { replace: false });\n    };\n\n    const mapValues = (values) => {\n        const { code, name, technical_name, status, } = values;\n        return {\n            code, name, technical_name, status: getStatusValue(status),\n        };\n    };\n\n    const submit = async (valuesForm) => {\n        const data = mapValues(valuesForm);\n        const params = {\n            url: id ? `${urlBase}/${id}` : urlBase,\n            data: data\n        };\n        const method = id ? doPut : doPost;\n\n        try {\n            const resp = await method(params);\n            if (id) {\n                appInfo(messages.crud.update);\n                redirectEdit(resp.response.data.id);\n            } else {\n                appSuccess(messages.crud.new);\n                redirectEdit(resp.response.data.id);\n            }\n        } catch (error) {\n            console.log('ERROR AL GUARDAR ' + error);\n            genericException(error);\n        }\n    };\n\n    return (\n        <>\n            {isLoading ? (\n                <Box p={10}>\n                    <Loader />\n                </Box>\n            ) : (\n                <Formik enableReinitialize initialValues={state} validationSchema={validationSchema} onSubmit={submit}>\n                    {(subProps) => (\n                        <Form>\n                            {!id && viewMode ? (\n                                <FormButtons formProps={subProps} />\n                            ) : (\n                                <FormButtons formProps={subProps} />\n                            )}\n                            <Grid container direction=\"row\" spacing={2}>\n\n                                <Grid item xs={6} md={6} xl={6}>\n                                    <Field label=\"Codigo\" name=\"code\" component={TextBase}\n                                        disabled={true}\n                                        InputProps={{\n                                            readOnly: true\n                                        }}\n                                    //onClick={(event) => handleChangecode(event)} \n                                    />\n                                </Grid>\n\n                                <Grid item xs={6} md={6} xl={6}>\n                                    <Field label=\"Nombre\" name=\"name\" component={TextBase}\n\n                                    //onClick={(event) => handleChangename(event)} \n                                    />\n                                </Grid>\n\n                                <Grid item xs={6} md={6} xl={6}>\n                                    <Field label=\"Nombre tÃ©cnico\" name=\"technical_name\" component={TextBase}\n                                    //onClick={(event) => handleChangetechnical_name(event)} \n                                    />\n                                </Grid>\n\n                                <Grid item xs={12} md={6} xl={6}>\n                                    <Field label=\"Estado\" name=\"status\" component={TextBase} disabled={true} />\n                                </Grid>\n\n                            </Grid>\n                        </Form>\n                    )}\n                </Formik>\n            )}\n        </>\n    );\n};\n\nDrugsForm.propTypes = {\n    id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    doPost: PropTypes.func,\n    doGet: PropTypes.func,\n    doPut: PropTypes.func,\n    appInfo: PropTypes.func.isRequired,\n    appSuccess: PropTypes.func.isRequired,\n    genericException: PropTypes.func.isRequired,\n    setEditable: PropTypes.func,\n    refresh: PropTypes.oneOfType([PropTypes.object])\n};\n\nexport default withApi(withNotification(DrugsForm));","import { unstable_generateUtilityClasses as generateUtilityClasses } from '@mui/utils';\nconst boxClasses = generateUtilityClasses('MuiBox', ['root']);\nexport default boxClasses;","'use client';\n\nimport PropTypes from 'prop-types';\nimport { unstable_ClassNameGenerator as ClassNameGenerator } from '@mui/utils';\nimport createBox from '../createBox';\nimport boxClasses from './boxClasses';\nconst Box = createBox({\n  defaultClassName: boxClasses.root,\n  generateClassName: ClassNameGenerator.generate\n});\nprocess.env.NODE_ENV !== \"production\" ? Box.propTypes /* remove-proptypes */ = {\n  // âââââââââââââââââââââââââââââââ Warning âââââââââââââââââââââââââââââââ\n  // â These PropTypes are generated from the TypeScript type definitions. â\n  // â    To update them, edit the d.ts file and run `pnpm proptypes`.     â\n  // âââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââ\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default Box;"],"names":["title","updateTitle","masterMessages","masters","drugs","breadcrumbs","label","withApi","withNotification","id","useParams","editable","setEditable","useState","viewMode","setViewMode","child","useRef","_jsx","PageGeneral","withOutCard","children","Grid","container","spacing","sx","pb","minHeight","item","xs","md","Card","p","DrugsForm","refresh","validationSchema","Yup","code","required","name","technical_name","status","urlBase","endPoints","base","initState","_ref","doGet","genericException","appSuccess","doPost","doPut","appInfo","navigate","useNavigate","state","setState","isLoading","setLoading","loadFields","useCallback","async","params","url","initForm","data","init","getStatusLabel","error","console","log","useEffect","redirectEdit","concat","replace","_Fragment","Box","Loader","Formik","enableReinitialize","initialValues","onSubmit","values","getStatusValue","mapValues","valuesForm","method","resp","messages","crud","update","response","new","subProps","_jsxs","Form","FormButtons","formProps","direction","xl","Field","component","TextBase","disabled","InputProps","readOnly","generateUtilityClasses","createBox","defaultClassName","boxClasses","root","generateClassName","ClassNameGenerator","generate"],"sourceRoot":""}