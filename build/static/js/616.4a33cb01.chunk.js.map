{"version":3,"file":"static/js/616.4a33cb01.chunk.js","mappings":"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","sources":["pages/seguridad/usuario/RolePermission/PermissionList.js","pages/seguridad/usuario/Edit.js","pages/seguridad/usuario/RolePermission/index.js","pages/seguridad/usuario/Form.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Button, DialogTitle, Dialog, DialogActions, DialogContent, Box } from '@mui/material';\r\nimport PropTypes from 'prop-types';\r\nimport { withApi, withNotification } from 'wrappers';\r\nimport { Table, Loader } from 'components';\r\nimport endPoints from 'endPoints/endPoints';\r\nimport messages from 'constantes/messages';\r\nimport masterMessages from 'constantes/masterMessages';\r\n\r\nconst initState = {\r\n  rows: [],\r\n  isLoading: true\r\n};\r\n\r\nconst PermissionList = ({\r\n  id,\r\n  doPost,\r\n  doGet,\r\n  genericException,\r\n  appSuccess,\r\n  setOpenModal,\r\n  refreshTable\r\n}) => {\r\n  const [state, setState] = useState(initState);\r\n  const [selectedRows, setSelectedRows] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const init = async () => {\r\n      const params = {\r\n        url: `${endPoints.seguridad.rolesPermission.getPermission}/${id}`\r\n      };\r\n      try {\r\n        const permisos = await doGet(params);\r\n        setState({\r\n          rows: permisos,\r\n          isLoading: false\r\n        });\r\n      } catch (error) {\r\n        genericException(error);\r\n      }\r\n    };\r\n    init();\r\n  }, [genericException, id, doGet]);\r\n\r\n  // Save the rows selected in the modal\r\n  const onSelectedRows = (dataRows) => {\r\n    setSelectedRows(dataRows);\r\n  };\r\n\r\n  // Call to API for create new records selected in modal products\r\n  const createProducts = async () => {\r\n    const values = [];\r\n    selectedRows.forEach((row) => {\r\n      values.push(row.name);\r\n    });\r\n\r\n    const params = {\r\n      url: endPoints.seguridad.rolesPermission.base,\r\n      data: {\r\n        roleId: id,\r\n        permissions: values\r\n      }\r\n    };\r\n\r\n    try {\r\n      await doPost(params);\r\n      refreshTable();\r\n      setOpenModal();\r\n      appSuccess(messages.crud.new);\r\n    } catch (error) {\r\n      genericException(error);\r\n    }\r\n  };\r\n\r\n  const { isLoading, rows } = state;\r\n  const { title } = masterMessages.seguridad.rolPermission;\r\n\r\n  const columnsModalProducts = [\r\n    { name: 'name', label: 'Permiso' },\r\n    { name: 'description', label: 'Modulo' },\r\n  ];\r\n  return (\r\n    <Dialog open onClose={setOpenModal} fullWidth maxWidth=\"lg\">\r\n      {isLoading ? (\r\n        <Box p={10}>\r\n          <Loader />\r\n        </Box>\r\n      ) : (\r\n        <>\r\n          <DialogTitle>{title}</DialogTitle>\r\n          <DialogContent>\r\n            <Table data={rows} columns={columnsModalProducts} onRowsSelect={onSelectedRows} />\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button disabled={!(selectedRows.length > 0)} variant=\"contained\" onClick={createProducts}>\r\n              Seleccionar\r\n            </Button>\r\n            <Button variant=\"contained\" onClick={setOpenModal}>\r\n              Cancelar\r\n            </Button>\r\n          </DialogActions>\r\n        </>\r\n      )}\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nPermissionList.propTypes = {\r\n  id: PropTypes.string.isRequired,\r\n  refreshTable: PropTypes.func.isRequired,\r\n  setOpenModal: PropTypes.func.isRequired,\r\n  appSuccess: PropTypes.func.isRequired,\r\n  genericException: PropTypes.func.isRequired,\r\n  doPost: PropTypes.func,\r\n  doGet: PropTypes.func\r\n};\r\n\r\nexport default withApi(withNotification(PermissionList));\r\n","import React, { useState, useRef } from 'react';\r\nimport { withApi, withNotification } from 'wrappers';\r\nimport { PageGeneral } from 'components';\r\nimport masterMessages from 'constantes/masterMessages';\r\nimport { useParams } from 'react-router';\r\nimport TabsComponent from 'components/Tab';\r\nimport { Card, Grid } from '@mui/material';\r\nimport Form from './Form';\r\nimport TablePermission from './RolePermission';\r\n\r\nconst { title, updateTitle } = masterMessages.seguridad.rol;\r\n\r\nconst breadcrumbs = [{ label: 'Seguridad' }, { label: title }];\r\n\r\nconst MIN_HEIGHT = 250;\r\n\r\nfunction Edit() {\r\n  const { id } = useParams();\r\n\r\n  return (\r\n    <PageGeneral title={updateTitle} breadcrumbs={breadcrumbs} withOutCard>\r\n      <Grid container spacing={2} sx={{ pb: 2, minHeight: MIN_HEIGHT }}>\r\n        <Grid item xs={12} md={12}>\r\n          <Card sx={{ p: 3, minHeight: '100%' }}>\r\n              <Form id={id} />\r\n          </Card>\r\n        </Grid>\r\n      </Grid>\r\n    </PageGeneral>\r\n  );\r\n}\r\n\r\nexport default withApi(withNotification(Edit));\r\n","import React, { useState, useRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withApi, withNotification } from 'wrappers';\r\nimport { ConfirmModal } from 'components/dialogs';\r\nimport { DefaultActions, Table } from 'components';\r\nimport endPoints from 'endPoints/endPoints';\r\nimport messages from 'constantes/messages';\r\nimport masterMessages from 'constantes/masterMessages';\r\nimport PermissionList from './PermissionList';\r\n\r\n\r\nconst TablePermission = ({\r\n  id: id,\r\n  doDelete,\r\n  appWarning,\r\n  genericException\r\n}) => {\r\n  const [idToRemove, setIdToRemove] = useState(null);\r\n  const [idToUpdate, setIdToUpdate] = useState(null);\r\n  const [openModal, setOpenModal] = useState(false);\r\n\r\n  const child = useRef(null);\r\n\r\n  const openModalDelete = (id) => setIdToRemove(id);\r\n\r\n  const closeModalDelete = () => setIdToRemove(null);\r\n\r\n  const closeModalUpdate = () => {\r\n    setOpenModal(false);\r\n    setIdToUpdate(null);\r\n  };\r\n\r\n  const openModalUpdate = (id = null) => {\r\n    setOpenModal(true);\r\n    setIdToUpdate(id);\r\n  };\r\n\r\n  const refreshTableMateriales = () => child.current.refresh();\r\n\r\n  // Call to API for delete record selected in the table\r\n  const onDelete = async () => {\r\n    const params = {\r\n      url: `${endPoints.seguridad.rolesPermission.base}`,\r\n      data: { name: idToRemove}\r\n    };\r\n    try {\r\n      await doDelete(params);\r\n      refreshTableMateriales();\r\n      closeModalDelete();\r\n      appWarning(messages.crud.delete);\r\n    } catch (error) {\r\n      genericException(error);\r\n    }\r\n  };\r\n  const { deleteTitle, deleteMessage } = masterMessages.presolped.presolped;\r\n\r\n  const columns = [\r\n    { name: 'name', label: 'Permiso' },\r\n    { name: 'description', label: 'Modulo' },\r\n    {\r\n      name: 'acciones',\r\n      label: 'Acciones',\r\n      filter: false,\r\n      component: (row) => {\r\n        const { name } = row;\r\n        return (\r\n          <DefaultActions\r\n            onDelete={() => openModalDelete(name)}\r\n            row={row}\r\n          />\r\n        );\r\n      }\r\n    }\r\n  ];\r\n  return (\r\n    <>\r\n      {Boolean(idToRemove) && (\r\n        <ConfirmModal open title={deleteTitle} message={deleteMessage} onClose={closeModalDelete} onAccept={onDelete} />\r\n      )}\r\n      {Boolean(openModal) && (\r\n        <PermissionList\r\n          id={idToUpdate}\r\n          setOpenModal={closeModalUpdate}\r\n          refreshTable={refreshTableMateriales}\r\n        />\r\n      )}\r\n      <Table\r\n        forwardedRef={child}\r\n        serverSideUrl={`${endPoints.seguridad.rolesPermission.base}/${id}`}\r\n        serverSideData={{ id }}\r\n        onCreate={() => openModalUpdate(id)}\r\n        columns={columns}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nTablePermission.propTypes = {\r\n  id: PropTypes.string.isRequired,\r\n  appWarning: PropTypes.func.isRequired,\r\n  genericException: PropTypes.func.isRequired,\r\n  doDelete: PropTypes.func,\r\n  refreshPresolped: PropTypes.func\r\n};\r\n\r\nexport default withApi(withNotification(TablePermission));\r\n","import React, { useCallback, useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Grid } from '@mui/material';\r\nimport { Form, Field, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { TextBase, Loader } from 'components';\r\nimport endPoints from 'endPoints/endPoints';\r\nimport messages from 'constantes/messages';\r\nimport { withApi, withNotification } from 'wrappers';\r\nimport { FormButtons, SelectBase } from 'components/controls';\r\nimport { useNavigate } from 'react-router';\r\n\r\nconst validationSchema = Yup.object({\r\n\r\n});\r\n\r\nconst urlBase = endPoints.seguridad.usuarios.base;\r\n\r\nconst baseUrl = '/app/seguridad/usuarios';\r\n\r\nconst initState = {\r\n  name: '',\r\n  email: '',\r\n  role: '',\r\n  password: '',\r\n  compania_id: 1,\r\n  roles: []\r\n};\r\n\r\nconst PresolpedForm = ({\r\n  id,\r\n  doGet,\r\n  genericException,\r\n  appSuccess,\r\n  doPost,\r\n  doPut,\r\n  appInfo,\r\n  refresh\r\n}) => {\r\n  const navigate = useNavigate();\r\n  const [state, setState] = useState(initState);\r\n\r\n  // Call to API for load form values\r\n  const loadFields = useCallback(async () => {\r\n    const params = {\r\n      url: endPoints.seguridad.usuarios.initFormComponent,\r\n      data: id ? { id: id } : {}\r\n    };\r\n    const resp = await doGet(params);\r\n    return resp;\r\n  }, [doGet, id, refresh]);\r\n\r\n  const selectMap = (data) => data.map((row) => ({ value: row.id, label: row.name }));\r\n\r\n  const init = useCallback(async () => {\r\n    try {\r\n      const {user,roles}  = await loadFields();\r\n      const {\r\n        name,\r\n        email,\r\n        role_id: role\r\n      } = user;\r\n\r\n      const rolesSelect = selectMap(roles);\r\n\r\n      setState({\r\n        id: id || null,\r\n        name: name || '',\r\n        email: email || '',\r\n        role: role || '',\r\n        roles: rolesSelect\r\n      });\r\n    } catch (error) {\r\n      genericException(error);\r\n    }\r\n  }, [genericException, loadFields]);\r\n\r\n  useEffect(() => {\r\n    init();\r\n  }, [init]);\r\n\r\n  const redirectEdit = (id) => {\r\n    navigate(`${baseUrl}/edit/${id}`, { replace: false });\r\n  };\r\n\r\n  const mapValues = (values) => {\r\n    const { name, email, password, role, username } = values;\r\n    return {\r\n      name: name,\r\n      email: email,\r\n      password: password,\r\n      confirm_password: password,\r\n      role_id: role,\r\n      username: username\r\n    };\r\n  };\r\n\r\n  const submit = async (valuesForm) => {\r\n    const data = mapValues(valuesForm);\r\n    const params = {\r\n      url: id ? `${urlBase}/${id}` : urlBase,\r\n      data: data\r\n    };\r\n    const method = id ? doPut : doPost;\r\n\r\n    try {\r\n      const resp = await method(params);\r\n      if (id) {\r\n        appInfo(messages.crud.update);\r\n        redirectEdit(resp.id);\r\n      } else {\r\n        appSuccess(messages.crud.new);\r\n        redirectEdit(resp.id);\r\n      }\r\n    } catch (error) {\r\n      console.log('ERROR AL GUARDAR '+error);\r\n      genericException(error);\r\n    }\r\n  };\r\n\r\n  const {isLoading, roles } = state;\r\n  return isLoading ? (\r\n    <Loader />\r\n  ) : (\r\n    <Formik\r\n      enableReinitialize\r\n      initialValues={state}\r\n      validationSchema={validationSchema}\r\n      onSubmit={submit}\r\n    >\r\n      {(subProps) => (\r\n        <Form>\r\n          <FormButtons formProps={subProps} />\r\n          <Grid container direction=\"row\" spacing={2}>\r\n            <Grid container item spacing={2}>\r\n              <Grid item xs={6} md={6} xl={6}>\r\n                <Field label=\"Nombre\" name=\"name\" component={TextBase} />\r\n              </Grid>\r\n              <Grid item xs={6} md={6} xl={6}>\r\n                <Field label=\"Correo\" name=\"email\" component={TextBase} />\r\n              </Grid>\r\n              <Grid item xs={6} md={6} xl={6}>\r\n                <Field label=\"Contraseña\" name=\"password\" component={TextBase} />\r\n              </Grid>\r\n              <Grid item xs={6} md={6} xl={6}>\r\n                <Field label=\"Rol\" name=\"role\" component={SelectBase} items={roles} />\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </Form>\r\n      )}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nPresolpedForm.propTypes = {\r\n  id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n  doPost: PropTypes.func,\r\n  doGet: PropTypes.func,\r\n  doPut: PropTypes.func,\r\n  appInfo: PropTypes.func.isRequired,\r\n  appSuccess: PropTypes.func.isRequired,\r\n  genericException: PropTypes.func.isRequired,\r\n  refresh: PropTypes.oneOfType([PropTypes.object])\r\n};\r\n\r\nexport default withApi(withNotification(PresolpedForm));\r\n"],"names":["initState","rows","isLoading","withApi","withNotification","_ref","id","doPost","doGet","genericException","appSuccess","setOpenModal","refreshTable","state","setState","useState","selectedRows","setSelectedRows","useEffect","async","params","url","concat","endPoints","seguridad","rolesPermission","getPermission","permisos","error","init","title","masterMessages","rolPermission","_jsx","Dialog","open","onClose","fullWidth","maxWidth","children","Box","p","Loader","_jsxs","_Fragment","DialogTitle","DialogContent","Table","data","columns","name","label","onRowsSelect","dataRows","DialogActions","Button","disabled","length","variant","onClick","values","forEach","row","push","base","roleId","permissions","messages","crud","new","updateTitle","doDelete","appWarning","idToRemove","setIdToRemove","idToUpdate","setIdToUpdate","openModal","child","useRef","closeModalDelete","refreshTableMateriales","current","refresh","deleteTitle","deleteMessage","presolped","filter","component","DefaultActions","onDelete","openModalDelete","Boolean","ConfirmModal","message","onAccept","delete","PermissionList","closeModalUpdate","forwardedRef","serverSideUrl","serverSideData","onCreate","arguments","undefined","openModalUpdate","rol","breadcrumbs","useParams","PageGeneral","withOutCard","Grid","container","spacing","sx","pb","minHeight","item","xs","md","Card","Form","validationSchema","Yup","urlBase","usuarios","email","role","password","compania_id","roles","doPut","appInfo","navigate","useNavigate","loadFields","useCallback","initFormComponent","user","role_id","rolesSelect","map","value","redirectEdit","replace","Formik","enableReinitialize","initialValues","onSubmit","username","confirm_password","mapValues","valuesForm","method","resp","update","console","log","subProps","FormButtons","formProps","direction","xl","Field","TextBase","SelectBase","items"],"sourceRoot":""}