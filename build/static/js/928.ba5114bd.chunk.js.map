{"version":3,"file":"static/js/928.ba5114bd.chunk.js","mappings":"8QAeA,MAAMA,EAAmBC,EAAAA,GAAW,CAChCC,KAAMD,EAAAA,KAAaE,SAAS,uBAC5BC,KAAMH,EAAAA,KAAaE,SAAS,4BAC5BE,OAAQJ,EAAAA,KAAaE,SAAS,yBAI5BG,EAAUC,EAAAA,EAAUC,QAAQC,OAAOC,KAMnCC,EAAY,CACdT,MAAM,EACNE,MAAM,EACNC,OAAQ,GAyJZ,GAAeO,EAAAA,EAAAA,KAAQC,EAAAA,EAAAA,KAjJJC,IAWZ,IAXa,GAChBC,EAAE,MACFC,EAAK,iBACLC,EAAgB,WAChBC,EAAU,OACVC,EAAM,MACNC,EAAK,QACLC,EAAO,YACPC,EAAW,SACXC,EAAQ,QACRC,GACHV,EACG,MAAMW,GAAWC,EAAAA,EAAAA,OACVC,EAAOC,IAAYC,EAAAA,EAAAA,UAASlB,IAC5BmB,EAAWC,IAAcF,EAAAA,EAAAA,WAAS,GAGnCG,GAAaC,EAAAA,EAAAA,cAAYC,UAC3B,MAAMC,EAAS,CACXC,IAAK7B,EAAAA,EAAUC,QAAQC,OAAO4B,SAC9BC,KAAMvB,EAAK,CAAEA,GAAIA,GAAO,CAAC,GAG7B,aADmBC,EAAMmB,EACd,GACZ,CAACnB,EAAOD,EAAIS,EAASF,IAElBiB,GAAON,EAAAA,EAAAA,cAAYC,UACrB,IACI,MAAM,OAAEzB,SAAkBuB,KAGpB,KACF9B,EAAI,KAAEE,EAAI,OAAEC,GACZI,EAEJmB,EAAS,CACL1B,KAAMA,GAAQ,gBACdE,KAAMA,GAAQ,GACdC,QAAQmC,EAAAA,EAAAA,IAAenC,IAAW,WAItC0B,GAAW,EACf,CAAE,MAAOU,GACLC,QAAQC,IAAI,mBAAqBF,GACjCxB,EAAiBwB,EACrB,IACD,CAACxB,EAAkBe,KAEtBY,EAAAA,EAAAA,YAAU,KACNL,GAAM,GACP,CAACA,IAEJ,MAAMM,EAAgB9B,IAClBU,EAAS,GAADqB,OAnEA,8BAmEW,UAAAA,OAAS/B,GAAM,CAAEgC,SAAS,GAAQ,EAiCzD,OACIC,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,SACKpB,GACGkB,EAAAA,EAAAA,KAACG,EAAAA,EAAG,CAACC,EAAG,GAAGF,UACPF,EAAAA,EAAAA,KAACK,EAAAA,GAAM,OAGXL,EAAAA,EAAAA,KAACM,EAAAA,GAAM,CAACC,oBAAkB,EAACC,cAAe7B,EAAO3B,iBAAkBA,EAAkByD,SA9BlFvB,UACX,MAAMI,EARSoB,KACf,MAAM,KAAExD,EAAI,KAAEE,EAAI,OAAEC,GAAYqD,EAChC,MAAO,CACHxD,OAAME,OAAMC,QAAQsD,EAAAA,EAAAA,IAAetD,GACtC,EAIYuD,CAAUC,GACjB1B,EAAS,CACXC,IAAKrB,EAAE,GAAA+B,OAAMxC,EAAO,KAAAwC,OAAI/B,GAAOT,EAC/BgC,KAAMA,GAEJwB,EAAS/C,EAAKK,EAAQD,EAE5B,IACI,MAAM4C,QAAaD,EAAO3B,GACtBpB,GACAM,EAAQ2C,EAAAA,EAASC,KAAKC,QACtBrB,EAAakB,EAAKI,SAAS7B,KAAKvB,MAEhCG,EAAW8C,EAAAA,EAASC,KAAKG,KACzBvB,EAAakB,EAAKI,SAAS7B,KAAKvB,IAExC,CAAE,MAAO0B,GACLC,QAAQC,IAAI,oBAAsBF,GAClCxB,EAAiBwB,EACrB,GAU8GS,SAChGmB,IACEC,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAAArB,SAAA,EAEGF,EAAAA,EAAAA,KAACwB,EAAAA,GAAW,CAACC,UAAWJ,KAI5BC,EAAAA,EAAAA,MAACI,EAAAA,GAAI,CAACC,WAAS,EAACC,UAAU,MAAMC,QAAS,EAAE3B,SAAA,EAEvCF,EAAAA,EAAAA,KAAC0B,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAE/B,UAC3BF,EAAAA,EAAAA,KAACkC,EAAAA,GAAK,CAACC,MAAM,SAAS/E,KAAK,OAAOgF,UAAWC,EAAAA,GACzCC,UAAU,EACVC,WAAY,CACRC,UAAU,QAMtBxC,EAAAA,EAAAA,KAAC0B,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAE/B,UAC3BF,EAAAA,EAAAA,KAACkC,EAAAA,GAAK,CAACC,MAAM,cAAc/E,KAAK,OAAOgF,UAAWC,EAAAA,QAKtDrC,EAAAA,EAAAA,KAAC0B,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAE/B,UAC5BF,EAAAA,EAAAA,KAACkC,EAAAA,GAAK,CAACC,MAAM,SAAS/E,KAAK,SAASgF,UAAWC,EAAAA,GAAUC,UAAU,eAQ5F,I,6KC5JX,MACI9E,SACIC,QAAQ,MACJgF,EAAK,YACLC,EAAW,cACXC,EAAa,kBACbC,EAAiB,oBACjBC,KAGRC,EAAAA,QAEEC,EACiB,gCADjBA,EAGiB,gCAHjBA,EAIuB,sCAuI7B,GAAenF,EAAAA,EAAAA,KAAQC,EAAAA,EAAAA,KApIHmF,IAChB,MAAOC,EAAUC,IAAerE,EAAAA,EAAAA,UAAS,OAClCsE,EAAYC,IAAiBvE,EAAAA,EAAAA,UAAS,OACtCwE,EAAgBC,IAAqBzE,EAAAA,EAAAA,UAAS,OAC9C0E,EAAWC,IAAgB3E,EAAAA,EAAAA,WAAS,GACrC4E,GAAWC,EAAAA,EAAAA,QAAO,OA6BxB9D,EAAAA,EAAAA,YAAU,KACD2D,GACDL,EAAY,KAChB,GACD,CAACK,IAEJ,MAAMI,EAAc,CAAC,CAAExB,MAAO,WAAa,CAAEA,MAAOM,IAE9CmB,EAAU,8BACVnF,GAAWC,EAAAA,EAAAA,MAYXmF,EAAmBA,IAAMT,EAAc,MAEvCU,EAAWC,IACb/D,EAAAA,EAAAA,KAACgE,EAAAA,GAAc,CACXD,IAAKA,EACLE,OAAQA,KAAMpE,OAXAqE,EAWaH,EAAIhG,QAVnCU,EAAS,GAADqB,OAAI8D,EAAO,UAAA9D,OAASoE,GAAW,CAAEnE,SAAS,EAAMhC,GAAImG,IAD1CA,KAYd,EACAC,eAAgBA,IAAMb,EAAkBS,EAAIhG,MAI9CqG,EAAU,CACZ,CAAEhH,KAAM,OAAQ+E,MAAO,UACvB,CAAE/E,KAAM,OAAQ+E,MAAO,eAEvB,CACIA,MAAO,SACPkC,QAAQ,EACRjC,UAAY2B,IAAQ/D,EAAAA,EAAAA,KAACsE,EAAAA,GAAU,CAACC,QAAQ/E,EAAAA,EAAAA,IAAeuE,EAAI1G,WAE/D,CACID,KAAM,WACNoH,MAAO,IACPC,MAAO,QACPtC,MAAO,WACPkC,QAAQ,EACRjC,UAAY2B,GAAQD,EAAQC,KAGpC,OACIzC,EAAAA,EAAAA,MAACoD,EAAAA,GAAW,CAACf,YAAaA,EAAYzD,SAAA,CACjCyE,QAAQxB,KACLnD,EAAAA,EAAAA,KAAC4E,EAAAA,EAAY,CACTC,MAAI,EACJpC,MAAOC,EACPoC,QAASnC,EACToC,QAASlB,EACTmB,SArFC9F,UACb,MAAME,EAAG,GAAAU,OAAMvC,EAAAA,EAAUC,QAAQC,OAAOC,KAAI,KAAAoC,OAAIqD,GAChD,UACUH,EAAMiC,SAAS,CAAE7F,QACvBqE,EAASyB,QAAQ1G,UACjBqF,IACAb,EAAMmC,WAAWnE,EAAAA,EAASC,KAAKmE,OACnC,CAAE,MAAO3F,GACLuD,EAAMqC,SAASrE,EAAAA,EAASC,KAAKqE,KACjC,CAAC,QACGlC,EAAc,KAClB,GA2EYmC,kBAAmBxC,IAG1B4B,QAAQtB,KACLrD,EAAAA,EAAAA,KAAC4E,EAAAA,EAAY,CACTC,MAAI,EACJpC,MAAOG,EACPkC,QAASjC,EACTkC,QAASA,IAAMzB,EAAkB,MACjC0B,SAAUA,IAjFH9F,WACnB,MAAME,EAAG,GAAAU,OAAMvC,EAAAA,EAAUC,QAAQC,OAAOC,KAAI,kBAAAoC,OAAiBuD,GAC7D,UACUL,EAAM5E,MAAM,CAAEgB,QACpB4D,EAAMmC,WAAWnE,EAAAA,EAASC,KAAKuE,cAC/B/B,EAASyB,QAAQ1G,SACrB,CAAE,MAAOiB,GACLuD,EAAMqC,SAASrE,EAAAA,EAASC,KAAKqE,KACjC,CAAC,QACGhC,EAAkB,KACtB,GAuE4Ba,GAChBoB,kBAAmBxC,IAG1BQ,IACGvD,EAAAA,EAAAA,KAACuB,EAAAA,EAAI,CACDxD,GAAIkF,EACJO,aAAcA,EACdiC,YAAahC,KAGrBzD,EAAAA,EAAAA,KAAC0F,EAAAA,GAAK,CACFC,aAAclC,EACdmC,SAtEQC,KAChBpH,EAAS,GAADqB,OAAI8D,EAAO,QAAQ,CAAE7D,SAAS,GAAQ,EAsEtC+F,cAAevI,EAAAA,EAAUC,QAAQC,OAAOC,KACxC0G,QAASA,EACT3B,MAAOA,EACP8C,kBAAmBxC,MAEb,I,6DCvJtB,MACA,GADmBgD,E,SAAAA,GAAuB,SAAU,CAAC,SC4BrD,GAvBYC,EAAAA,EAAAA,GAAU,CACpBC,iBAAkBC,EAAWC,KAC7BC,kBAAmBC,EAAAA,EAAmBC,U","sources":["pages/masters/phases/Form.js","pages/masters/phases/index.js","../node_modules/@mui/system/esm/Box/boxClasses.js","../node_modules/@mui/system/esm/Box/Box.js"],"sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Grid, } from '@mui/material';\nimport { Form, Field, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { TextBase, Loader } from 'components';\nimport endPoints from 'endPoints/endPoints';\nimport messages from 'constantes/messages';\nimport { withApi, withNotification } from 'wrappers';\nimport { FormButtons } from 'components/controls';\nimport { useNavigate } from 'react-router';\nimport { Box } from '@mui/system';\nimport { getStatusLabel, getStatusValue } from 'utils/formHelpers';\n\n\nconst validationSchema = Yup.object({\n    code: Yup.string().required('Codigo es requerido'),\n    name: Yup.string().required('Nombre fase es requerido'),\n    status: Yup.string().required('Estado es requerido'),\n\n});\n\nconst urlBase = endPoints.masters.phases.base;\n\n\n\nconst baseUrl = '/app/general/masters/phases';\n\nconst initState = {\n    code: false,\n    name: false,\n    status: 1,\n\n};\n\nconst selectMap = (data) => {\n    return data.map((row) => ({ value: row.id, label: row.name }));\n};\n\nconst PhasesForm = ({\n    id,\n    doGet,\n    genericException,\n    appSuccess,\n    doPost,\n    doPut,\n    appInfo,\n    setEditable,\n    viewMode,\n    refresh,\n}) => {\n    const navigate = useNavigate();\n    const [state, setState] = useState(initState);\n    const [isLoading, setLoading] = useState(true);\n\n    // Call to API for load form values\n    const loadFields = useCallback(async () => {\n        const params = {\n            url: endPoints.masters.phases.initForm,\n            data: id ? { id: id } : {}\n        };\n        const resp = await doGet(params);\n        return resp;\n    }, [doGet, id, refresh, setEditable]);\n\n    const init = useCallback(async () => {\n        try {\n            const { phases, } = await loadFields();\n\n\n            const {\n                code, name, status,\n            } = phases;\n\n            setState({\n                code: code || \"AutomÃ¡tico\",\n                name: name || \"\",\n                status: getStatusLabel(status) || \"Activo\",\n\n            });\n\n            setLoading(false);\n        } catch (error) {\n            console.log('ERROR AL INICIAR' + error);\n            genericException(error);\n        }\n    }, [genericException, loadFields]);\n\n    useEffect(() => {\n        init();\n    }, [init]);\n\n    const redirectEdit = (id) => {\n        navigate(`${baseUrl}/edit/${id}`, { replace: false });\n    };\n\n    const mapValues = (values) => {\n        const { code, name, status, } = values;\n        return {\n            code, name, status: getStatusValue(status),\n        };\n    };\n\n    const submit = async (valuesForm) => {\n        const data = mapValues(valuesForm);\n        const params = {\n            url: id ? `${urlBase}/${id}` : urlBase,\n            data: data\n        };\n        const method = id ? doPut : doPost;\n\n        try {\n            const resp = await method(params);\n            if (id) {\n                appInfo(messages.crud.update);\n                redirectEdit(resp.response.data.id);\n            } else {\n                appSuccess(messages.crud.new);\n                redirectEdit(resp.response.data.id);\n            }\n        } catch (error) {\n            console.log('ERROR AL GUARDAR ' + error);\n            genericException(error);\n        }\n    };\n\n    return (\n        <>\n            {isLoading ? (\n                <Box p={10}>\n                    <Loader />\n                </Box>\n            ) : (\n                <Formik enableReinitialize initialValues={state} validationSchema={validationSchema} onSubmit={submit}>\n                    {(subProps) => (\n                        <Form>\n                            {!id && viewMode ? (\n                                <FormButtons formProps={subProps} />\n                            ) : (\n                                <FormButtons formProps={subProps} />\n                            )}\n                            <Grid container direction=\"row\" spacing={2}>\n\n                                <Grid item xs={6} md={6} xl={6}>\n                                    <Field label=\"Codigo\" name=\"code\" component={TextBase}\n                                        disabled={true}\n                                        InputProps={{\n                                            readOnly: true\n                                        }}\n                                    //onClick={(event) => handleChangecode(event)} \n                                    />\n                                </Grid>\n\n                                <Grid item xs={6} md={6} xl={6}>\n                                    <Field label=\"Nombre fase\" name=\"name\" component={TextBase}\n                                    //onClick={(event) => handleChangename(event)} \n                                    />\n                                </Grid>\n\n                                <Grid item xs={12} md={6} xl={6}>\n                                    <Field label=\"Estado\" name=\"status\" component={TextBase} disabled={true} />\n                                </Grid>\n\n                            </Grid>\n                        </Form>\n                    )}\n                </Formik>\n            )}\n        </>\n    );\n};\n\nPhasesForm.propTypes = {\n    id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    doPost: PropTypes.func,\n    doGet: PropTypes.func,\n    doPut: PropTypes.func,\n    appInfo: PropTypes.func.isRequired,\n    appSuccess: PropTypes.func.isRequired,\n    genericException: PropTypes.func.isRequired,\n    setEditable: PropTypes.func,\n    refresh: PropTypes.oneOfType([PropTypes.object])\n};\n\nexport default withApi(withNotification(PhasesForm));","import React, { useState, useRef, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useNavigate } from \"react-router\";\nimport { PageGeneral, DefaultActions, EstadoChip, Table } from \"components\";\nimport endPoints from \"endPoints/endPoints\";\nimport messages from \"constantes/messages\";\nimport { withApi, withNotification } from \"wrappers\";\nimport { ConfirmModal } from \"components/dialogs\";\nimport masterMessages from \"constantes/masterMessages\";\nimport Form from \"./Form\";\nimport { getStatusLabel } from \"utils/formHelpers\";\n\nconst {\n    masters: {\n        phases: {\n            title,\n            deleteTitle,\n            deleteMessage,\n            changeStatusTitle,\n            changeStatusMessage,\n        },\n    },\n} = masterMessages;\n\nconst permissions = {\n    createPermissions: \"general:masters:phases:create\",\n    updatePermissions: \"general:masters:phases:update\",\n    deletePermissions: \"general:masters:phases:delete\",\n    changeStatusPermissions: \"general:masters:phases:changeStatus\",\n};\n\nconst PhasesGrid = (props) => {\n    const [idToEdit, setIdToEdit] = useState(null);\n    const [idToDelete, setIdToDelete] = useState(null);\n    const [idChangeStatus, setIdChangeStatus] = useState(null);\n    const [openModal, setOpenModal] = useState(false);\n    const tableRef = useRef(null);\n\n    const onDelete = async () => {\n        const url = `${endPoints.masters.phases.base}/${idToDelete}`;\n        try {\n            await props.doDelete({ url });\n            tableRef.current.refresh();\n            closeModalDelete();\n            props.appWarning(messages.crud.delete);\n        } catch (error) {\n            props.appError(messages.crud.fail);\n        } finally {\n            setIdToDelete(null);\n        }\n    };\n\n    const onChangeStatus = async () => {\n        const url = `${endPoints.masters.phases.base}/changestatus/${idChangeStatus}`;\n        try {\n            await props.doPut({ url });\n            props.appWarning(messages.crud.changeStatus);\n            tableRef.current.refresh();\n        } catch (error) {\n            props.appError(messages.crud.fail);\n        } finally {\n            setIdChangeStatus(null);\n        }\n    };\n\n    useEffect(() => {\n        if (!openModal) {\n            setIdToEdit(null);\n        }\n    }, [openModal]);\n\n    const breadcrumbs = [{ label: \"masters\" }, { label: title }];\n\n    const baseUrl = \"/app/general/masters/phases\";\n    const navigate = useNavigate();\n\n    const redirectNew = () => {\n        navigate(`${baseUrl}/new`, { replace: false });\n    };\n\n    const redirectEdit = (idModel) => {\n        navigate(`${baseUrl}/edit/${idModel}`, { replace: true, id: idModel });\n    };\n\n    const openModalDelete = ({ id: idToDelete } = {}) =>\n        setIdToDelete(idToDelete);\n    const closeModalDelete = () => setIdToDelete(null);\n\n    const actions = (row) => (\n        <DefaultActions\n            row={row}\n            onEdit={() => redirectEdit(row.id)}\n            //   onDelete={() => openModalDelete(row)}\n            onChangeStatus={() => setIdChangeStatus(row.id)}\n        />\n    );\n\n    const columns = [\n        { name: 'code', label: 'Codigo' },\n        { name: 'name', label: 'Nombre fase' },\n\n        {\n            label: \"Estado\",\n            filter: false,\n            component: (row) => <EstadoChip estado={getStatusLabel(row.status)} />,\n        },\n        {\n            name: \"acciones\",\n            width: 130,\n            align: \"right\",\n            label: \"Acciones\",\n            filter: false,\n            component: (row) => actions(row),\n        },\n    ];\n    return (\n        <PageGeneral breadcrumbs={breadcrumbs}>\n            {Boolean(idToDelete) && (\n                <ConfirmModal\n                    open\n                    title={deleteTitle}\n                    message={deleteMessage}\n                    onClose={closeModalDelete}\n                    onAccept={onDelete}\n                    createPermissions={permissions.deletePermissions}\n                />\n            )}\n            {Boolean(idChangeStatus) && (\n                <ConfirmModal\n                    open\n                    title={changeStatusTitle}\n                    message={changeStatusMessage}\n                    onClose={() => setIdChangeStatus(null)}\n                    onAccept={() => onChangeStatus()}\n                    createPermissions={permissions.changeStatusPermissions}\n                />\n            )}\n            {openModal && (\n                <Form\n                    id={idToEdit}\n                    setOpenModal={setOpenModal}\n                    refreshData={tableRef}\n                />\n            )}\n            <Table\n                forwardedRef={tableRef}\n                onCreate={redirectNew}\n                serverSideUrl={endPoints.masters.phases.base}\n                columns={columns}\n                title={title}\n                createPermissions={permissions.createPermissions}\n            />\n        </PageGeneral>\n    );\n};\n\nPhasesGrid.propTypes = {\n    appWarning: PropTypes.func.isRequired,\n    genericException: PropTypes.func.isRequired,\n    doDelete: PropTypes.func,\n    doGet: PropTypes.func\n};\n\nexport default withApi(withNotification(PhasesGrid));","import { unstable_generateUtilityClasses as generateUtilityClasses } from '@mui/utils';\nconst boxClasses = generateUtilityClasses('MuiBox', ['root']);\nexport default boxClasses;","'use client';\n\nimport PropTypes from 'prop-types';\nimport { unstable_ClassNameGenerator as ClassNameGenerator } from '@mui/utils';\nimport createBox from '../createBox';\nimport boxClasses from './boxClasses';\nconst Box = createBox({\n  defaultClassName: boxClasses.root,\n  generateClassName: ClassNameGenerator.generate\n});\nprocess.env.NODE_ENV !== \"production\" ? Box.propTypes /* remove-proptypes */ = {\n  // âââââââââââââââââââââââââââââââ Warning âââââââââââââââââââââââââââââââ\n  // â These PropTypes are generated from the TypeScript type definitions. â\n  // â    To update them, edit the d.ts file and run `pnpm proptypes`.     â\n  // âââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââ\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default Box;"],"names":["validationSchema","Yup","code","required","name","status","urlBase","endPoints","masters","phases","base","initState","withApi","withNotification","_ref","id","doGet","genericException","appSuccess","doPost","doPut","appInfo","setEditable","viewMode","refresh","navigate","useNavigate","state","setState","useState","isLoading","setLoading","loadFields","useCallback","async","params","url","initForm","data","init","getStatusLabel","error","console","log","useEffect","redirectEdit","concat","replace","_jsx","_Fragment","children","Box","p","Loader","Formik","enableReinitialize","initialValues","onSubmit","values","getStatusValue","mapValues","valuesForm","method","resp","messages","crud","update","response","new","subProps","_jsxs","Form","FormButtons","formProps","Grid","container","direction","spacing","item","xs","md","xl","Field","label","component","TextBase","disabled","InputProps","readOnly","title","deleteTitle","deleteMessage","changeStatusTitle","changeStatusMessage","masterMessages","permissions","props","idToEdit","setIdToEdit","idToDelete","setIdToDelete","idChangeStatus","setIdChangeStatus","openModal","setOpenModal","tableRef","useRef","breadcrumbs","baseUrl","closeModalDelete","actions","row","DefaultActions","onEdit","idModel","onChangeStatus","columns","filter","EstadoChip","estado","width","align","PageGeneral","Boolean","ConfirmModal","open","message","onClose","onAccept","doDelete","current","appWarning","delete","appError","fail","createPermissions","changeStatus","refreshData","Table","forwardedRef","onCreate","redirectNew","serverSideUrl","generateUtilityClasses","createBox","defaultClassName","boxClasses","root","generateClassName","ClassNameGenerator","generate"],"sourceRoot":""}