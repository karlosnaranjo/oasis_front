{"version":3,"file":"static/js/132.843a7807.chunk.js","mappings":"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","sources":["pages/masters/patients/index.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { useNavigate } from \"react-router\";\r\nimport { PageGeneral, DefaultActions, EstadoChip, Table } from \"components\";\r\nimport endPoints from \"endPoints/endPoints\";\r\nimport messages from \"constantes/messages\";\r\nimport { withApi, withNotification } from \"wrappers\";\r\nimport { ConfirmModal } from \"components/dialogs\";\r\nimport masterMessages from \"constantes/masterMessages\";\r\nimport Form from \"./Form\";\r\nimport { getStatusLabel } from \"utils/formHelpers\";\r\nimport Avatar from \"@mui/material/Avatar\";\r\n\r\nconst {\r\n    masters: {\r\n        patients: {\r\n            title,\r\n            deleteTitle,\r\n            deleteMessage,\r\n            changeStatusTitle,\r\n            changeStatusMessage,\r\n        },\r\n    },\r\n} = masterMessages;\r\n\r\nconst permissions = {\r\n    createPermissions: \"general:masters:patients:create\",\r\n    updatePermissions: \"general:masters:patients:update\",\r\n    deletePermissions: \"general:masters:patients:delete\",\r\n    changeStatusPermissions: \"general:masters:patients:changeStatus\",\r\n};\r\n\r\nconst PatientsGrid = (props) => {\r\n    const [idToEdit, setIdToEdit] = useState(null);\r\n    const [idToDelete, setIdToDelete] = useState(null);\r\n    const [idChangeStatus, setIdChangeStatus] = useState(null);\r\n    const [openModal, setOpenModal] = useState(false);\r\n    const tableRef = useRef(null);\r\n\r\n    const onDelete = async () => {\r\n        const url = `${endPoints.masters.patients.base}/${idToDelete}`;\r\n        try {\r\n            await props.doDelete({ url });\r\n            tableRef.current.refresh();\r\n            closeModalDelete();\r\n            props.appWarning(messages.crud.delete);\r\n        } catch (error) {\r\n            props.appError(messages.crud.fail);\r\n        } finally {\r\n            setIdToDelete(null);\r\n        }\r\n    };\r\n\r\n    const onChangeStatus = async () => {\r\n        const url = `${endPoints.masters.patients.base}/changestatus/${idChangeStatus}`;\r\n        try {\r\n            await props.doPut({ url });\r\n            props.appWarning(messages.crud.changeStatus);\r\n            tableRef.current.refresh();\r\n        } catch (error) {\r\n            props.appError(messages.crud.fail);\r\n        } finally {\r\n            setIdChangeStatus(null);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (!openModal) {\r\n            setIdToEdit(null);\r\n        }\r\n    }, [openModal]);\r\n\r\n    const breadcrumbs = [{ label: \"masters\" }, { label: title }];\r\n\r\n    const baseUrl = \"/app/general/masters/patients\";\r\n    const navigate = useNavigate();\r\n\r\n    const redirectNew = () => {\r\n        navigate(`${baseUrl}/new`, { replace: false });\r\n    };\r\n\r\n    const redirectEdit = (idModel) => {\r\n        navigate(`${baseUrl}/edit/${idModel}`, { replace: true, id: idModel });\r\n    };\r\n\r\n    const openModalDelete = ({ id: idToDelete } = {}) =>\r\n        setIdToDelete(idToDelete);\r\n    const closeModalDelete = () => setIdToDelete(null);\r\n\r\n    const actions = (row) => (\r\n        <DefaultActions\r\n            row={row}\r\n            onEdit={() => redirectEdit(row.id)}\r\n            //    onDelete={() => openModalDelete(row)}\r\n            onChangeStatus={() => setIdChangeStatus(row.id)}\r\n        />\r\n    );\r\n\r\n    const columns = [\r\n        {\r\n            name: \"image\",\r\n            label: \"Imagen\",\r\n            component: (row) => (\r\n                <Avatar\r\n                    alt={row.name}\r\n                    src={row.image}\r\n                    style={{ width: \"50px\", height: \"50px\" }}\r\n                />\r\n            ),\r\n        },\r\n        { name: 'code', label: 'Numero' },\r\n        { name: 'name', label: 'Nombres' },\r\n        { name: 'cellphone', label: 'Celular' },\r\n        { name: 'admission_date', label: 'Fecha de Ingreso' },\r\n        { name: 'responsible_adult', label: 'Acudiente' },\r\n        {\r\n            label: \"Estado\",\r\n            filter: false,\r\n            component: (row) => <EstadoChip estado={getStatusLabel(row.status)} />,\r\n        },\r\n        {\r\n            name: \"acciones\",\r\n            width: 130,\r\n            align: \"right\",\r\n            label: \"Acciones\",\r\n            filter: false,\r\n            component: (row) => actions(row),\r\n        },\r\n    ];\r\n    return (\r\n        <PageGeneral breadcrumbs={breadcrumbs}>\r\n            {Boolean(idToDelete) && (\r\n                <ConfirmModal\r\n                    open\r\n                    title={deleteTitle}\r\n                    message={deleteMessage}\r\n                    onClose={closeModalDelete}\r\n                    onAccept={onDelete}\r\n                    createPermissions={permissions.deletePermissions}\r\n                />\r\n            )}\r\n            {Boolean(idChangeStatus) && (\r\n                <ConfirmModal\r\n                    open\r\n                    title={changeStatusTitle}\r\n                    message={changeStatusMessage}\r\n                    onClose={() => setIdChangeStatus(null)}\r\n                    onAccept={() => onChangeStatus()}\r\n                    createPermissions={permissions.changeStatusPermissions}\r\n                />\r\n            )}\r\n            {openModal && (\r\n                <Form\r\n                    id={idToEdit}\r\n                    setOpenModal={setOpenModal}\r\n                    refreshData={tableRef}\r\n                />\r\n            )}\r\n            <Table\r\n                forwardedRef={tableRef}\r\n                onCreate={redirectNew}\r\n                serverSideUrl={endPoints.masters.patients.base}\r\n                columns={columns}\r\n                title={title}\r\n                createPermissions={permissions.createPermissions}\r\n            />\r\n        </PageGeneral>\r\n    );\r\n};\r\n\r\nPatientsGrid.propTypes = {\r\n    appWarning: PropTypes.func.isRequired,\r\n    genericException: PropTypes.func.isRequired,\r\n    doDelete: PropTypes.func,\r\n    doGet: PropTypes.func\r\n};\r\n\r\nexport default withApi(withNotification(PatientsGrid));"],"names":["masters","patients","title","deleteTitle","deleteMessage","changeStatusTitle","changeStatusMessage","masterMessages","permissions","withApi","withNotification","props","idToEdit","setIdToEdit","useState","idToDelete","setIdToDelete","idChangeStatus","setIdChangeStatus","openModal","setOpenModal","tableRef","useRef","useEffect","breadcrumbs","label","baseUrl","navigate","useNavigate","closeModalDelete","actions","row","_jsx","DefaultActions","onEdit","redirectEdit","idModel","id","concat","replace","onChangeStatus","columns","name","component","Avatar","alt","src","image","style","width","height","filter","EstadoChip","estado","getStatusLabel","status","align","_jsxs","PageGeneral","children","Boolean","ConfirmModal","open","message","onClose","onAccept","async","url","endPoints","base","doDelete","current","refresh","appWarning","messages","crud","delete","error","appError","fail","createPermissions","doPut","changeStatus","Form","refreshData","Table","forwardedRef","onCreate","redirectNew","serverSideUrl"],"sourceRoot":""}