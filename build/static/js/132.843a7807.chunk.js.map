{"version":3,"file":"static/js/132.843a7807.chunk.js","mappings":"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","sources":["pages/masters/patients/index.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useNavigate } from \"react-router\";\nimport { PageGeneral, DefaultActions, EstadoChip, Table } from \"components\";\nimport endPoints from \"endPoints/endPoints\";\nimport messages from \"constantes/messages\";\nimport { withApi, withNotification } from \"wrappers\";\nimport { ConfirmModal } from \"components/dialogs\";\nimport masterMessages from \"constantes/masterMessages\";\nimport Form from \"./Form\";\nimport { getStatusLabel } from \"utils/formHelpers\";\nimport Avatar from \"@mui/material/Avatar\";\n\nconst {\n    masters: {\n        patients: {\n            title,\n            deleteTitle,\n            deleteMessage,\n            changeStatusTitle,\n            changeStatusMessage,\n        },\n    },\n} = masterMessages;\n\nconst permissions = {\n    createPermissions: \"general:masters:patients:create\",\n    updatePermissions: \"general:masters:patients:update\",\n    deletePermissions: \"general:masters:patients:delete\",\n    changeStatusPermissions: \"general:masters:patients:changeStatus\",\n};\n\nconst PatientsGrid = (props) => {\n    const [idToEdit, setIdToEdit] = useState(null);\n    const [idToDelete, setIdToDelete] = useState(null);\n    const [idChangeStatus, setIdChangeStatus] = useState(null);\n    const [openModal, setOpenModal] = useState(false);\n    const tableRef = useRef(null);\n\n    const onDelete = async () => {\n        const url = `${endPoints.masters.patients.base}/${idToDelete}`;\n        try {\n            await props.doDelete({ url });\n            tableRef.current.refresh();\n            closeModalDelete();\n            props.appWarning(messages.crud.delete);\n        } catch (error) {\n            props.appError(messages.crud.fail);\n        } finally {\n            setIdToDelete(null);\n        }\n    };\n\n    const onChangeStatus = async () => {\n        const url = `${endPoints.masters.patients.base}/changestatus/${idChangeStatus}`;\n        try {\n            await props.doPut({ url });\n            props.appWarning(messages.crud.changeStatus);\n            tableRef.current.refresh();\n        } catch (error) {\n            props.appError(messages.crud.fail);\n        } finally {\n            setIdChangeStatus(null);\n        }\n    };\n\n    useEffect(() => {\n        if (!openModal) {\n            setIdToEdit(null);\n        }\n    }, [openModal]);\n\n    const breadcrumbs = [{ label: \"masters\" }, { label: title }];\n\n    const baseUrl = \"/app/general/masters/patients\";\n    const navigate = useNavigate();\n\n    const redirectNew = () => {\n        navigate(`${baseUrl}/new`, { replace: false });\n    };\n\n    const redirectEdit = (idModel) => {\n        navigate(`${baseUrl}/edit/${idModel}`, { replace: true, id: idModel });\n    };\n\n    const openModalDelete = ({ id: idToDelete } = {}) =>\n        setIdToDelete(idToDelete);\n    const closeModalDelete = () => setIdToDelete(null);\n\n    const actions = (row) => (\n        <DefaultActions\n            row={row}\n            onEdit={() => redirectEdit(row.id)}\n            //    onDelete={() => openModalDelete(row)}\n            onChangeStatus={() => setIdChangeStatus(row.id)}\n        />\n    );\n\n    const columns = [\n        {\n            name: \"image\",\n            label: \"Imagen\",\n            component: (row) => (\n                <Avatar\n                    alt={row.name}\n                    src={row.image}\n                    style={{ width: \"50px\", height: \"50px\" }}\n                />\n            ),\n        },\n        { name: 'code', label: 'Numero' },\n        { name: 'name', label: 'Nombres' },\n        { name: 'cellphone', label: 'Celular' },\n        { name: 'admission_date', label: 'Fecha de Ingreso' },\n        { name: 'responsible_adult', label: 'Acudiente' },\n        {\n            label: \"Estado\",\n            filter: false,\n            component: (row) => <EstadoChip estado={getStatusLabel(row.status)} />,\n        },\n        {\n            name: \"acciones\",\n            width: 130,\n            align: \"right\",\n            label: \"Acciones\",\n            filter: false,\n            component: (row) => actions(row),\n        },\n    ];\n    return (\n        <PageGeneral breadcrumbs={breadcrumbs}>\n            {Boolean(idToDelete) && (\n                <ConfirmModal\n                    open\n                    title={deleteTitle}\n                    message={deleteMessage}\n                    onClose={closeModalDelete}\n                    onAccept={onDelete}\n                    createPermissions={permissions.deletePermissions}\n                />\n            )}\n            {Boolean(idChangeStatus) && (\n                <ConfirmModal\n                    open\n                    title={changeStatusTitle}\n                    message={changeStatusMessage}\n                    onClose={() => setIdChangeStatus(null)}\n                    onAccept={() => onChangeStatus()}\n                    createPermissions={permissions.changeStatusPermissions}\n                />\n            )}\n            {openModal && (\n                <Form\n                    id={idToEdit}\n                    setOpenModal={setOpenModal}\n                    refreshData={tableRef}\n                />\n            )}\n            <Table\n                forwardedRef={tableRef}\n                onCreate={redirectNew}\n                serverSideUrl={endPoints.masters.patients.base}\n                columns={columns}\n                title={title}\n                createPermissions={permissions.createPermissions}\n            />\n        </PageGeneral>\n    );\n};\n\nPatientsGrid.propTypes = {\n    appWarning: PropTypes.func.isRequired,\n    genericException: PropTypes.func.isRequired,\n    doDelete: PropTypes.func,\n    doGet: PropTypes.func\n};\n\nexport default withApi(withNotification(PatientsGrid));"],"names":["masters","patients","title","deleteTitle","deleteMessage","changeStatusTitle","changeStatusMessage","masterMessages","permissions","withApi","withNotification","props","idToEdit","setIdToEdit","useState","idToDelete","setIdToDelete","idChangeStatus","setIdChangeStatus","openModal","setOpenModal","tableRef","useRef","useEffect","breadcrumbs","label","baseUrl","navigate","useNavigate","closeModalDelete","actions","row","_jsx","DefaultActions","onEdit","redirectEdit","idModel","id","concat","replace","onChangeStatus","columns","name","component","Avatar","alt","src","image","style","width","height","filter","EstadoChip","estado","getStatusLabel","status","align","_jsxs","PageGeneral","children","Boolean","ConfirmModal","open","message","onClose","onAccept","async","url","endPoints","base","doDelete","current","refresh","appWarning","messages","crud","delete","error","appError","fail","createPermissions","doPut","changeStatus","Form","refreshData","Table","forwardedRef","onCreate","redirectNew","serverSideUrl"],"sourceRoot":""}