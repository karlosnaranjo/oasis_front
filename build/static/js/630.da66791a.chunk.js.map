{"version":3,"file":"static/js/630.da66791a.chunk.js","mappings":"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","sources":["pages/masters/drugs/Form.js","pages/masters/drugs/New.js","../node_modules/@mui/system/esm/Box/boxClasses.js","../node_modules/@mui/system/esm/Box/Box.js"],"sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Grid, } from '@mui/material';\nimport { Form, Field, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { TextBase, Loader } from 'components';\nimport endPoints from 'endPoints/endPoints';\nimport messages from 'constantes/messages';\nimport { withApi, withNotification } from 'wrappers';\nimport { FormButtons } from 'components/controls';\nimport { useNavigate } from 'react-router';\nimport { Box } from '@mui/system';\nimport { getStatusLabel, getStatusValue } from 'utils/formHelpers';\n\n\nconst validationSchema = Yup.object({\n    code: Yup.string().required('Codigo es requerido'),\n    name: Yup.string().required('Nombre es requerido'),\n    technical_name: Yup.string().required('Nombre tecnico es requerido'),\n    status: Yup.string().required('Estado es requerido'),\n\n});\n\nconst urlBase = endPoints.masters.drugs.base;\n\n\n\nconst baseUrl = '/app/general/masters/drugs';\n\nconst initState = {\n    code: false,\n    name: false,\n    technical_name: false,\n    status: 1,\n\n};\n\nconst selectMap = (data) => {\n    return data.map((row) => ({ value: row.id, label: row.name }));\n};\n\nconst DrugsForm = ({\n    id,\n    doGet,\n    genericException,\n    appSuccess,\n    doPost,\n    doPut,\n    appInfo,\n    setEditable,\n    viewMode,\n    refresh,\n}) => {\n    const navigate = useNavigate();\n    const [state, setState] = useState(initState);\n    const [isLoading, setLoading] = useState(true);\n\n    // Call to API for load form values\n    const loadFields = useCallback(async () => {\n        const params = {\n            url: endPoints.masters.drugs.initForm,\n            data: id ? { id: id } : {}\n        };\n        const resp = await doGet(params);\n        return resp;\n    }, [doGet, id, refresh, setEditable]);\n\n    const init = useCallback(async () => {\n        try {\n            const { drugs, } = await loadFields();\n\n\n            const {\n                code, name, technical_name, status,\n            } = drugs;\n\n            setState({\n                code: code || \"Automático\",\n                name: name || \"\",\n                technical_name: technical_name || \"\",\n                status: getStatusLabel(status) || \"Activo\",\n\n            });\n\n            setLoading(false);\n        } catch (error) {\n            console.log('ERROR AL INICIAR' + error);\n            genericException(error);\n        }\n    }, [genericException, loadFields]);\n\n    useEffect(() => {\n        init();\n    }, [init]);\n\n    const redirectEdit = (id) => {\n        navigate(`${baseUrl}/edit/${id}`, { replace: false });\n    };\n\n    const mapValues = (values) => {\n        const { code, name, technical_name, status, } = values;\n        return {\n            code, name, technical_name, status: getStatusValue(status),\n        };\n    };\n\n    const submit = async (valuesForm) => {\n        const data = mapValues(valuesForm);\n        const params = {\n            url: id ? `${urlBase}/${id}` : urlBase,\n            data: data\n        };\n        const method = id ? doPut : doPost;\n\n        try {\n            const resp = await method(params);\n            if (id) {\n                appInfo(messages.crud.update);\n                redirectEdit(resp.response.data.id);\n            } else {\n                appSuccess(messages.crud.new);\n                redirectEdit(resp.response.data.id);\n            }\n        } catch (error) {\n            console.log('ERROR AL GUARDAR ' + error);\n            genericException(error);\n        }\n    };\n\n    return (\n        <>\n            {isLoading ? (\n                <Box p={10}>\n                    <Loader />\n                </Box>\n            ) : (\n                <Formik enableReinitialize initialValues={state} validationSchema={validationSchema} onSubmit={submit}>\n                    {(subProps) => (\n                        <Form>\n                            {!id && viewMode ? (\n                                <FormButtons formProps={subProps} />\n                            ) : (\n                                <FormButtons formProps={subProps} />\n                            )}\n                            <Grid container direction=\"row\" spacing={2}>\n\n                                <Grid item xs={6} md={6} xl={6}>\n                                    <Field label=\"Codigo\" name=\"code\" component={TextBase}\n                                        disabled={true}\n                                        InputProps={{\n                                            readOnly: true\n                                        }}\n                                    //onClick={(event) => handleChangecode(event)} \n                                    />\n                                </Grid>\n\n                                <Grid item xs={6} md={6} xl={6}>\n                                    <Field label=\"Nombre\" name=\"name\" component={TextBase}\n\n                                    //onClick={(event) => handleChangename(event)} \n                                    />\n                                </Grid>\n\n                                <Grid item xs={6} md={6} xl={6}>\n                                    <Field label=\"Nombre técnico\" name=\"technical_name\" component={TextBase}\n                                    //onClick={(event) => handleChangetechnical_name(event)} \n                                    />\n                                </Grid>\n\n                                <Grid item xs={12} md={6} xl={6}>\n                                    <Field label=\"Estado\" name=\"status\" component={TextBase} disabled={true} />\n                                </Grid>\n\n                            </Grid>\n                        </Form>\n                    )}\n                </Formik>\n            )}\n        </>\n    );\n};\n\nDrugsForm.propTypes = {\n    id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    doPost: PropTypes.func,\n    doGet: PropTypes.func,\n    doPut: PropTypes.func,\n    appInfo: PropTypes.func.isRequired,\n    appSuccess: PropTypes.func.isRequired,\n    genericException: PropTypes.func.isRequired,\n    setEditable: PropTypes.func,\n    refresh: PropTypes.oneOfType([PropTypes.object])\n};\n\nexport default withApi(withNotification(DrugsForm));","import React, { useState, useRef } from 'react';\nimport { PageGeneral } from 'components';\nimport masterMessages from 'constantes/masterMessages';\nimport DrugsForm from './Form';\n\nconst { title, createTitle } = masterMessages.masters.drugs;\n\nconst breadcrumbs = [{ label: 'Maestros' }, { label: title }];\n\nfunction New() {\n  const [editable, setEditable] = useState(false);\n  const [viewMode, setViewMode] = useState(false);\n  const child = useRef();\n\n  return (\n    <PageGeneral title={createTitle} breadcrumbs={breadcrumbs}>\n      <DrugsForm\n        refresh={child}\n        setEditable={setEditable}\n        setViewMode={setViewMode}\n        viewMode={viewMode} \n      />\n    </PageGeneral>\n  );\n}\n\nNew.propTypes = {};\n\nexport default New;","import { unstable_generateUtilityClasses as generateUtilityClasses } from '@mui/utils';\nconst boxClasses = generateUtilityClasses('MuiBox', ['root']);\nexport default boxClasses;","'use client';\n\nimport PropTypes from 'prop-types';\nimport { unstable_ClassNameGenerator as ClassNameGenerator } from '@mui/utils';\nimport createBox from '../createBox';\nimport boxClasses from './boxClasses';\nconst Box = createBox({\n  defaultClassName: boxClasses.root,\n  generateClassName: ClassNameGenerator.generate\n});\nprocess.env.NODE_ENV !== \"production\" ? Box.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default Box;"],"names":["validationSchema","Yup","code","required","name","technical_name","status","urlBase","endPoints","masters","drugs","base","initState","withApi","withNotification","_ref","id","doGet","genericException","appSuccess","doPost","doPut","appInfo","setEditable","viewMode","refresh","navigate","useNavigate","state","setState","useState","isLoading","setLoading","loadFields","useCallback","async","params","url","initForm","data","init","getStatusLabel","error","console","log","useEffect","redirectEdit","concat","replace","_jsx","_Fragment","children","Box","p","Loader","Formik","enableReinitialize","initialValues","onSubmit","values","getStatusValue","mapValues","valuesForm","method","resp","messages","crud","update","response","new","subProps","_jsxs","Form","FormButtons","formProps","Grid","container","direction","spacing","item","xs","md","xl","Field","label","component","TextBase","disabled","InputProps","readOnly","title","createTitle","masterMessages","breadcrumbs","editable","setViewMode","child","useRef","PageGeneral","DrugsForm","generateUtilityClasses","createBox","defaultClassName","boxClasses","root","generateClassName","ClassNameGenerator","generate"],"sourceRoot":""}