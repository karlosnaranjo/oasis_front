{"version":3,"file":"static/js/825.976d0b53.chunk.js","mappings":"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","sources":["pages/transactions/evaluations/Edit.js","pages/transactions/evaluations/Form.js","../node_modules/@mui/system/esm/Box/boxClasses.js","../node_modules/@mui/system/esm/Box/Box.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport { withApi, withNotification } from 'wrappers';\r\nimport { PageGeneral } from 'components';\r\nimport masterMessages from 'constantes/masterMessages';\r\nimport { useParams } from 'react-router';\r\nimport TabsComponent from 'components/Tab';\r\nimport { Card, Grid } from '@mui/material';\r\nimport EvaluationsForm from './Form';\r\n\r\nconst { title, updateTitle } = masterMessages.transactions.evaluations;\r\n\r\nconst breadcrumbs = [{ label: 'Maestros' }, { label: title }];\r\n\r\nconst MIN_HEIGHT = 250;\r\n\r\nfunction Edit() {\r\n  const { id } = useParams();\r\n  const [editable, setEditable] = useState(false);\r\n  const [viewMode, setViewMode] = useState(false);\r\n\r\n  const child = useRef();\r\n\r\n  const refreshParent = () => child.current.refresh();\r\n  \r\n\r\n  return (\r\n    <PageGeneral title={updateTitle} breadcrumbs={breadcrumbs} withOutCard>\r\n      <Grid container spacing={2} sx={{ pb: 2, minHeight: MIN_HEIGHT }}>\r\n        <Grid item xs={12} md={12}>\r\n          <Card sx={{ p: 3, minHeight: '100%' }}>\r\n              <EvaluationsForm id={id} refresh={child} setEditable={setEditable} setViewMode={setViewMode} viewMode={viewMode} \r\n              />\r\n          </Card>\r\n        </Grid>\r\n      </Grid>\r\n      \r\n    </PageGeneral>\r\n  );\r\n}\r\n\r\nexport default withApi(withNotification(Edit));","import React, { useCallback, useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Grid,  } from '@mui/material';\r\nimport { Form, Field, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { TextBase, SelectBase,  Loader } from 'components';\r\nimport endPoints from 'endPoints/endPoints';\r\nimport messages from 'constantes/messages';\r\nimport { withApi, withNotification } from 'wrappers';\r\nimport { FormButtons } from 'components/controls';\r\nimport { useNavigate } from 'react-router';\r\nimport { Box } from '@mui/system';\r\nimport { getStatusLabel, getStatusValue } from 'utils/formHelpers';\r\nimport DatePickerBase from 'components/pickers/DatePickerBase';\r\n\r\nconst validationSchema = Yup.object({\r\n   \tcode: Yup.string().required('Codigo es requerido'),\r\n\tpatient_id: Yup.string().required('Paciente es requerido'),\r\n\tcreation_date: Yup.string().required('Fecha de Creacion es requerido'),\r\n\tphase_id: Yup.string().required('Fase es requerido'),\r\n\ttarget_id: Yup.string().required('Objetivo es requerido'),\r\n\tstart_date: Yup.string().required('Fecha inicio es requerido'),\r\n\tend_date: Yup.string().required('Fecha final es requerido'),\r\n\tclinical_team: Yup.string().required('Apreciacion Equipo Clinico es requerido'),\r\n\tachievement: Yup.string().required('Logros y Dificultades es requerido'),\r\n\tstrategy: Yup.string().required('Estrategias Utilizadas es requerido'),\r\n\trequirement: Yup.string().required('Exigencias es requerido'),\r\n\ttest: Yup.string().required('Evaluacion es requerido'),\r\n\tstatus: Yup.string().required('Estado es requerido'),\r\n \r\n});\r\n\r\nconst urlBase = endPoints.transactions.evaluations.base;\r\nconst targetsByPhaseUrl = `${urlBase}/targets-by-phase`;\r\n\r\nlet patientList = [];\r\nlet phaseList = [];\r\nlet targetList = [];\r\nlet testList = [{\"label\":\"Positivo\",\"value\":\"Positivo\"},{\"label\":\"Negativo\",\"value\":\"Negativo\"},{\"label\":\"Observacion\",\"value\":\"Observacion\"}];\r\n\r\n\r\nconst baseUrl = '/app/general/transactions/evaluations';\r\n\r\nconst initState = {\r\n    \tcode: false,\r\n\tpatient_id: null,\r\n\tcreation_date: false,\r\n\tphase_id: null,\r\n\ttarget_id: null,\r\n\tstart_date: false,\r\n\tend_date: false,\r\n\tclinical_team: false,\r\n\tachievement: false,\r\n\tstrategy: false,\r\n\trequirement: false,\r\n\ttest: \"\",\r\n\tstatus: 1,\r\n\r\n};\r\n\r\nconst selectMap = (data) => {\r\n    return data.map((row) => ({ value: row.id, label: row.name }));\r\n};\r\n\r\nconst EvaluationsForm = ({\r\n    id,\r\n    doGet,\r\n    genericException,\r\n    appSuccess,\r\n    doPost,\r\n    doPut,\r\n    appInfo,\r\n    setEditable,\r\n    viewMode,\r\n    refresh,\r\n    }) => {\r\n    const navigate = useNavigate();\r\n    const [state, setState] = useState(initState);\r\n    const [isLoading, setLoading] = useState(true);\r\n\r\n    // Call to API for load form values\r\n    const loadFields = useCallback(async () => {\r\n    const params = {\r\n        url: endPoints.transactions.evaluations.initForm,\r\n        data: id ? { id: id } : {}\r\n    };\r\n    const resp = await doGet(params);\r\n    return resp;\r\n    }, [doGet, id, refresh, setEditable]);\r\n\r\n    const init = useCallback(async () => {\r\n    try {\r\n        const { evaluations, patient, phase, target,  } = await loadFields();\r\npatientList = selectMap(patient);\r\nphaseList = selectMap(phase);\r\ntargetList = selectMap(target);\r\n\r\n\r\n        const {\r\ncode, patient_id, creation_date, phase_id, target_id, start_date, end_date, clinical_team, achievement, strategy, requirement, test, status, \r\n        } = evaluations;\r\n\r\n        setState({\r\n\t\t\tcode: code || \"\",\r\n\t\t\tpatient_id: patient_id || null,\r\n\t\t\tcreation_date: creation_date || \"\",\r\n\t\t\tphase_id: phase_id || null,\r\n\t\t\ttarget_id: target_id || null,\r\n\t\t\tstart_date: start_date || \"\",\r\n\t\t\tend_date: end_date || \"\",\r\n\t\t\tclinical_team: clinical_team || \"\",\r\n\t\t\tachievement: achievement || \"\",\r\n\t\t\tstrategy: strategy || \"\",\r\n\t\t\trequirement: requirement || \"\",\r\n\t\t\ttest: test || \"\",\r\n\t\t\tstatus: getStatusLabel(status) || \"Activo\",\r\n\r\n        });\r\n\r\n        setLoading(false);\r\n    } catch (error) {\r\n        console.log('ERROR AL INICIAR'+error);\r\n        genericException(error);\r\n    }\r\n    }, [genericException, loadFields]);\r\n\r\n    useEffect(() => {\r\n        init();\r\n    }, [init]);\r\n\r\n    const redirectEdit = (id) => {\r\n        navigate(`${baseUrl}/edit/${id}`, { replace: false });\r\n    };\r\n\r\n    const mapValues = (values) => {\r\n        const { code, patient_id, creation_date, phase_id, target_id, start_date, end_date, clinical_team, achievement, strategy, requirement, test, status,  } = values;\r\n        return {\r\ncode, patient_id, creation_date, phase_id, target_id, start_date, end_date, clinical_team, achievement, strategy, requirement, test, status: getStatusValue(status), \r\n        };\r\n    };\r\n\r\n    const submit = async (valuesForm) => {\r\n        const data = mapValues(valuesForm);\r\n        const params = {\r\n            url: id ? `${urlBase}/${id}` : urlBase,\r\n            data: data\r\n        };\r\n        const method = id ? doPut : doPost;\r\n\r\n        try {\r\n            const resp = await method(params);\r\n            if (id) {\r\n                appInfo(messages.crud.update);\r\n                redirectEdit(resp.response.data.id);\r\n            } else {\r\n                appSuccess(messages.crud.new);\r\n                redirectEdit(resp.response.data.id);\r\n            }\r\n        } catch (error) {\r\n            console.log('ERROR AL GUARDAR '+error);\r\n            genericException(error);\r\n        }\r\n    };\r\n\r\n    const handlePhaseChange = async (selectedOption, formikProps) => {\r\n        try {\r\n            if (selectedOption) {\r\n                const params = {\r\n                    url: targetsByPhaseUrl,\r\n                    data: { phase_id: selectedOption }\r\n                };\r\n                const resp = await doGet(params);\r\n                targetList = selectMap(resp.targets);\r\n                formikProps.setFieldValue('target_id', null);\r\n            } else {\r\n                targetList = [];\r\n                formikProps.setFieldValue('target_id', null);\r\n            }\r\n        } catch (error) {\r\n            console.log('ERROR AL CARGAR OBJETIVOS '+error);\r\n            genericException(error);\r\n        }\r\n    };\r\n\r\n    return (\r\n    <>\r\n        {isLoading ? (\r\n            <Box p={10}>\r\n                <Loader />\r\n            </Box>\r\n        ) : (\r\n            <Formik enableReinitialize initialValues={state} validationSchema={validationSchema} onSubmit={submit}>\r\n                {(subProps) => (\r\n                <Form>\r\n                    {!id && viewMode ? (\r\n                    <FormButtons formProps={subProps} />\r\n                    ) : (\r\n                    <FormButtons formProps={subProps} />\r\n                    )}\r\n                    <Grid container direction=\"row\" spacing={2}>\r\n    \r\n                        <Grid item xs={6} md={6} xl={6}>\r\n                            <Field label=\"Codigo\" name=\"code\" component={TextBase} \r\n                                //onClick={(event) => handleChangecode(event)} \r\n                            />\r\n                        </Grid>\r\n            \r\n                                <Grid item xs={6} md={6} xl={6}>\r\n                                    <Field label=\"Paciente\" name=\"patient_id\" component={SelectBase} items={patientList}  \r\n                                        /*onOptionSelected={(selectedOption) => handleOnChangepatient_id(selectedOption, subProps)} */\r\n                                    />\r\n                                </Grid>\r\n                    \r\n                        <Grid item xs={6} md={6} xl={6}>\r\n                            <Field label=\"Fecha de Creacion\" name=\"creation_date\" component={DatePickerBase} \r\n                                //onClick={(event) => handleChangecreation_date(event)} \r\n                            />\r\n                        </Grid>\r\n            \r\n                                <Grid item xs={6} md={6} xl={6}>\r\n                                    <Field label=\"Fase\" name=\"phase_id\" component={SelectBase} items={phaseList}  \r\n                                        onOptionSelected={(selectedOption) => handlePhaseChange(selectedOption, subProps)}\r\n                                    />\r\n                                </Grid>\r\n                    \r\n                                <Grid item xs={6} md={6} xl={6}>\r\n                                    <Field label=\"Objetivo\" name=\"target_id\" component={SelectBase} items={targetList}  \r\n                                        /*onOptionSelected={(selectedOption) => handleOnChangetarget_id(selectedOption, subProps)} */\r\n                                    />\r\n                                </Grid>\r\n                    \r\n                        <Grid item xs={6} md={6} xl={6}>\r\n                            <Field label=\"Fecha inicio\" name=\"start_date\" component={DatePickerBase} \r\n                                //onClick={(event) => handleChangestart_date(event)} \r\n                            />\r\n                        </Grid>\r\n            \r\n                        <Grid item xs={6} md={6} xl={6}>\r\n                            <Field label=\"Fecha final\" name=\"end_date\" component={DatePickerBase} \r\n                                //onClick={(event) => handleChangeend_date(event)} \r\n                            />\r\n                        </Grid>\r\n            \r\n                        <Grid item xs={6} md={6} xl={6}>\r\n                            <Field label=\"Apreciacion Equipo Clinico\" name=\"clinical_team\" component={TextBase} \r\n                                //onClick={(event) => handleChangeclinical_team(event)} \r\n                            />\r\n                        </Grid>\r\n            \r\n                        <Grid item xs={6} md={6} xl={6}>\r\n                            <Field label=\"Logros y Dificultades\" name=\"achievement\" component={TextBase} \r\n                                //onClick={(event) => handleChangeachievement(event)} \r\n                            />\r\n                        </Grid>\r\n            \r\n                        <Grid item xs={6} md={6} xl={6}>\r\n                            <Field label=\"Estrategias Utilizadas\" name=\"strategy\" component={TextBase} \r\n                                //onClick={(event) => handleChangestrategy(event)} \r\n                            />\r\n                        </Grid>\r\n            \r\n                        <Grid item xs={6} md={6} xl={6}>\r\n                            <Field label=\"Exigencias\" name=\"requirement\" component={TextBase} \r\n                                //onClick={(event) => handleChangerequirement(event)} \r\n                            />\r\n                        </Grid>\r\n            \r\n                        <Grid item xs={12} md={6} xl={6}>\r\n                            <Field label=\"Evaluacion\" name=\"test\" component={SelectBase}  items={testList} />\r\n                        </Grid>\r\n            \r\n                        <Grid item xs={12} md={6} xl={6}>\r\n                            <Field label=\"Estado\" name=\"status\" component={TextBase} disabled={true} />\r\n                        </Grid>\r\n            \r\n                    </Grid>\r\n                </Form>\r\n                )}\r\n            </Formik>\r\n        )}\r\n    </>\r\n    );\r\n};\r\n\r\nEvaluationsForm.propTypes = {\r\n    id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n    doPost: PropTypes.func,\r\n    doGet: PropTypes.func,\r\n    doPut: PropTypes.func,\r\n    appInfo: PropTypes.func.isRequired,\r\n    appSuccess: PropTypes.func.isRequired,\r\n    genericException: PropTypes.func.isRequired,\r\n    setEditable: PropTypes.func,\r\n    refresh: PropTypes.oneOfType([PropTypes.object])\r\n};\r\n\r\nexport default withApi(withNotification(EvaluationsForm));","import { unstable_generateUtilityClasses as generateUtilityClasses } from '@mui/utils';\nconst boxClasses = generateUtilityClasses('MuiBox', ['root']);\nexport default boxClasses;","'use client';\n\nimport PropTypes from 'prop-types';\nimport { unstable_ClassNameGenerator as ClassNameGenerator } from '@mui/utils';\nimport createBox from '../createBox';\nimport boxClasses from './boxClasses';\nconst Box = createBox({\n  defaultClassName: boxClasses.root,\n  generateClassName: ClassNameGenerator.generate\n});\nprocess.env.NODE_ENV !== \"production\" ? Box.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default Box;"],"names":["title","updateTitle","masterMessages","transactions","evaluations","breadcrumbs","label","withApi","withNotification","id","useParams","editable","setEditable","useState","viewMode","setViewMode","child","useRef","_jsx","PageGeneral","withOutCard","children","Grid","container","spacing","sx","pb","minHeight","item","xs","md","Card","p","EvaluationsForm","refresh","validationSchema","Yup","code","required","patient_id","creation_date","phase_id","target_id","start_date","end_date","clinical_team","achievement","strategy","requirement","test","status","urlBase","endPoints","base","targetsByPhaseUrl","concat","patientList","phaseList","targetList","testList","initState","selectMap","data","map","row","value","name","_ref","doGet","genericException","appSuccess","doPost","doPut","appInfo","navigate","useNavigate","state","setState","isLoading","setLoading","loadFields","useCallback","async","params","url","initForm","init","patient","phase","target","getStatusLabel","error","console","log","useEffect","redirectEdit","replace","_Fragment","Box","Loader","Formik","enableReinitialize","initialValues","onSubmit","values","getStatusValue","mapValues","valuesForm","method","resp","messages","crud","update","response","new","subProps","_jsxs","Form","FormButtons","formProps","direction","xl","Field","component","TextBase","SelectBase","items","DatePickerBase","onOptionSelected","selectedOption","formikProps","targets","setFieldValue","handlePhaseChange","disabled","generateUtilityClasses","createBox","defaultClassName","boxClasses","root","generateClassName","ClassNameGenerator","generate"],"sourceRoot":""}