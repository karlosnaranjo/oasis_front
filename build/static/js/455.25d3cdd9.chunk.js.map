{"version":3,"file":"static/js/455.25d3cdd9.chunk.js","mappings":"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","sources":["pages/transactions/evolutions/Form.js","pages/transactions/evolutions/New.js","../node_modules/@mui/system/esm/Box/boxClasses.js","../node_modules/@mui/system/esm/Box/Box.js"],"sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Grid, } from '@mui/material';\r\nimport { Form, Field, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { TextBase, SelectBase, TextAreaBase, Loader } from 'components';\r\nimport endPoints from 'endPoints/endPoints';\r\nimport messages from 'constantes/messages';\r\nimport { withApi, withNotification } from 'wrappers';\r\nimport { FormButtons } from 'components/controls';\r\nimport { useNavigate } from 'react-router';\r\nimport { Box } from '@mui/system';\r\nimport { getStatusLabel, getStatusValue } from 'utils/formHelpers';\r\nimport DatePickerBase from 'components/pickers/DatePickerBase';\r\n\r\nconst validationSchema = Yup.object({\r\n    code: Yup.string().required('Codigo es requerido'),\r\n    patient_id: Yup.string().required('Paciente es requerido'),\r\n    employee_id: Yup.string().required('Empleado es requerido'),\r\n    date_of_evolution: Yup.string().required('Fecha de registro es requerido'),\r\n    area: Yup.string().required('Area que registra evolucion es requerido'),\r\n    comments: Yup.string().required('Notas es requerido'),\r\n    status: Yup.string().required('Estado es requerido'),\r\n\r\n});\r\n\r\nconst urlBase = endPoints.transactions.evolutions.base;\r\n\r\nlet patientList = [];\r\nlet employeeList = [];\r\n\r\n\r\nconst baseUrl = '/app/general/transactions/evolutions';\r\n\r\nconst initState = {\r\n    code: false,\r\n    patient_id: null,\r\n    employee_id: null,\r\n    date_of_evolution: false,\r\n    area: false,\r\n    comments: false,\r\n    status: 1,\r\n\r\n};\r\n\r\nconst selectMap = (data) => {\r\n    return data.map((row) => ({ value: row.id, label: row.name }));\r\n};\r\n\r\nconst EvolutionsForm = ({\r\n    id,\r\n    doGet,\r\n    genericException,\r\n    appSuccess,\r\n    doPost,\r\n    doPut,\r\n    appInfo,\r\n    setEditable,\r\n    viewMode,\r\n    refresh,\r\n}) => {\r\n    const navigate = useNavigate();\r\n    const [state, setState] = useState(initState);\r\n    const [isLoading, setLoading] = useState(true);\r\n\r\n    // Call to API for load form values\r\n    const loadFields = useCallback(async () => {\r\n        const params = {\r\n            url: endPoints.transactions.evolutions.initForm,\r\n            data: id ? { id: id } : {}\r\n        };\r\n        const resp = await doGet(params);\r\n        return resp;\r\n    }, [doGet, id, refresh, setEditable]);\r\n\r\n    const init = useCallback(async () => {\r\n        try {\r\n            const { evolutions, patient, employee, } = await loadFields();\r\n            patientList = selectMap(patient);\r\n            employeeList = selectMap(employee);\r\n\r\n\r\n            const {\r\n                code, patient_id, employee_id, date_of_evolution, area, comments, status,\r\n            } = evolutions;\r\n\r\n            setState({\r\n                code: code || \"AutomÃ¡tico\",\r\n                patient_id: patient_id || null,\r\n                employee_id: employee_id || null,\r\n                date_of_evolution: date_of_evolution || \"\",\r\n                area: area || \"\",\r\n                comments: comments || \"\",\r\n                status: getStatusLabel(status) || \"Activo\",\r\n\r\n            });\r\n\r\n            setLoading(false);\r\n        } catch (error) {\r\n            console.log('ERROR AL INICIAR' + error);\r\n            genericException(error);\r\n        }\r\n    }, [genericException, loadFields]);\r\n\r\n    useEffect(() => {\r\n        init();\r\n    }, [init]);\r\n\r\n    const redirectEdit = (id) => {\r\n        navigate(`${baseUrl}/edit/${id}`, { replace: false });\r\n    };\r\n\r\n    const mapValues = (values) => {\r\n        const { code, patient_id, employee_id, date_of_evolution, area, comments, status, } = values;\r\n        return {\r\n            code, patient_id, employee_id, date_of_evolution, area, comments, status: getStatusValue(status),\r\n        };\r\n    };\r\n\r\n    const submit = async (valuesForm) => {\r\n        const data = mapValues(valuesForm);\r\n        const params = {\r\n            url: id ? `${urlBase}/${id}` : urlBase,\r\n            data: data\r\n        };\r\n        const method = id ? doPut : doPost;\r\n\r\n        try {\r\n            const resp = await method(params);\r\n            if (id) {\r\n                appInfo(messages.crud.update);\r\n                redirectEdit(resp.response.data.id);\r\n            } else {\r\n                appSuccess(messages.crud.new);\r\n                redirectEdit(resp.response.data.id);\r\n            }\r\n        } catch (error) {\r\n            console.log('ERROR AL GUARDAR ' + error);\r\n            genericException(error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {isLoading ? (\r\n                <Box p={10}>\r\n                    <Loader />\r\n                </Box>\r\n            ) : (\r\n                <Formik enableReinitialize initialValues={state} validationSchema={validationSchema} onSubmit={submit}>\r\n                    {(subProps) => (\r\n                        <Form>\r\n                            {!id && viewMode ? (\r\n                                <FormButtons formProps={subProps} />\r\n                            ) : (\r\n                                <FormButtons formProps={subProps} />\r\n                            )}\r\n                            <Grid container direction=\"row\" spacing={2}>\r\n\r\n                                <Grid item xs={6} md={6} xl={6}>\r\n                                    <Field label=\"Codigo\" name=\"code\" component={TextBase}\r\n                                        disabled={true}\r\n                                        InputProps={{\r\n                                            readOnly: true\r\n                                        }}\r\n                                    //onClick={(event) => handleChangecode(event)} \r\n                                    />\r\n                                </Grid>\r\n\r\n                                <Grid item xs={6} md={6} xl={6}>\r\n                                    <Field label=\"Paciente\" name=\"patient_id\" component={SelectBase} items={patientList}\r\n                                    /*onOptionSelected={(selectedOption) => handleOnChangepatient_id(selectedOption, subProps)} */\r\n                                    />\r\n                                </Grid>\r\n\r\n                                <Grid item xs={6} md={6} xl={6}>\r\n                                    <Field label=\"Empleado\" name=\"employee_id\" component={SelectBase} items={employeeList}\r\n                                    /*onOptionSelected={(selectedOption) => handleOnChangeemployee_id(selectedOption, subProps)} */\r\n                                    />\r\n                                </Grid>\r\n\r\n                                <Grid item xs={6} md={6} xl={6}>\r\n                                    <Field label=\"Fecha de registro\" name=\"date_of_evolution\" component={DatePickerBase}\r\n                                    //onClick={(event) => handleChangedate_of_evolution(event)} \r\n                                    />\r\n                                </Grid>\r\n\r\n                                <Grid item xs={6} md={6} xl={6}>\r\n                                    <Field label=\"Ãrea que registra evoluciÃ³n\" name=\"area\" component={TextBase}\r\n                                    />\r\n                                </Grid>\r\n\r\n                                <Grid item xs={12} md={12} xl={12}>\r\n                                    <Field label=\"Notas\" name=\"comments\" component={TextAreaBase} rows={8}\r\n                                    //onClick={(event) => handleChangecomments(event)} \r\n                                    />\r\n                                </Grid>\r\n\r\n                                <Grid item xs={12} md={6} xl={6}>\r\n                                    <Field label=\"Estado\" name=\"status\" component={TextBase} disabled={true} />\r\n                                </Grid>\r\n\r\n                            </Grid>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nEvolutionsForm.propTypes = {\r\n    id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n    doPost: PropTypes.func,\r\n    doGet: PropTypes.func,\r\n    doPut: PropTypes.func,\r\n    appInfo: PropTypes.func.isRequired,\r\n    appSuccess: PropTypes.func.isRequired,\r\n    genericException: PropTypes.func.isRequired,\r\n    setEditable: PropTypes.func,\r\n    refresh: PropTypes.oneOfType([PropTypes.object])\r\n};\r\n\r\nexport default withApi(withNotification(EvolutionsForm));","import React, { useState, useRef } from 'react';\nimport { PageGeneral } from 'components';\nimport masterMessages from 'constantes/masterMessages';\nimport EvolutionsForm from './Form';\n\nconst { title, createTitle } = masterMessages.transactions.evolutions;\n\nconst breadcrumbs = [{ label: 'Maestros' }, { label: title }];\n\nfunction New() {\n  const [editable, setEditable] = useState(false);\n  const [viewMode, setViewMode] = useState(false);\n  const child = useRef();\n\n  return (\n    <PageGeneral title={createTitle} breadcrumbs={breadcrumbs}>\n      <EvolutionsForm\n        refresh={child}\n        setEditable={setEditable}\n        setViewMode={setViewMode}\n        viewMode={viewMode} \n      />\n    </PageGeneral>\n  );\n}\n\nNew.propTypes = {};\n\nexport default New;","import { unstable_generateUtilityClasses as generateUtilityClasses } from '@mui/utils';\nconst boxClasses = generateUtilityClasses('MuiBox', ['root']);\nexport default boxClasses;","'use client';\n\nimport PropTypes from 'prop-types';\nimport { unstable_ClassNameGenerator as ClassNameGenerator } from '@mui/utils';\nimport createBox from '../createBox';\nimport boxClasses from './boxClasses';\nconst Box = createBox({\n  defaultClassName: boxClasses.root,\n  generateClassName: ClassNameGenerator.generate\n});\nprocess.env.NODE_ENV !== \"production\" ? Box.propTypes /* remove-proptypes */ = {\n  // âââââââââââââââââââââââââââââââ Warning âââââââââââââââââââââââââââââââ\n  // â These PropTypes are generated from the TypeScript type definitions. â\n  // â    To update them, edit the d.ts file and run `pnpm proptypes`.     â\n  // âââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââ\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default Box;"],"names":["validationSchema","Yup","code","required","patient_id","employee_id","date_of_evolution","area","comments","status","urlBase","endPoints","transactions","evolutions","base","patientList","employeeList","initState","selectMap","data","map","row","value","id","label","name","withApi","withNotification","_ref","doGet","genericException","appSuccess","doPost","doPut","appInfo","setEditable","viewMode","refresh","navigate","useNavigate","state","setState","useState","isLoading","setLoading","loadFields","useCallback","async","params","url","initForm","init","patient","employee","getStatusLabel","error","console","log","useEffect","redirectEdit","concat","replace","_jsx","_Fragment","children","Box","p","Loader","Formik","enableReinitialize","initialValues","onSubmit","values","getStatusValue","mapValues","valuesForm","method","resp","messages","crud","update","response","new","subProps","_jsxs","Form","FormButtons","formProps","Grid","container","direction","spacing","item","xs","md","xl","Field","component","TextBase","disabled","InputProps","readOnly","SelectBase","items","DatePickerBase","TextAreaBase","rows","title","createTitle","masterMessages","breadcrumbs","editable","setViewMode","child","useRef","PageGeneral","EvolutionsForm","generateUtilityClasses","createBox","defaultClassName","boxClasses","root","generateClassName","ClassNameGenerator","generate"],"sourceRoot":""}