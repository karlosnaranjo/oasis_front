{"version":3,"file":"static/js/11.b1a462ef.chunk.js","mappings":"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","sources":["pages/seguridad/roles/Form.js","pages/seguridad/roles/New.js"],"sourcesContent":["import React, { useCallback, useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Grid } from \"@mui/material\";\nimport { Form, Field, Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport {\n  SelectBase,\n  TextBase,\n  TextAreaBase,\n  AutoCompleteBase,\n  Loader,\n} from \"components\";\nimport endPoints from \"endPoints/endPoints\";\nimport messages from \"constantes/messages\";\nimport { withApi, withNotification } from \"wrappers\";\nimport { FormButtons } from \"components/controls\";\nimport { useNavigate } from \"react-router\";\n\nconst validationSchema = Yup.object({\n  /* documentoCompra: Yup.number().required('El campo es requerido'),\n  documentoProveedor: Yup.string().required('El campo es requerido'),\n  proveedor: Yup.number().required('El campo es requerido'),\n  // moneda: Yup.number().required('El campo es requerido'),\n  fechaCompra: Yup.date().required('El campo fecha es requerida'),\n  bodega: Yup.number().when('requiereBodega', (requiereBodega, schema) =>\n    requiereBodega ? schema.required('El campo incoterm es requerido') : schema\n  ) */\n});\n\nconst urlBase = endPoints.seguridad.roles.base;\n\nlet empleadosList = [{ label: \"General\", value: \"1\" }];\n\nconst baseUrl = \"/app/seguridad/roles\";\n\nconst initState = {\n  nombre: \"\",\n  compania_id: 1,\n};\n\nconst RolForm = ({\n  id,\n  doGet,\n  genericException,\n  appSuccess,\n  doPost,\n  doPut,\n  appInfo,\n  refresh,\n}) => {\n  const navigate = useNavigate();\n  const [state, setState] = useState(initState);\n\n  // Call to API for load form values\n  const loadFields = useCallback(async () => {\n    const params = {\n      url: endPoints.seguridad.roles.initFormComponent,\n      data: id ? { id: id } : {},\n    };\n    const resp = await doGet(params);\n    return resp;\n  }, [doGet, id, refresh]);\n\n  const init = useCallback(async () => {\n    try {\n      const seguridad = await loadFields();\n      const { name: nombre } = seguridad;\n\n      setState({\n        id: id || null,\n        nombre: nombre || \"\",\n      });\n    } catch (error) {\n      genericException(error);\n    }\n  }, [genericException, loadFields]);\n\n  useEffect(() => {\n    init();\n  }, [init]);\n\n  const redirectEdit = (id) => {\n    navigate(`${baseUrl}/edit/${id}`, { replace: false });\n  };\n\n  const mapValues = (values) => {\n    const { nombre } = values;\n    return {\n      name: nombre,\n    };\n  };\n\n  const submit = async (valuesForm) => {\n    const data = mapValues(valuesForm);\n    const params = {\n      url: id ? `${urlBase}/${id}` : urlBase,\n      data: data,\n    };\n    const method = id ? doPut : doPost;\n\n    try {\n      const resp = await method(params);\n      if (id) {\n        appInfo(messages.crud.update);\n        redirectEdit(resp.id);\n      } else {\n        appSuccess(messages.crud.new);\n        redirectEdit(resp.id);\n      }\n    } catch (error) {\n      console.log(\"ERROR AL GUARDAR \" + error);\n      genericException(error);\n    }\n  };\n\n  const { isLoading } = state;\n  return isLoading ? (\n    <Loader />\n  ) : (\n    <Formik\n      enableReinitialize\n      initialValues={state}\n      validationSchema={validationSchema}\n      onSubmit={submit}\n    >\n      {(subProps) => (\n        <Form>\n          <FormButtons formProps={subProps} />\n          <Grid container direction=\"row\" spacing={2}>\n            <Grid container item spacing={2}>\n              <Grid item xs={6} md={6} xl={6}>\n                <Field label=\"Nombre\" name=\"nombre\" component={TextBase} />\n              </Grid>\n            </Grid>\n          </Grid>\n        </Form>\n      )}\n    </Formik>\n  );\n};\n\nRolForm.propTypes = {\n  id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  doPost: PropTypes.func,\n  doGet: PropTypes.func,\n  doPut: PropTypes.func,\n  appInfo: PropTypes.func.isRequired,\n  appSuccess: PropTypes.func.isRequired,\n  genericException: PropTypes.func.isRequired,\n  setViewMode: PropTypes.func,\n  refresh: PropTypes.oneOfType([PropTypes.object]),\n};\n\nexport default withApi(withNotification(RolForm));\n","import React from \"react\";\nimport { PageGeneral } from \"components\";\nimport masterMessages from \"constantes/masterMessages\";\nimport RolForm from \"./Form\";\n\nconst { title, createTitle } = masterMessages.seguridad.rol;\n\nconst breadcrumbs = [{ label: \"Seguridad\" }, { label: title }];\n\nfunction New() {\n  return (\n    <PageGeneral title={createTitle} breadcrumbs={breadcrumbs}>\n      <RolForm />\n    </PageGeneral>\n  );\n}\n\nNew.propTypes = {};\n\nexport default New;\n"],"names":["validationSchema","Yup","urlBase","endPoints","seguridad","roles","base","initState","nombre","compania_id","withApi","withNotification","_ref","id","doGet","genericException","appSuccess","doPost","doPut","appInfo","refresh","navigate","useNavigate","state","setState","useState","loadFields","useCallback","async","params","url","initFormComponent","data","init","name","error","useEffect","redirectEdit","concat","replace","isLoading","_jsx","Loader","Formik","enableReinitialize","initialValues","onSubmit","values","mapValues","valuesForm","method","resp","messages","crud","update","new","console","log","children","subProps","_jsxs","Form","FormButtons","formProps","Grid","container","direction","spacing","item","xs","md","xl","Field","label","component","TextBase","title","createTitle","masterMessages","rol","breadcrumbs","PageGeneral","RolForm"],"sourceRoot":""}