{"version":3,"file":"static/js/11.b1a462ef.chunk.js","mappings":"uPAkBA,MAAMA,EAAmBC,EAAAA,GAAW,CAClC,GAUIC,EAAUC,EAAAA,EAAUC,UAAUC,MAAMC,KAI1C,MAEMC,EAAY,CAChBC,OAAQ,GACRC,YAAa,GAoHf,GAAeC,EAAAA,EAAAA,KAAQC,EAAAA,EAAAA,KAjHPC,IAST,IATU,GACfC,EAAE,MACFC,EAAK,iBACLC,EAAgB,WAChBC,EAAU,OACVC,EAAM,MACNC,EAAK,QACLC,EAAO,QACPC,GACDR,EACC,MAAMS,GAAWC,EAAAA,EAAAA,OACVC,EAAOC,IAAYC,EAAAA,EAAAA,UAASlB,GAG7BmB,GAAaC,EAAAA,EAAAA,cAAYC,UAC7B,MAAMC,EAAS,CACbC,IAAK3B,EAAAA,EAAUC,UAAUC,MAAM0B,kBAC/BC,KAAMnB,EAAK,CAAEA,GAAIA,GAAO,CAAC,GAG3B,aADmBC,EAAMe,EACd,GACV,CAACf,EAAOD,EAAIO,IAETa,GAAON,EAAAA,EAAAA,cAAYC,UACvB,IACE,MAAMxB,QAAkBsB,KAChBQ,KAAM1B,GAAWJ,EAEzBoB,EAAS,CACPX,GAAIA,GAAM,KACVL,OAAQA,GAAU,IAEtB,CAAE,MAAO2B,GACPpB,EAAiBoB,EACnB,IACC,CAACpB,EAAkBW,KAEtBU,EAAAA,EAAAA,YAAU,KACRH,GAAM,GACL,CAACA,IAEJ,MAAMI,EAAgBxB,IACpBQ,EAAS,GAADiB,OAjDI,uBAiDO,UAAAA,OAASzB,GAAM,CAAE0B,SAAS,GAAQ,GAiCjD,UAAEC,GAAcjB,EACtB,OAAOiB,GACLC,EAAAA,EAAAA,KAACC,EAAAA,GAAM,KAEPD,EAAAA,EAAAA,KAACE,EAAAA,GAAM,CACLC,oBAAkB,EAClBC,cAAetB,EACfvB,iBAAkBA,EAClB8C,SA/BWlB,UACb,MAAMI,EARWe,KACjB,MAAM,OAAEvC,GAAWuC,EACnB,MAAO,CACLb,KAAM1B,EACP,EAIYwC,CAAUC,GACjBpB,EAAS,CACbC,IAAKjB,EAAE,GAAAyB,OAAMpC,EAAO,KAAAoC,OAAIzB,GAAOX,EAC/B8B,KAAMA,GAEFkB,EAASrC,EAAKK,EAAQD,EAE5B,IACE,MAAMkC,QAAaD,EAAOrB,GACtBhB,GACFM,EAAQiC,EAAAA,EAASC,KAAKC,QACtBjB,EAAac,EAAKtC,MAElBG,EAAWoC,EAAAA,EAASC,KAAKE,KACzBlB,EAAac,EAAKtC,IAEtB,CAAE,MAAOsB,GACPqB,QAAQC,IAAI,oBAAsBtB,GAClCpB,EAAiBoB,EACnB,GAWmBuB,SAEfC,IACAC,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAAAH,SAAA,EACHjB,EAAAA,EAAAA,KAACqB,EAAAA,GAAW,CAACC,UAAWJ,KACxBlB,EAAAA,EAAAA,KAACuB,EAAAA,GAAI,CAACC,WAAS,EAACC,UAAU,MAAMC,QAAS,EAAET,UACzCjB,EAAAA,EAAAA,KAACuB,EAAAA,GAAI,CAACC,WAAS,EAACG,MAAI,EAACD,QAAS,EAAET,UAC9BjB,EAAAA,EAAAA,KAACuB,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAEb,UAC7BjB,EAAAA,EAAAA,KAAC+B,EAAAA,GAAK,CAACC,MAAM,SAASvC,KAAK,SAASwC,UAAWC,EAAAA,eAO5D,I,yGCrIH,MAAM,MAAEC,EAAK,YAAEC,GAAgBC,EAAAA,QAAe1E,UAAU2E,IAElDC,EAAc,CAAC,CAAEP,MAAO,aAAe,CAAEA,MAAOG,IAYtD,QAVA,WACE,OACEnC,EAAAA,EAAAA,KAACwC,EAAAA,GAAW,CAACL,MAAOC,EAAaG,YAAaA,EAAYtB,UACxDjB,EAAAA,EAAAA,KAACyC,EAAAA,EAAO,KAGd,C","sources":["pages/seguridad/roles/Form.js","pages/seguridad/roles/New.js"],"sourcesContent":["import React, { useCallback, useEffect, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Grid } from \"@mui/material\";\r\nimport { Form, Field, Formik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport {\r\n  SelectBase,\r\n  TextBase,\r\n  TextAreaBase,\r\n  AutoCompleteBase,\r\n  Loader,\r\n} from \"components\";\r\nimport endPoints from \"endPoints/endPoints\";\r\nimport messages from \"constantes/messages\";\r\nimport { withApi, withNotification } from \"wrappers\";\r\nimport { FormButtons } from \"components/controls\";\r\nimport { useNavigate } from \"react-router\";\r\n\r\nconst validationSchema = Yup.object({\r\n  /* documentoCompra: Yup.number().required('El campo es requerido'),\r\n  documentoProveedor: Yup.string().required('El campo es requerido'),\r\n  proveedor: Yup.number().required('El campo es requerido'),\r\n  // moneda: Yup.number().required('El campo es requerido'),\r\n  fechaCompra: Yup.date().required('El campo fecha es requerida'),\r\n  bodega: Yup.number().when('requiereBodega', (requiereBodega, schema) =>\r\n    requiereBodega ? schema.required('El campo incoterm es requerido') : schema\r\n  ) */\r\n});\r\n\r\nconst urlBase = endPoints.seguridad.roles.base;\r\n\r\nlet empleadosList = [{ label: \"General\", value: \"1\" }];\r\n\r\nconst baseUrl = \"/app/seguridad/roles\";\r\n\r\nconst initState = {\r\n  nombre: \"\",\r\n  compania_id: 1,\r\n};\r\n\r\nconst RolForm = ({\r\n  id,\r\n  doGet,\r\n  genericException,\r\n  appSuccess,\r\n  doPost,\r\n  doPut,\r\n  appInfo,\r\n  refresh,\r\n}) => {\r\n  const navigate = useNavigate();\r\n  const [state, setState] = useState(initState);\r\n\r\n  // Call to API for load form values\r\n  const loadFields = useCallback(async () => {\r\n    const params = {\r\n      url: endPoints.seguridad.roles.initFormComponent,\r\n      data: id ? { id: id } : {},\r\n    };\r\n    const resp = await doGet(params);\r\n    return resp;\r\n  }, [doGet, id, refresh]);\r\n\r\n  const init = useCallback(async () => {\r\n    try {\r\n      const seguridad = await loadFields();\r\n      const { name: nombre } = seguridad;\r\n\r\n      setState({\r\n        id: id || null,\r\n        nombre: nombre || \"\",\r\n      });\r\n    } catch (error) {\r\n      genericException(error);\r\n    }\r\n  }, [genericException, loadFields]);\r\n\r\n  useEffect(() => {\r\n    init();\r\n  }, [init]);\r\n\r\n  const redirectEdit = (id) => {\r\n    navigate(`${baseUrl}/edit/${id}`, { replace: false });\r\n  };\r\n\r\n  const mapValues = (values) => {\r\n    const { nombre } = values;\r\n    return {\r\n      name: nombre,\r\n    };\r\n  };\r\n\r\n  const submit = async (valuesForm) => {\r\n    const data = mapValues(valuesForm);\r\n    const params = {\r\n      url: id ? `${urlBase}/${id}` : urlBase,\r\n      data: data,\r\n    };\r\n    const method = id ? doPut : doPost;\r\n\r\n    try {\r\n      const resp = await method(params);\r\n      if (id) {\r\n        appInfo(messages.crud.update);\r\n        redirectEdit(resp.id);\r\n      } else {\r\n        appSuccess(messages.crud.new);\r\n        redirectEdit(resp.id);\r\n      }\r\n    } catch (error) {\r\n      console.log(\"ERROR AL GUARDAR \" + error);\r\n      genericException(error);\r\n    }\r\n  };\r\n\r\n  const { isLoading } = state;\r\n  return isLoading ? (\r\n    <Loader />\r\n  ) : (\r\n    <Formik\r\n      enableReinitialize\r\n      initialValues={state}\r\n      validationSchema={validationSchema}\r\n      onSubmit={submit}\r\n    >\r\n      {(subProps) => (\r\n        <Form>\r\n          <FormButtons formProps={subProps} />\r\n          <Grid container direction=\"row\" spacing={2}>\r\n            <Grid container item spacing={2}>\r\n              <Grid item xs={6} md={6} xl={6}>\r\n                <Field label=\"Nombre\" name=\"nombre\" component={TextBase} />\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </Form>\r\n      )}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nRolForm.propTypes = {\r\n  id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n  doPost: PropTypes.func,\r\n  doGet: PropTypes.func,\r\n  doPut: PropTypes.func,\r\n  appInfo: PropTypes.func.isRequired,\r\n  appSuccess: PropTypes.func.isRequired,\r\n  genericException: PropTypes.func.isRequired,\r\n  setViewMode: PropTypes.func,\r\n  refresh: PropTypes.oneOfType([PropTypes.object]),\r\n};\r\n\r\nexport default withApi(withNotification(RolForm));\r\n","import React from \"react\";\r\nimport { PageGeneral } from \"components\";\r\nimport masterMessages from \"constantes/masterMessages\";\r\nimport RolForm from \"./Form\";\r\n\r\nconst { title, createTitle } = masterMessages.seguridad.rol;\r\n\r\nconst breadcrumbs = [{ label: \"Seguridad\" }, { label: title }];\r\n\r\nfunction New() {\r\n  return (\r\n    <PageGeneral title={createTitle} breadcrumbs={breadcrumbs}>\r\n      <RolForm />\r\n    </PageGeneral>\r\n  );\r\n}\r\n\r\nNew.propTypes = {};\r\n\r\nexport default New;\r\n"],"names":["validationSchema","Yup","urlBase","endPoints","seguridad","roles","base","initState","nombre","compania_id","withApi","withNotification","_ref","id","doGet","genericException","appSuccess","doPost","doPut","appInfo","refresh","navigate","useNavigate","state","setState","useState","loadFields","useCallback","async","params","url","initFormComponent","data","init","name","error","useEffect","redirectEdit","concat","replace","isLoading","_jsx","Loader","Formik","enableReinitialize","initialValues","onSubmit","values","mapValues","valuesForm","method","resp","messages","crud","update","new","console","log","children","subProps","_jsxs","Form","FormButtons","formProps","Grid","container","direction","spacing","item","xs","md","xl","Field","label","component","TextBase","title","createTitle","masterMessages","rol","breadcrumbs","PageGeneral","RolForm"],"sourceRoot":""}