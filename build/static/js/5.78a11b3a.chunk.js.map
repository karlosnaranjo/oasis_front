{"version":3,"file":"static/js/5.78a11b3a.chunk.js","mappings":"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","sources":["pages/transactions/evolutions/Edit.js","pages/transactions/evolutions/Form.js","../node_modules/@mui/system/esm/Box/boxClasses.js","../node_modules/@mui/system/esm/Box/Box.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport { withApi, withNotification } from 'wrappers';\nimport { PageGeneral } from 'components';\nimport masterMessages from 'constantes/masterMessages';\nimport { useParams } from 'react-router';\nimport TabsComponent from 'components/Tab';\nimport { Card, Grid } from '@mui/material';\nimport EvolutionsForm from './Form';\n\nconst { title, updateTitle } = masterMessages.transactions.evolutions;\n\nconst breadcrumbs = [{ label: 'Maestros' }, { label: title }];\n\nconst MIN_HEIGHT = 250;\n\nfunction Edit() {\n  const { id } = useParams();\n  const [editable, setEditable] = useState(false);\n  const [viewMode, setViewMode] = useState(false);\n\n  const child = useRef();\n\n  const refreshParent = () => child.current.refresh();\n  \n\n  return (\n    <PageGeneral title={updateTitle} breadcrumbs={breadcrumbs} withOutCard>\n      <Grid container spacing={2} sx={{ pb: 2, minHeight: MIN_HEIGHT }}>\n        <Grid item xs={12} md={12}>\n          <Card sx={{ p: 3, minHeight: '100%' }}>\n              <EvolutionsForm id={id} refresh={child} setEditable={setEditable} setViewMode={setViewMode} viewMode={viewMode} \n              />\n          </Card>\n        </Grid>\n      </Grid>\n      \n    </PageGeneral>\n  );\n}\n\nexport default withApi(withNotification(Edit));","import React, { useCallback, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Grid, } from '@mui/material';\nimport { Form, Field, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { TextBase, SelectBase, TextAreaBase, Loader } from 'components';\nimport endPoints from 'endPoints/endPoints';\nimport messages from 'constantes/messages';\nimport { withApi, withNotification } from 'wrappers';\nimport { FormButtons } from 'components/controls';\nimport { useNavigate } from 'react-router';\nimport { Box } from '@mui/system';\nimport { getStatusLabel, getStatusValue } from 'utils/formHelpers';\nimport DatePickerBase from 'components/pickers/DatePickerBase';\n\nconst validationSchema = Yup.object({\n    code: Yup.string().required('Codigo es requerido'),\n    patient_id: Yup.string().required('Paciente es requerido'),\n    employee_id: Yup.string().required('Empleado es requerido'),\n    date_of_evolution: Yup.string().required('Fecha de registro es requerido'),\n    area: Yup.string().required('Area que registra evolucion es requerido'),\n    comments: Yup.string().required('Notas es requerido'),\n    status: Yup.string().required('Estado es requerido'),\n\n});\n\nconst urlBase = endPoints.transactions.evolutions.base;\n\nlet patientList = [];\nlet employeeList = [];\n\n\nconst baseUrl = '/app/general/transactions/evolutions';\n\nconst initState = {\n    code: false,\n    patient_id: null,\n    employee_id: null,\n    date_of_evolution: false,\n    area: false,\n    comments: false,\n    status: 1,\n\n};\n\nconst selectMap = (data) => {\n    return data.map((row) => ({ value: row.id, label: row.name }));\n};\n\nconst EvolutionsForm = ({\n    id,\n    doGet,\n    genericException,\n    appSuccess,\n    doPost,\n    doPut,\n    appInfo,\n    setEditable,\n    viewMode,\n    refresh,\n}) => {\n    const navigate = useNavigate();\n    const [state, setState] = useState(initState);\n    const [isLoading, setLoading] = useState(true);\n\n    // Call to API for load form values\n    const loadFields = useCallback(async () => {\n        const params = {\n            url: endPoints.transactions.evolutions.initForm,\n            data: id ? { id: id } : {}\n        };\n        const resp = await doGet(params);\n        return resp;\n    }, [doGet, id, refresh, setEditable]);\n\n    const init = useCallback(async () => {\n        try {\n            const { evolutions, patient, employee, } = await loadFields();\n            patientList = selectMap(patient);\n            employeeList = selectMap(employee);\n\n\n            const {\n                code, patient_id, employee_id, date_of_evolution, area, comments, status,\n            } = evolutions;\n\n            setState({\n                code: code || \"AutomÃ¡tico\",\n                patient_id: patient_id || null,\n                employee_id: employee_id || null,\n                date_of_evolution: date_of_evolution || \"\",\n                area: area || \"\",\n                comments: comments || \"\",\n                status: getStatusLabel(status) || \"Activo\",\n\n            });\n\n            setLoading(false);\n        } catch (error) {\n            console.log('ERROR AL INICIAR' + error);\n            genericException(error);\n        }\n    }, [genericException, loadFields]);\n\n    useEffect(() => {\n        init();\n    }, [init]);\n\n    const redirectEdit = (id) => {\n        navigate(`${baseUrl}/edit/${id}`, { replace: false });\n    };\n\n    const mapValues = (values) => {\n        const { code, patient_id, employee_id, date_of_evolution, area, comments, status, } = values;\n        return {\n            code, patient_id, employee_id, date_of_evolution, area, comments, status: getStatusValue(status),\n        };\n    };\n\n    const submit = async (valuesForm) => {\n        const data = mapValues(valuesForm);\n        const params = {\n            url: id ? `${urlBase}/${id}` : urlBase,\n            data: data\n        };\n        const method = id ? doPut : doPost;\n\n        try {\n            const resp = await method(params);\n            if (id) {\n                appInfo(messages.crud.update);\n                redirectEdit(resp.response.data.id);\n            } else {\n                appSuccess(messages.crud.new);\n                redirectEdit(resp.response.data.id);\n            }\n        } catch (error) {\n            console.log('ERROR AL GUARDAR ' + error);\n            genericException(error);\n        }\n    };\n\n    return (\n        <>\n            {isLoading ? (\n                <Box p={10}>\n                    <Loader />\n                </Box>\n            ) : (\n                <Formik enableReinitialize initialValues={state} validationSchema={validationSchema} onSubmit={submit}>\n                    {(subProps) => (\n                        <Form>\n                            {!id && viewMode ? (\n                                <FormButtons formProps={subProps} />\n                            ) : (\n                                <FormButtons formProps={subProps} />\n                            )}\n                            <Grid container direction=\"row\" spacing={2}>\n\n                                <Grid item xs={6} md={6} xl={6}>\n                                    <Field label=\"Codigo\" name=\"code\" component={TextBase}\n                                        disabled={true}\n                                        InputProps={{\n                                            readOnly: true\n                                        }}\n                                    //onClick={(event) => handleChangecode(event)} \n                                    />\n                                </Grid>\n\n                                <Grid item xs={6} md={6} xl={6}>\n                                    <Field label=\"Paciente\" name=\"patient_id\" component={SelectBase} items={patientList}\n                                    /*onOptionSelected={(selectedOption) => handleOnChangepatient_id(selectedOption, subProps)} */\n                                    />\n                                </Grid>\n\n                                <Grid item xs={6} md={6} xl={6}>\n                                    <Field label=\"Empleado\" name=\"employee_id\" component={SelectBase} items={employeeList}\n                                    /*onOptionSelected={(selectedOption) => handleOnChangeemployee_id(selectedOption, subProps)} */\n                                    />\n                                </Grid>\n\n                                <Grid item xs={6} md={6} xl={6}>\n                                    <Field label=\"Fecha de registro\" name=\"date_of_evolution\" component={DatePickerBase}\n                                    //onClick={(event) => handleChangedate_of_evolution(event)} \n                                    />\n                                </Grid>\n\n                                <Grid item xs={6} md={6} xl={6}>\n                                    <Field label=\"Terapeuta que registra evoluciÃ³n\" name=\"area\" component={TextBase}\n                                    />\n                                </Grid>\n\n                                <Grid item xs={12} md={12} xl={12}>\n                                    <Field label=\"Notas\" name=\"comments\" component={TextAreaBase} rows={8}\n                                    //onClick={(event) => handleChangecomments(event)} \n                                    />\n                                </Grid>\n\n                                <Grid item xs={12} md={6} xl={6}>\n                                    <Field label=\"Estado\" name=\"status\" component={TextBase} disabled={true} />\n                                </Grid>\n\n                            </Grid>\n                        </Form>\n                    )}\n                </Formik>\n            )}\n        </>\n    );\n};\n\nEvolutionsForm.propTypes = {\n    id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    doPost: PropTypes.func,\n    doGet: PropTypes.func,\n    doPut: PropTypes.func,\n    appInfo: PropTypes.func.isRequired,\n    appSuccess: PropTypes.func.isRequired,\n    genericException: PropTypes.func.isRequired,\n    setEditable: PropTypes.func,\n    refresh: PropTypes.oneOfType([PropTypes.object])\n};\n\nexport default withApi(withNotification(EvolutionsForm));","import { unstable_generateUtilityClasses as generateUtilityClasses } from '@mui/utils';\nconst boxClasses = generateUtilityClasses('MuiBox', ['root']);\nexport default boxClasses;","'use client';\n\nimport PropTypes from 'prop-types';\nimport { unstable_ClassNameGenerator as ClassNameGenerator } from '@mui/utils';\nimport createBox from '../createBox';\nimport boxClasses from './boxClasses';\nconst Box = createBox({\n  defaultClassName: boxClasses.root,\n  generateClassName: ClassNameGenerator.generate\n});\nprocess.env.NODE_ENV !== \"production\" ? Box.propTypes /* remove-proptypes */ = {\n  // âââââââââââââââââââââââââââââââ Warning âââââââââââââââââââââââââââââââ\n  // â These PropTypes are generated from the TypeScript type definitions. â\n  // â    To update them, edit the d.ts file and run `pnpm proptypes`.     â\n  // âââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââ\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default Box;"],"names":["title","updateTitle","masterMessages","transactions","evolutions","breadcrumbs","label","withApi","withNotification","id","useParams","editable","setEditable","useState","viewMode","setViewMode","child","useRef","_jsx","PageGeneral","withOutCard","children","Grid","container","spacing","sx","pb","minHeight","item","xs","md","Card","p","EvolutionsForm","refresh","validationSchema","Yup","code","required","patient_id","employee_id","date_of_evolution","area","comments","status","urlBase","endPoints","base","patientList","employeeList","initState","selectMap","data","map","row","value","name","_ref","doGet","genericException","appSuccess","doPost","doPut","appInfo","navigate","useNavigate","state","setState","isLoading","setLoading","loadFields","useCallback","async","params","url","initForm","init","patient","employee","getStatusLabel","error","console","log","useEffect","redirectEdit","concat","replace","_Fragment","Box","Loader","Formik","enableReinitialize","initialValues","onSubmit","values","getStatusValue","mapValues","valuesForm","method","resp","messages","crud","update","response","new","subProps","_jsxs","Form","FormButtons","formProps","direction","xl","Field","component","TextBase","disabled","InputProps","readOnly","SelectBase","items","DatePickerBase","TextAreaBase","rows","generateUtilityClasses","createBox","defaultClassName","boxClasses","root","generateClassName","ClassNameGenerator","generate"],"sourceRoot":""}